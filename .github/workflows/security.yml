name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * 1'  # Run every Monday at 2 AM
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  # Dependency Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety pip-audit

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json
        continue-on-error: true

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-scan-results
          path: |
            safety-report.json
            pip-audit-report.json

  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Build Docker image
        run: |
          docker build -t n8n-generator:scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'n8n-generator:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        id: grype-scan
        with:
          image: 'n8n-generator:scan'
          fail-build: false

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: ${{ steps.grype-scan.outputs.sarif }}

  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # License Compliance
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-licenses

      - name: Generate license report
        run: |
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --format=html --output-file=licenses.html

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: |
            licenses.json
            licenses.html

  # Security Policy Compliance
  policy-check:
    name: Security Policy Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check for security policy
        run: |
          if [ ! -f SECURITY.md ]; then
            echo "::warning::SECURITY.md file not found"
          fi

      - name: Check for vulnerability disclosure
        run: |
          if [ ! -f .github/SECURITY.md ]; then
            echo "::warning::.github/SECURITY.md file not found"
          fi

      - name: Validate security configuration
        run: |
          # Check for secure defaults in configuration
          python -c "
          import os
          import sys
          
          # Check environment variables
          issues = []
          
          if os.getenv('SECRET_KEY', 'dev-key') == 'dev-key':
              issues.append('Default SECRET_KEY detected')
          
          if os.getenv('DEBUG', 'false').lower() == 'true':
              issues.append('DEBUG mode enabled')
          
          if issues:
              print('Security issues found:')
              for issue in issues:
                  print(f'  - {issue}')
              sys.exit(1)
          else:
              print('Security configuration check passed')
          "

  # Generate Security Report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, container-scan, secret-scan, license-scan]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "Generated on: $(date)" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Scans Performed" >> security-summary.md
          echo "- âœ… CodeQL Analysis" >> security-summary.md
          echo "- âœ… Dependency Vulnerability Scan" >> security-summary.md
          echo "- âœ… Container Security Scan" >> security-summary.md
          echo "- âœ… Secret Scanning" >> security-summary.md
          echo "- âœ… License Compliance Check" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Results" >> security-summary.md
          echo "Detailed results are available in the artifacts." >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ”’ Security Scan Results\n\n${summary}`
            });