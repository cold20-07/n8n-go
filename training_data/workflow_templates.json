[
  {
    "name": "AI-Powered Information Monitoring with OpenAI, Google Sheets, Jina AI and Slack",
    "description": "AI-Powered Information Monitoring with OpenAI, Google Sheets, Jina AI and Slack: Scheduled automation with AI processing outputting to slack, googleSheets",
    "nodes": [
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Basic LLM Chain",
        "parameters": [
          "text",
          "messages",
          "promptType"
        ]
      },
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "Schedule Trigger",
        "parameters": [
          "rule"
        ]
      },
      {
        "type": "n8n-nodes-base.rssFeedRead",
        "name": "RSS Read",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textClassifier",
        "name": "Relevance Classification for Topic Monitoring",
        "parameters": [
          "options",
          "inputText",
          "categories"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Google Sheets - Get RSS Feed url followed",
        "parameters": [
          "options",
          "sheetName",
          "documentId",
          "authentication"
        ]
      },
      {
        "type": "n8n-nodes-base.slack",
        "name": "Slack1",
        "parameters": [
          "text",
          "select",
          "channelId",
          "otherOptions",
          "authentication"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Google Sheets - Get article monitored database",
        "parameters": [
          "options",
          "sheetName",
          "documentId",
          "authentication"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Code",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.noOp",
        "name": "No Operation, do nothing",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "If",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Jina AI - Read URL",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set field - existing_url",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model1",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set fields - Not relevant articles",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Google Sheets - Add relevant articles",
        "parameters": [
          "columns",
          "options",
          "operation",
          "sheetName",
          "documentId",
          "authentication"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Google Sheets - Add relevant article",
        "parameters": [
          "columns",
          "options",
          "operation",
          "sheetName",
          "documentId",
          "authentication"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set Fields - Relevant Articles",
        "parameters": [
          "options",
          "assignments"
        ]
      }
    ],
    "connections": {
      "If": {
        "main": [
          [
            {
              "node": "Relevance Classification for Topic Monitoring",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "No Operation, do nothing",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Code": {
        "main": [
          [
            {
              "node": "If",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "RSS Read": {
        "main": [
          [
            {
              "node": "Code",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Basic LLM Chain": {
        "main": [
          [
            {
              "node": "Slack1",
              "type": "main",
              "index": 0
            },
            {
              "node": "Set Fields - Relevant Articles",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Schedule Trigger": {
        "main": [
          [
            {
              "node": "Google Sheets - Get article monitored database",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Basic LLM Chain",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Jina AI - Read URL": {
        "main": [
          [
            {
              "node": "Basic LLM Chain",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Relevance Classification for Topic Monitoring",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Set field - existing_url": {
        "main": [
          [
            {
              "node": "Google Sheets - Get RSS Feed url followed",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set Fields - Relevant Articles": {
        "main": [
          [
            {
              "node": "Google Sheets - Add relevant article",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set fields - Not relevant articles": {
        "main": [
          [
            {
              "node": "Google Sheets - Add relevant articles",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Sheets - Add relevant article": {
        "main": [
          []
        ]
      },
      "Google Sheets - Get RSS Feed url followed": {
        "main": [
          [
            {
              "node": "RSS Read",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Relevance Classification for Topic Monitoring": {
        "main": [
          [
            {
              "node": "Jina AI - Read URL",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Set fields - Not relevant articles",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Sheets - Get article monitored database": {
        "main": [
          [
            {
              "node": "Set field - existing_url",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "chrome extension backend with AI",
    "description": "chrome extension backend with AI: with AI processing outputting to respondToWebhook, webhook",
    "nodes": [
      {
        "type": "n8n-nodes-base.webhook",
        "name": "Webhook",
        "parameters": [
          "path",
          "options",
          "httpMethod",
          "responseMode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "OpenAI",
        "parameters": [
          "text",
          "modelId",
          "options",
          "resource",
          "inputType",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.respondToWebhook",
        "name": "Respond to Webhook",
        "parameters": [
          "options",
          "respondWith",
          "responseBody"
        ]
      }
    ],
    "connections": {
      "OpenAI": {
        "main": [
          [
            {
              "node": "Respond to Webhook",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Webhook": {
        "main": [
          [
            {
              "node": "OpenAI",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.googleDrive",
        "name": "Google Drive",
        "parameters": [
          "fileId",
          "options",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
        "name": "Recursive Character Text Splitter",
        "parameters": [
          "chunkSize",
          "chunkOverlap"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "name": "Default Data Loader",
        "parameters": [
          "options",
          "dataType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
        "name": "Question and Answer Chain",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI2",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
        "name": "Vector Store Retriever",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
        "name": "Read Pinecone Vector Store",
        "parameters": [
          "options",
          "pineconeIndex"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
        "name": "Insert into Pinecone vector store",
        "parameters": [
          "mode",
          "options",
          "pineconeIndex"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chatTrigger",
        "name": "When clicking 'Chat' button below",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking 'Test Workflow' button",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set Google Drive file URL",
        "parameters": [
          "options",
          "assignments"
        ]
      }
    ],
    "connections": {
      "Google Drive": {
        "main": [
          [
            {
              "node": "Insert into Pinecone vector store",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI": {
        "ai_embedding": [
          [
            {
              "node": "Insert into Pinecone vector store",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Question and Answer Chain",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI2": {
        "ai_embedding": [
          [
            {
              "node": "Read Pinecone Vector Store",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Default Data Loader": {
        "ai_document": [
          [
            {
              "node": "Insert into Pinecone vector store",
              "type": "ai_document",
              "index": 0
            }
          ]
        ]
      },
      "Vector Store Retriever": {
        "ai_retriever": [
          [
            {
              "node": "Question and Answer Chain",
              "type": "ai_retriever",
              "index": 0
            }
          ]
        ]
      },
      "Set Google Drive file URL": {
        "main": [
          [
            {
              "node": "Google Drive",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Read Pinecone Vector Store": {
        "ai_vectorStore": [
          [
            {
              "node": "Vector Store Retriever",
              "type": "ai_vectorStore",
              "index": 0
            }
          ]
        ]
      },
      "Recursive Character Text Splitter": {
        "ai_textSplitter": [
          [
            {
              "node": "Default Data Loader",
              "type": "ai_textSplitter",
              "index": 0
            }
          ]
        ]
      },
      "When clicking 'Chat' button below": {
        "main": [
          [
            {
              "node": "Question and Answer Chain",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking 'Test Workflow' button": {
        "main": [
          [
            {
              "node": "Set Google Drive file URL",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Auto categorize wordpress template",
    "description": "Auto categorize wordpress template: Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.wordpress",
        "name": "Wordpress",
        "parameters": [
          "postId",
          "operation",
          "updateFields"
        ]
      },
      {
        "type": "n8n-nodes-base.wordpress",
        "name": "Get All Wordpress Posts",
        "parameters": [
          "options",
          "operation",
          "returnAll"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "AI Agent",
        "parameters": [
          "text",
          "options",
          "promptType"
        ]
      }
    ],
    "connections": {
      "AI Agent": {
        "main": [
          [
            {
              "node": "Wordpress",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Get All Wordpress Posts": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Get All Wordpress Posts",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Auto-Tag Blog Posts in WordPress with AI",
    "description": "Auto-Tag Blog Posts in WordPress with AI: Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
        "name": "Auto-fixing Output Parser",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model1",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser",
        "parameters": [
          "jsonSchemaExample"
        ]
      },
      {
        "type": "n8n-nodes-base.rssFeedReadTrigger",
        "name": "RSS Feed Trigger",
        "parameters": [
          "pollTimes"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Return article details",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split Out",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.splitInBatches",
        "name": "Loop over articles",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "SET initial record",
        "parameters": [
          "options",
          "includeOtherFields"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "GET WP tags",
        "parameters": [
          "url",
          "options",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "POST WP tags",
        "parameters": [
          "url",
          "method",
          "options",
          "sendQuery",
          "authentication",
          "queryParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "GET updated WP tags",
        "parameters": [
          "url",
          "options",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.filter",
        "name": "Keep matches",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Combine tag_ids",
        "parameters": [
          "options",
          "fieldsToAggregate"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Combine slugs",
        "parameters": [
          "options",
          "fieldsToAggregate"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "If",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "MOCK article",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Return missing tags",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.wordpress",
        "name": "Wordpress",
        "parameters": [
          "title",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.executeWorkflowTrigger",
        "name": "Demo Usage in Another Workflow",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.executeWorkflow",
        "name": "Auto-Tag Posts in WordPress",
        "parameters": [
          "mode",
          "options",
          "workflowId"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Generate tags for article",
        "parameters": [
          "text",
          "promptType",
          "hasOutputParser"
        ]
      }
    ],
    "connections": {
      "If": {
        "main": [
          [
            {
              "node": "GET updated WP tags",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Split Out",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Out": {
        "main": [
          [
            {
              "node": "POST WP tags",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "GET WP tags": {
        "main": [
          [
            {
              "node": "Combine slugs",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Keep matches": {
        "main": [
          [
            {
              "node": "Combine tag_ids",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "MOCK article": {
        "main": [
          [
            {
              "node": "Auto-Tag Posts in WordPress",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "POST WP tags": {
        "main": [
          [
            {
              "node": "GET updated WP tags",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Combine slugs": {
        "main": [
          [
            {
              "node": "Return missing tags",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Combine tag_ids": {
        "main": [
          [
            {
              "node": "Loop over articles",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "RSS Feed Trigger": {
        "main": [
          [
            {
              "node": "Generate tags for article",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Generate tags for article",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Loop over articles": {
        "main": [
          [],
          [
            {
              "node": "SET initial record",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Auto-fixing Output Parser",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "SET initial record": {
        "main": [
          [
            {
              "node": "GET WP tags",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "GET updated WP tags": {
        "main": [
          [
            {
              "node": "Keep matches",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Return missing tags": {
        "main": [
          [
            {
              "node": "If",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Return article details": {
        "main": [
          [
            {
              "node": "Wordpress",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Auto-fixing Output Parser",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Auto-fixing Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Generate tags for article",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Generate tags for article": {
        "main": [
          [
            {
              "node": "MOCK article",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Auto-Tag Posts in WordPress": {
        "main": [
          [
            {
              "node": "Return article details",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Demo Usage in Another Workflow": {
        "main": [
          [
            {
              "node": "Loop over articles",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": [
      {
        "id": "ijuVOmJpw5mCrzQX",
        "name": "marketing",
        "createdAt": "2025-01-28T16:42:03.029Z",
        "updatedAt": "2025-01-28T16:42:03.029Z"
      }
    ]
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model1",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model2",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.informationExtractor",
        "name": "Extract Voice Characteristics",
        "parameters": [
          "text",
          "options",
          "schemaType",
          "inputSchema"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Blog",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Article",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "Extract Article URLs",
        "parameters": [
          "options",
          "operation",
          "extractionValues"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split Out URLs",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.limit",
        "name": "Latest Articles",
        "parameters": [
          "maxItems"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "Extract Article Content",
        "parameters": [
          "options",
          "operation",
          "extractionValues"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Combine Articles",
        "parameters": [
          "options",
          "fieldsToAggregate"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Article Style & Brand Voice",
        "parameters": [
          "mode",
          "options",
          "combineBy"
        ]
      },
      {
        "type": "n8n-nodes-base.wordpress",
        "name": "Save as Draft",
        "parameters": [
          "title",
          "additionalFields"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Capture Existing Article Structure",
        "parameters": [
          "text",
          "messages",
          "promptType"
        ]
      },
      {
        "type": "n8n-nodes-base.markdown",
        "name": "Markdown",
        "parameters": [
          "html",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.informationExtractor",
        "name": "Content Generation Agent",
        "parameters": [
          "text",
          "options",
          "attributes"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "New Article Instruction",
        "parameters": [
          "options",
          "assignments"
        ]
      }
    ],
    "connections": {
      "Get Blog": {
        "main": [
          [
            {
              "node": "Extract Article URLs",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Markdown": {
        "main": [
          [
            {
              "node": "Combine Articles",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Article": {
        "main": [
          [
            {
              "node": "Extract Article Content",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Out URLs": {
        "main": [
          [
            {
              "node": "Latest Articles",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Latest Articles": {
        "main": [
          [
            {
              "node": "Get Article",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Combine Articles": {
        "main": [
          [
            {
              "node": "Capture Existing Article Structure",
              "type": "main",
              "index": 0
            },
            {
              "node": "Extract Voice Characteristics",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Extract Voice Characteristics",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Content Generation Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model2": {
        "ai_languageModel": [
          [
            {
              "node": "Capture Existing Article Structure",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Extract Article URLs": {
        "main": [
          [
            {
              "node": "Split Out URLs",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Article Content": {
        "main": [
          [
            {
              "node": "Markdown",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "New Article Instruction": {
        "main": [
          [
            {
              "node": "Content Generation Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Content Generation Agent": {
        "main": [
          [
            {
              "node": "Save as Draft",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Article Style & Brand Voice": {
        "main": [
          [
            {
              "node": "New Article Instruction",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Voice Characteristics": {
        "main": [
          [
            {
              "node": "Article Style & Brand Voice",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Get Blog",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Capture Existing Article Structure": {
        "main": [
          [
            {
              "node": "Article Style & Brand Voice",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Automate Content Generator for WordPress with DeepSeek R1",
    "description": "Automate Content Generator for WordPress with DeepSeek R1: Event-driven automation with AI processing outputting to googleSheets",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Get Ideas",
        "parameters": [
          "options",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set your prompt",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.wordpress",
        "name": "Create post on Wordpress",
        "parameters": [
          "title",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Upload image",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "contentType",
          "sendHeaders",
          "authentication",
          "headerParameters",
          "inputDataFieldName",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Set Image",
        "parameters": [
          "url",
          "method",
          "options",
          "sendQuery",
          "authentication",
          "queryParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Update Sheet",
        "parameters": [
          "columns",
          "options",
          "operation",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Generate article with DeepSeek",
        "parameters": [
          "modelId",
          "options",
          "messages"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Generate title with DeepSeek",
        "parameters": [
          "modelId",
          "options",
          "messages"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Generate Image with DALL-E",
        "parameters": [
          "prompt",
          "options",
          "resource"
        ]
      }
    ],
    "connections": {
      "Get Ideas": {
        "main": [
          [
            {
              "node": "Set your prompt",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set Image": {
        "main": [
          [
            {
              "node": "Update Sheet",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Upload image": {
        "main": [
          [
            {
              "node": "Set Image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set your prompt": {
        "main": [
          [
            {
              "node": "Generate article with DeepSeek",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Create post on Wordpress": {
        "main": [
          [
            {
              "node": "Generate Image with DALL-E",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate Image with DALL-E": {
        "main": [
          [
            {
              "node": "Upload image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate title with DeepSeek": {
        "main": [
          [
            {
              "node": "Create post on Wordpress",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate article with DeepSeek": {
        "main": [
          [
            {
              "node": "Generate title with DeepSeek",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Get Ideas",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "[3/3] Anomaly detection tool (crops dataset)",
    "description": "[3/3] Anomaly detection tool (crops dataset): Event-driven automation",
    "nodes": [
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Embed image",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "specifyBody",
          "authentication",
          "genericAuthType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get similarity of medoids",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "specifyBody",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Compare scores",
        "parameters": [
          "language",
          "pythonCode"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Variables for medoids",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Info About Crop Labeled Clusters",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Total Points in Collection",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "specifyBody",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Each Crop Counts",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "specifyBody",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Image URL hardcode",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.executeWorkflowTrigger",
        "name": "Execute Workflow Trigger",
        "parameters": []
      }
    ],
    "connections": {
      "Embed image": {
        "main": [
          [
            {
              "node": "Get similarity of medoids",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Each Crop Counts": {
        "main": [
          [
            {
              "node": "Info About Crop Labeled Clusters",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Image URL hardcode": {
        "main": [
          [
            {
              "node": "Variables for medoids",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Variables for medoids": {
        "main": [
          [
            {
              "node": "Total Points in Collection",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Execute Workflow Trigger": {
        "main": [
          [
            {
              "node": "Image URL hardcode",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get similarity of medoids": {
        "main": [
          [
            {
              "node": "Compare scores",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Total Points in Collection": {
        "main": [
          [
            {
              "node": "Each Crop Counts",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Info About Crop Labeled Clusters": {
        "main": [
          [
            {
              "node": "Embed image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": [
      {
        "id": "spMntyrlE9ydvWFA",
        "name": "anomaly-detection",
        "createdAt": "2024-12-08T22:05:15.945Z",
        "updatedAt": "2024-12-09T12:50:19.287Z"
      }
    ]
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "name": "Text",
        "parameters": [
          "name",
          "source",
          "description",
          "workflowJson",
          "requestOptions"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "name": "URLs",
        "parameters": [
          "name",
          "source",
          "description",
          "workflowJson",
          "requestOptions"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "model",
          "options",
          "requestOptions"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "JSON Parser",
        "parameters": [
          "schemaType",
          "inputSchema",
          "requestOptions"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Map company name and website",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "Execute workflow",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.supabase",
        "name": "Get companies",
        "parameters": [
          "tableId",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Select company name and website",
        "parameters": [
          "include",
          "options",
          "assignments",
          "includeFields",
          "includeOtherFields"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set social media array",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge all data",
        "parameters": [
          "mode",
          "options",
          "combinationMode"
        ]
      },
      {
        "type": "n8n-nodes-base.supabase",
        "name": "Insert new row",
        "parameters": [
          "tableId",
          "dataToSend"
        ]
      },
      {
        "type": "n8n-nodes-base.markdown",
        "name": "Convert HTML to Markdown",
        "parameters": [
          "html",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "Retrieve URLs",
        "parameters": [
          "options",
          "operation",
          "extractionValues"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split out URLs",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.removeDuplicates",
        "name": "Remove duplicated",
        "parameters": [
          "compare",
          "options",
          "fieldsToCompare"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set domain to path",
        "parameters": [
          "include",
          "options",
          "assignments",
          "includeFields",
          "includeOtherFields"
        ]
      },
      {
        "type": "n8n-nodes-base.filter",
        "name": "Filter out invalid URLs",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Aggregate URLs",
        "parameters": [
          "include",
          "options",
          "aggregate",
          "fieldsToInclude"
        ]
      },
      {
        "type": "n8n-nodes-base.filter",
        "name": "Filter out empty hrefs",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set domain (text)",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Add protocool to domain (text)",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get website (text)",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set response (text)",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set domain (URL)",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get website (URL)",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set response (URL)",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Add protocool to domain (URL)",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "Crawl website",
        "parameters": [
          "text",
          "options",
          "promptType",
          "hasOutputParser"
        ]
      }
    ],
    "connections": {
      "Text": {
        "ai_tool": [
          [
            {
              "node": "Crawl website",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "URLs": {
        "ai_tool": [
          [
            {
              "node": "Crawl website",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "JSON Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Crawl website",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Crawl website": {
        "main": [
          [
            {
              "node": "Set social media array",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get companies": {
        "main": [
          [
            {
              "node": "Select company name and website",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Retrieve URLs": {
        "main": [
          [
            {
              "node": "Split out URLs",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Aggregate URLs": {
        "main": [
          [
            {
              "node": "Set response (URL)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge all data": {
        "main": [
          [
            {
              "node": "Insert new row",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split out URLs": {
        "main": [
          [
            {
              "node": "Filter out empty hrefs",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Execute workflow": {
        "main": [
          [
            {
              "node": "Get companies",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set domain (URL)": {
        "main": [
          [
            {
              "node": "Add protocool to domain (URL)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get website (URL)": {
        "main": [
          [
            {
              "node": "Retrieve URLs",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Crawl website",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Remove duplicated": {
        "main": [
          [
            {
              "node": "Set domain to path",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set domain (text)": {
        "main": [
          [
            {
              "node": "Add protocool to domain (text)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get website (text)": {
        "main": [
          [
            {
              "node": "Convert HTML to Markdown",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set domain to path": {
        "main": [
          [
            {
              "node": "Filter out invalid URLs",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Filter out empty hrefs": {
        "main": [
          [
            {
              "node": "Remove duplicated",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set social media array": {
        "main": [
          [
            {
              "node": "Merge all data",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Filter out invalid URLs": {
        "main": [
          [
            {
              "node": "Aggregate URLs",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Convert HTML to Markdown": {
        "main": [
          [
            {
              "node": "Set response (text)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Map company name and website": {
        "main": [
          [
            {
              "node": "Merge all data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Add protocool to domain (URL)": {
        "main": [
          [
            {
              "node": "Get website (URL)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Add protocool to domain (text)": {
        "main": [
          [
            {
              "node": "Get website (text)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Select company name and website": {
        "main": [
          [
            {
              "node": "Crawl website",
              "type": "main",
              "index": 0
            },
            {
              "node": "Map company name and website",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.localFileTrigger",
        "name": "Local File Trigger",
        "parameters": [
          "path",
          "events",
          "options",
          "triggerOn"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "name": "Default Data Loader",
        "parameters": [
          "options",
          "jsonData",
          "jsonMode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
        "name": "Recursive Character Text Splitter",
        "parameters": [
          "options",
          "chunkSize"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsMistralCloud",
        "name": "Embeddings Mistral Cloud",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
        "name": "Mistral Cloud Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
        "name": "Mistral Cloud Chat Model1",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Prep Incoming Doc",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Settings",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge",
        "parameters": [
          "mode"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Get Doc Types",
        "parameters": [
          "mode",
          "options",
          "jsonOutput"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split Out Doc Types",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.splitInBatches",
        "name": "For Each Doc Type...",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserItemList",
        "name": "Item List Output Parser",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
        "name": "Vector Store Retriever",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsMistralCloud",
        "name": "Embeddings Mistral Cloud1",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
        "name": "Qdrant Vector Store1",
        "parameters": [
          "qdrantCollection"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
        "name": "Mistral Cloud Chat Model2",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split Out",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Aggregate",
        "parameters": [
          "options",
          "fieldsToAggregate"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
        "name": "Mistral Cloud Chat Model3",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
        "name": "Discover",
        "parameters": [
          "text",
          "promptType"
        ]
      },
      {
        "type": "n8n-nodes-base.wait",
        "name": "2secs",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Get Generated Documents",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Generate",
        "parameters": [
          "text",
          "messages",
          "promptType"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Prep For AI",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.convertToFile",
        "name": "To Binary",
        "parameters": [
          "options",
          "operation",
          "sourceProperty"
        ]
      },
      {
        "type": "n8n-nodes-base.readWriteFile",
        "name": "Export to Folder",
        "parameters": [
          "options",
          "fileName",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Get FileType",
        "parameters": [
          "rules",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.readWriteFile",
        "name": "Import File",
        "parameters": [
          "options",
          "fileSelector"
        ]
      },
      {
        "type": "n8n-nodes-base.extractFromFile",
        "name": "Extract from PDF",
        "parameters": [
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.extractFromFile",
        "name": "Extract from DOCX",
        "parameters": [
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.extractFromFile",
        "name": "Extract from TEXT",
        "parameters": [
          "options",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainSummarization",
        "name": "Summarization Chain",
        "parameters": [
          "options",
          "chunkSize"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
        "name": "Qdrant Vector Store",
        "parameters": [
          "mode",
          "options",
          "qdrantCollection"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Interview",
        "parameters": [
          "text",
          "messages",
          "promptType",
          "hasOutputParser"
        ]
      }
    ],
    "connections": {
      "2secs": {
        "main": [
          [
            {
              "node": "For Each Doc Type...",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge": {
        "main": [
          [
            {
              "node": "Prep For AI",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Discover": {
        "main": [
          [
            {
              "node": "Aggregate",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate": {
        "main": [
          [
            {
              "node": "2secs",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Settings": {
        "main": [
          [
            {
              "node": "Import File",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Aggregate": {
        "main": [
          [
            {
              "node": "Generate",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Interview": {
        "main": [
          [
            {
              "node": "Split Out",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Out": {
        "main": [
          [
            {
              "node": "Discover",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "To Binary": {
        "main": [
          [
            {
              "node": "Export to Folder",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Import File": {
        "main": [
          [
            {
              "node": "Get FileType",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Prep For AI": {
        "main": [
          [
            {
              "node": "Get Doc Types",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get FileType": {
        "main": [
          [
            {
              "node": "Extract from PDF",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Extract from DOCX",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Extract from TEXT",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Doc Types": {
        "main": [
          [
            {
              "node": "Split Out Doc Types",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract from PDF": {
        "main": [
          [
            {
              "node": "Prep Incoming Doc",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract from DOCX": {
        "main": [
          [
            {
              "node": "Prep Incoming Doc",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract from TEXT": {
        "main": [
          [
            {
              "node": "Prep Incoming Doc",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Prep Incoming Doc": {
        "main": [
          [
            {
              "node": "Qdrant Vector Store",
              "type": "main",
              "index": 0
            },
            {
              "node": "Summarization Chain",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Local File Trigger": {
        "main": [
          [
            {
              "node": "Settings",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Default Data Loader": {
        "ai_document": [
          [
            {
              "node": "Qdrant Vector Store",
              "type": "ai_document",
              "index": 0
            }
          ]
        ]
      },
      "Qdrant Vector Store": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Split Out Doc Types": {
        "main": [
          [
            {
              "node": "For Each Doc Type...",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Summarization Chain": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "For Each Doc Type...": {
        "main": [
          [
            {
              "node": "Get Generated Documents",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Interview",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Qdrant Vector Store1": {
        "ai_vectorStore": [
          [
            {
              "node": "Vector Store Retriever",
              "type": "ai_vectorStore",
              "index": 0
            }
          ]
        ]
      },
      "Vector Store Retriever": {
        "ai_retriever": [
          [
            {
              "node": "Discover",
              "type": "ai_retriever",
              "index": 0
            }
          ]
        ]
      },
      "Get Generated Documents": {
        "main": [
          [
            {
              "node": "To Binary",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Item List Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Interview",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings Mistral Cloud": {
        "ai_embedding": [
          [
            {
              "node": "Qdrant Vector Store",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Mistral Cloud Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Interview",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings Mistral Cloud1": {
        "ai_embedding": [
          [
            {
              "node": "Qdrant Vector Store1",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Mistral Cloud Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Summarization Chain",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Mistral Cloud Chat Model2": {
        "ai_languageModel": [
          [
            {
              "node": "Discover",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Mistral Cloud Chat Model3": {
        "ai_languageModel": [
          [
            {
              "node": "Generate",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Recursive Character Text Splitter": {
        "ai_textSplitter": [
          [
            {
              "node": "Default Data Loader",
              "type": "ai_textSplitter",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.localFileTrigger",
        "name": "Local File Trigger",
        "parameters": [
          "path",
          "events",
          "options",
          "triggerOn"
        ]
      },
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking \"Test workflow\"",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set Variables",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.readWriteFile",
        "name": "Read File",
        "parameters": [
          "options",
          "fileSelector"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsMistralCloud",
        "name": "Embeddings Mistral Cloud",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "name": "Default Data Loader",
        "parameters": [
          "options",
          "jsonData",
          "jsonMode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
        "name": "Recursive Character Text Splitter",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Prepare Embedding Document",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chatTrigger",
        "name": "Chat Trigger",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
        "name": "Question and Answer Chain",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
        "name": "Mistral Cloud Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
        "name": "Vector Store Retriever",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsMistralCloud",
        "name": "Embeddings Mistral Cloud1",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Remap for File_Added Flow",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Search For Existing Point",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "specifyBody",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Has Existing Point?",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Delete Existing Point",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "authentication",
          "bodyParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Search For Existing Point1",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "specifyBody",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Has Existing Point?1",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Delete Existing Point1",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "authentication",
          "bodyParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Handle File Event",
        "parameters": [
          "rules",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
        "name": "Qdrant Vector Store",
        "parameters": [
          "mode",
          "options",
          "qdrantCollection"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
        "name": "Qdrant Vector Store1",
        "parameters": [
          "qdrantCollection"
        ]
      }
    ],
    "connections": {
      "Read File": {
        "main": [
          [
            {
              "node": "Prepare Embedding Document",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Chat Trigger": {
        "main": [
          [
            {
              "node": "Question and Answer Chain",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set Variables": {
        "main": [
          [
            {
              "node": "Handle File Event",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Handle File Event": {
        "main": [
          [
            {
              "node": "Search For Existing Point",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Search For Existing Point1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Read File",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Local File Trigger": {
        "main": [
          [
            {
              "node": "Set Variables",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Default Data Loader": {
        "ai_document": [
          [
            {
              "node": "Qdrant Vector Store",
              "type": "ai_document",
              "index": 0
            }
          ]
        ]
      },
      "Has Existing Point?": {
        "main": [
          [
            {
              "node": "Delete Existing Point1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Has Existing Point?1": {
        "main": [
          [
            {
              "node": "Delete Existing Point",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Qdrant Vector Store1": {
        "ai_vectorStore": [
          [
            {
              "node": "Vector Store Retriever",
              "type": "ai_vectorStore",
              "index": 0
            }
          ]
        ]
      },
      "Delete Existing Point": {
        "main": [
          [
            {
              "node": "Remap for File_Added Flow",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Vector Store Retriever": {
        "ai_retriever": [
          [
            {
              "node": "Question and Answer Chain",
              "type": "ai_retriever",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings Mistral Cloud": {
        "ai_embedding": [
          [
            {
              "node": "Qdrant Vector Store",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Mistral Cloud Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Question and Answer Chain",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings Mistral Cloud1": {
        "ai_embedding": [
          [
            {
              "node": "Qdrant Vector Store1",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Remap for File_Added Flow": {
        "main": [
          [
            {
              "node": "Read File",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Search For Existing Point": {
        "main": [
          [
            {
              "node": "Has Existing Point?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Prepare Embedding Document": {
        "main": [
          [
            {
              "node": "Qdrant Vector Store",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Search For Existing Point1": {
        "main": [
          [
            {
              "node": "Has Existing Point?1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking \"Test workflow\"": {
        "main": [
          [
            {
              "node": "Set Variables",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Recursive Character Text Splitter": {
        "ai_textSplitter": [
          [
            {
              "node": "Default Data Loader",
              "type": "ai_textSplitter",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsMistralCloud",
        "name": "Embeddings Mistral Cloud",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "name": "Default Data Loader",
        "parameters": [
          "options",
          "jsonData",
          "jsonMode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
        "name": "Recursive Character Text Splitter",
        "parameters": [
          "options",
          "chunkSize"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Tax Code Zip File",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.compression",
        "name": "Extract Zip Files",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Files as Items",
        "parameters": [
          "include",
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.extractFromFile",
        "name": "Extract PDF Contents",
        "parameters": [
          "options",
          "operation",
          "binaryPropertyName"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Extract From Chapter",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Map To Sections",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.executeWorkflowTrigger",
        "name": "Execute Workflow Trigger",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Mistral Embeddings",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "authentication",
          "bodyParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Content Chunking @ 50k Chars",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split Out Chunks",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.splitInBatches",
        "name": "For Each Section...",
        "parameters": [
          "options",
          "batchSize"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Sections To List",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.filter",
        "name": "Only Valid Sections",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Use Qdrant Search API1",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "authentication",
          "bodyParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Use Qdrant Scroll API",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "authentication",
          "bodyParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Get Search Response",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
        "name": "Qdrant Vector Store",
        "parameters": [
          "mode",
          "options",
          "qdrantCollection"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "AI Agent",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "name": "Window Buffer Memory",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chatTrigger",
        "name": "When chat message received",
        "parameters": [
          "public",
          "options",
          "initialMessages"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "name": "Window Buffer Memory1",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.wait",
        "name": "1sec",
        "parameters": [
          "amount"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "name": "Ask Tool",
        "parameters": [
          "name",
          "fields",
          "workflowId",
          "description"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "name": "Search Tool",
        "parameters": [
          "name",
          "fields",
          "workflowId",
          "description",
          "jsonSchemaExample",
          "specifyInputSchema"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Switch",
        "parameters": [
          "rules",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Get Ask Response",
        "parameters": [
          "options",
          "assignments"
        ]
      }
    ],
    "connections": {
      "1sec": {
        "main": [
          [
            {
              "node": "For Each Section...",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Switch": {
        "main": [
          [
            {
              "node": "Get Mistral Embeddings",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Use Qdrant Scroll API",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Ask Tool": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Search Tool": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Files as Items": {
        "main": [
          [
            {
              "node": "Extract PDF Contents",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Map To Sections": {
        "main": [
          [
            {
              "node": "Sections To List",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Sections To List": {
        "main": [
          [
            {
              "node": "Only Valid Sections",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Out Chunks": {
        "main": [
          [
            {
              "node": "Qdrant Vector Store",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Zip Files": {
        "main": [
          [
            {
              "node": "Files as Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Default Data Loader": {
        "ai_document": [
          [
            {
              "node": "Qdrant Vector Store",
              "type": "ai_document",
              "index": 0
            }
          ]
        ]
      },
      "For Each Section...": {
        "main": [
          null,
          [
            {
              "node": "Content Chunking @ 50k Chars",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Only Valid Sections": {
        "main": [
          [
            {
              "node": "For Each Section...",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Qdrant Vector Store": {
        "main": [
          [
            {
              "node": "1sec",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract From Chapter": {
        "main": [
          [
            {
              "node": "Map To Sections",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract PDF Contents": {
        "main": [
          [
            {
              "node": "Extract From Chapter",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Window Buffer Memory": {
        "ai_memory": [
          [
            {
              "node": "AI Agent",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "Get Tax Code Zip File": {
        "main": [
          [
            {
              "node": "Extract Zip Files",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Use Qdrant Scroll API": {
        "main": [
          [
            {
              "node": "Get Search Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Window Buffer Memory1": {
        "ai_memory": [
          [
            {
              "node": "When chat message received",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "Get Mistral Embeddings": {
        "main": [
          [
            {
              "node": "Use Qdrant Search API1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Use Qdrant Search API1": {
        "main": [
          [
            {
              "node": "Get Ask Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings Mistral Cloud": {
        "ai_embedding": [
          [
            {
              "node": "Qdrant Vector Store",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Execute Workflow Trigger": {
        "main": [
          [
            {
              "node": "Switch",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When chat message received": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Content Chunking @ 50k Chars": {
        "main": [
          [
            {
              "node": "Split Out Chunks",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Recursive Character Text Splitter": {
        "ai_textSplitter": [
          [
            {
              "node": "Default Data Loader",
              "type": "ai_textSplitter",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Get Tax Code Zip File",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking \"Test workflow\"",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Fetch Source Image",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split Out Results Only",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.filter",
        "name": "Filter Score >= 0.9",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.editImage",
        "name": "Crop Object From Image",
        "parameters": [
          "width",
          "height",
          "options",
          "operation",
          "positionX",
          "positionY"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set Variables",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Use Detr-Resnet-50 Object Classification",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "contentType",
          "authentication",
          "inputDataFieldName",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Upload to Cloudinary",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "sendQuery",
          "contentType",
          "authentication",
          "bodyParameters",
          "genericAuthType",
          "queryParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.elasticsearch",
        "name": "Create Docs In Elasticsearch",
        "parameters": [
          "indexId",
          "options",
          "fieldsUi",
          "operation",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Fetch Source Image Again",
        "parameters": [
          "url",
          "options"
        ]
      }
    ],
    "connections": {
      "Set Variables": {
        "main": [
          [
            {
              "node": "Fetch Source Image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch Source Image": {
        "main": [
          [
            {
              "node": "Use Detr-Resnet-50 Object Classification",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Filter Score >= 0.9": {
        "main": [
          [
            {
              "node": "Fetch Source Image Again",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Upload to Cloudinary": {
        "main": [
          [
            {
              "node": "Create Docs In Elasticsearch",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Crop Object From Image": {
        "main": [
          [
            {
              "node": "Upload to Cloudinary",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Out Results Only": {
        "main": [
          [
            {
              "node": "Filter Score >= 0.9",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch Source Image Again": {
        "main": [
          [
            {
              "node": "Crop Object From Image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking \"Test workflow\"": {
        "main": [
          [
            {
              "node": "Set Variables",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Use Detr-Resnet-50 Object Classification": {
        "main": [
          [
            {
              "node": "Split Out Results Only",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Building RAG Chatbot for Movie Recommendations with Qdrant and Open AI",
    "description": "Building RAG Chatbot for Movie Recommendations with Qdrant and Open AI: Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.github",
        "name": "GitHub",
        "parameters": [
          "owner",
          "filePath",
          "resource",
          "operation",
          "repository",
          "additionalParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.extractFromFile",
        "name": "Extract from File",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "name": "Default Data Loader",
        "parameters": [
          "options",
          "jsonData",
          "jsonMode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
        "name": "Token Splitter",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
        "name": "Qdrant Vector Store",
        "parameters": [
          "mode",
          "options",
          "qdrantCollection"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chatTrigger",
        "name": "When chat message received",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "name": "Call n8n Workflow Tool",
        "parameters": [
          "name",
          "schemaType",
          "workflowId",
          "description",
          "inputSchema",
          "specifyInputSchema"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "name": "Window Buffer Memory",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.executeWorkflowTrigger",
        "name": "Execute Workflow Trigger",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge",
        "parameters": [
          "mode",
          "options",
          "combineBy"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split Out",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split Out1",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge1",
        "parameters": [
          "mode",
          "options",
          "fieldsToMatchString"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Aggregate",
        "parameters": [
          "options",
          "aggregate",
          "destinationFieldName"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "AI Agent",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Embedding Recommendation Request with Open AI",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "sendHeaders",
          "authentication",
          "bodyParameters",
          "headerParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Embedding Anti-Recommendation Request with Open AI",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "sendHeaders",
          "authentication",
          "bodyParameters",
          "headerParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Extracting Embedding",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Extracting Embedding1",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Calling Qdrant Recommendation API",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "specifyBody",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Retrieving Recommended Movies Meta Data",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "specifyBody",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Selecting Fields Relevant for Agent",
        "parameters": [
          "options",
          "assignments"
        ]
      }
    ],
    "connections": {
      "Merge": {
        "main": [
          [
            {
              "node": "Calling Qdrant Recommendation API",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "GitHub": {
        "main": [
          [
            {
              "node": "Extract from File",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge1": {
        "main": [
          [
            {
              "node": "Selecting Fields Relevant for Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Out": {
        "main": [
          [
            {
              "node": "Merge1",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Split Out1": {
        "main": [
          [
            {
              "node": "Merge1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Token Splitter": {
        "ai_textSplitter": [
          [
            {
              "node": "Default Data Loader",
              "type": "ai_textSplitter",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI": {
        "ai_embedding": [
          [
            {
              "node": "Qdrant Vector Store",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Extract from File": {
        "main": [
          [
            {
              "node": "Qdrant Vector Store",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Default Data Loader": {
        "ai_document": [
          [
            {
              "node": "Qdrant Vector Store",
              "type": "ai_document",
              "index": 0
            }
          ]
        ]
      },
      "Extracting Embedding": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Window Buffer Memory": {
        "ai_memory": [
          [
            {
              "node": "AI Agent",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "Extracting Embedding1": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Call n8n Workflow Tool": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Execute Workflow Trigger": {
        "main": [
          [
            {
              "node": "Embedding Recommendation Request with Open AI",
              "type": "main",
              "index": 0
            },
            {
              "node": "Embedding Anti-Recommendation Request with Open AI",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When chat message received": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Calling Qdrant Recommendation API": {
        "main": [
          [
            {
              "node": "Retrieving Recommended Movies Meta Data",
              "type": "main",
              "index": 0
            },
            {
              "node": "Split Out1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "GitHub",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Selecting Fields Relevant for Agent": {
        "main": [
          [
            {
              "node": "Aggregate",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Retrieving Recommended Movies Meta Data": {
        "main": [
          [
            {
              "node": "Split Out",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Embedding Recommendation Request with Open AI": {
        "main": [
          [
            {
              "node": "Extracting Embedding",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Embedding Anti-Recommendation Request with Open AI": {
        "main": [
          [
            {
              "node": "Extracting Embedding1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Chat with GitHub OpenAPI Specification using RAG (Pinecone and OpenAI)",
    "description": "Chat with GitHub OpenAPI Specification using RAG (Pinecone and OpenAI): Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "HTTP Request",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
        "name": "Pinecone Vector Store",
        "parameters": [
          "mode",
          "options",
          "pineconeIndex"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "name": "Default Data Loader",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
        "name": "Recursive Character Text Splitter",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chatTrigger",
        "name": "When chat message received",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "AI Agent",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "name": "Window Buffer Memory",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
        "name": "Vector Store Tool",
        "parameters": [
          "name",
          "description"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model1",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Generate User Query Embedding",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
        "name": "Pinecone Vector Store (Querying)",
        "parameters": [
          "options",
          "pineconeIndex"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Generate Embeddings",
        "parameters": [
          "options"
        ]
      }
    ],
    "connections": {
      "HTTP Request": {
        "main": [
          [
            {
              "node": "Pinecone Vector Store",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Vector Store Tool": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Vector Store Tool",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Default Data Loader": {
        "ai_document": [
          [
            {
              "node": "Pinecone Vector Store",
              "type": "ai_document",
              "index": 0
            }
          ]
        ]
      },
      "Generate Embeddings": {
        "ai_embedding": [
          [
            {
              "node": "Pinecone Vector Store",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Window Buffer Memory": {
        "ai_memory": [
          [
            {
              "node": "AI Agent",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "When chat message received": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate User Query Embedding": {
        "ai_embedding": [
          [
            {
              "node": "Pinecone Vector Store (Querying)",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Pinecone Vector Store (Querying)": {
        "ai_vectorStore": [
          [
            {
              "node": "Vector Store Tool",
              "type": "ai_vectorStore",
              "index": 0
            }
          ]
        ]
      },
      "Recursive Character Text Splitter": {
        "ai_textSplitter": [
          [
            {
              "node": "Default Data Loader",
              "type": "ai_textSplitter",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "HTTP Request",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking \"Execute Workflow\"",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "name": "Default Data Loader",
        "parameters": [
          "options",
          "dataType"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set file URL in Google Drive",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Add in metadata",
        "parameters": [
          "mode",
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.googleDrive",
        "name": "Download file",
        "parameters": [
          "fileId",
          "options",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chatTrigger",
        "name": "Chat Trigger",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Prepare chunks",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI2",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set max chunks to send to model",
        "parameters": [
          "options",
          "assignments",
          "includeOtherFields"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser",
        "parameters": [
          "jsonSchema"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Compose citations",
        "parameters": [
          "options",
          "assignments",
          "includeOtherFields"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Generate response",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Answer the query based on chunks",
        "parameters": [
          "text",
          "promptType",
          "hasOutputParser"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
        "name": "Get top chunks matching query",
        "parameters": [
          "mode",
          "topK",
          "prompt",
          "options",
          "pineconeIndex"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
        "name": "Add to Pinecone vector store",
        "parameters": [
          "mode",
          "options",
          "pineconeIndex"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
        "name": "Recursive Character Text Splitter",
        "parameters": [
          "chunkSize",
          "chunkOverlap"
        ]
      }
    ],
    "connections": {
      "Chat Trigger": {
        "main": [
          [
            {
              "node": "Set max chunks to send to model",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Download file": {
        "main": [
          [
            {
              "node": "Add in metadata",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Prepare chunks": {
        "main": [
          [
            {
              "node": "Answer the query based on chunks",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Add in metadata": {
        "main": [
          [
            {
              "node": "Add to Pinecone vector store",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Compose citations": {
        "main": [
          [
            {
              "node": "Generate response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI": {
        "ai_embedding": [
          [
            {
              "node": "Add to Pinecone vector store",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Answer the query based on chunks",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI2": {
        "ai_embedding": [
          [
            {
              "node": "Get top chunks matching query",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Default Data Loader": {
        "ai_document": [
          [
            {
              "node": "Add to Pinecone vector store",
              "type": "ai_document",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Answer the query based on chunks",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Set file URL in Google Drive": {
        "main": [
          [
            {
              "node": "Download file",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get top chunks matching query": {
        "main": [
          [
            {
              "node": "Prepare chunks",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set max chunks to send to model": {
        "main": [
          [
            {
              "node": "Get top chunks matching query",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Answer the query based on chunks": {
        "main": [
          [
            {
              "node": "Compose citations",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking \"Execute Workflow\"": {
        "main": [
          [
            {
              "node": "Set file URL in Google Drive",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Recursive Character Text Splitter": {
        "ai_textSplitter": [
          [
            {
              "node": "Default Data Loader",
              "type": "ai_textSplitter",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.wait",
        "name": "Wait",
        "parameters": [
          "amount"
        ]
      },
      {
        "type": "n8n-nodes-base.noOp",
        "name": "Connect to your own data source",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.noOp",
        "name": "Get urls from own data source",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Example fields from data source",
        "parameters": [
          "options",
          "assignments",
          "includeOtherFields"
        ]
      },
      {
        "type": "n8n-nodes-base.limit",
        "name": "40 items at a time",
        "parameters": [
          "maxItems"
        ]
      },
      {
        "type": "n8n-nodes-base.splitInBatches",
        "name": "10 at a time",
        "parameters": [
          "options",
          "batchSize"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Markdown data and Links",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split out page URLs",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Retrieve Page Markdown and Links",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "sendHeaders",
          "specifyBody",
          "authentication",
          "genericAuthType",
          "headerParameters"
        ]
      }
    ],
    "connections": {
      "Wait": {
        "main": [
          [
            {
              "node": "10 at a time",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "10 at a time": {
        "main": [
          null,
          [
            {
              "node": "Retrieve Page Markdown and Links",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "40 items at a time": {
        "main": [
          [
            {
              "node": "10 at a time",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split out page URLs": {
        "main": [
          [
            {
              "node": "40 items at a time",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Markdown data and Links": {
        "main": [
          [
            {
              "node": "Connect to your own data source",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get urls from own data source": {
        "main": [
          [
            {
              "node": "Example fields from data source",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Connect to your own data source": {
        "main": [
          [
            {
              "node": "Wait",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Example fields from data source": {
        "main": [
          [
            {
              "node": "Split out page URLs",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Retrieve Page Markdown and Links": {
        "main": [
          [
            {
              "node": "Markdown data and Links",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Get urls from own data source",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Google Analytics: Weekly Report",
    "description": "Google Analytics: Weekly Report: Scheduled automation with AI processing outputting to emailSend",
    "nodes": [
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "Schedule Trigger",
        "parameters": [
          "rule"
        ]
      },
      {
        "type": "n8n-nodes-base.googleAnalytics",
        "name": "Google Analytics Letzte 7 Tage",
        "parameters": [
          "metricsGA4",
          "propertyId",
          "dimensionsGA4",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.emailSend",
        "name": "Send Email",
        "parameters": [
          "html",
          "options",
          "subject",
          "toEmail",
          "fromEmail"
        ]
      },
      {
        "type": "n8n-nodes-base.telegram",
        "name": "Telegram",
        "parameters": [
          "text",
          "chatId",
          "additionalFields"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Processing for Telegram",
        "parameters": [
          "modelId",
          "options",
          "messages"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolCalculator",
        "name": "Calculator",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.googleAnalytics",
        "name": "Google Analytics: Past 7 days of the previous year",
        "parameters": [
          "endDate",
          "dateRange",
          "startDate",
          "metricsGA4",
          "propertyId",
          "dimensionsGA4",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.summarize",
        "name": "Summarize Data",
        "parameters": [
          "options",
          "fieldsToSummarize"
        ]
      },
      {
        "type": "n8n-nodes-base.summarize",
        "name": "Summarize Data1",
        "parameters": [
          "options",
          "fieldsToSummarize"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Calculation same period previous year",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Assign data",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Assign data1",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Processing for email",
        "parameters": [
          "modelId",
          "options",
          "messages"
        ]
      }
    ],
    "connections": {
      "Telegram": {
        "main": [
          []
        ]
      },
      "Calculator": {
        "ai_tool": [
          [
            {
              "node": "Processing for email",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Assign data": {
        "main": [
          [
            {
              "node": "Summarize Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Assign data1": {
        "main": [
          [
            {
              "node": "Summarize Data1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Summarize Data": {
        "main": [
          [
            {
              "node": "Calculation same period previous year",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Summarize Data1": {
        "main": [
          [
            {
              "node": "Processing for email",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Schedule Trigger": {
        "main": [
          [
            {
              "node": "Google Analytics Letzte 7 Tage",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Processing for email": {
        "main": [
          [
            {
              "node": "Send Email",
              "type": "main",
              "index": 0
            },
            {
              "node": "Processing for Telegram",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Processing for Telegram": {
        "main": [
          [
            {
              "node": "Telegram",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Analytics Letzte 7 Tage": {
        "main": [
          [
            {
              "node": "Assign data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Calculation same period previous year": {
        "main": [
          [
            {
              "node": "Google Analytics: Past 7 days of the previous year",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Analytics: Past 7 days of the previous year": {
        "main": [
          [
            {
              "node": "Assign data1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": with AI processing outputting to slack, webhook",
    "nodes": [
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "name": "Google Gemini Chat Model",
        "parameters": [
          "options",
          "modelName"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "name": "Window Buffer Memory",
        "parameters": [
          "sessionKey",
          "sessionIdType",
          "contextWindowLength"
        ]
      },
      {
        "type": "n8n-nodes-base.slack",
        "name": "Send response back to slack channel",
        "parameters": [
          "text",
          "select",
          "channelId",
          "otherOptions"
        ]
      },
      {
        "type": "n8n-nodes-base.webhook",
        "name": "Webhook to receive message",
        "parameters": [
          "path",
          "options",
          "httpMethod"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "Agent",
        "parameters": [
          "text",
          "options"
        ]
      }
    ],
    "connections": {
      "Agent": {
        "main": [
          [
            {
              "node": "Send response back to slack channel",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Window Buffer Memory": {
        "ai_memory": [
          [
            {
              "node": "Agent",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "Google Gemini Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Webhook to receive message": {
        "main": [
          [
            {
              "node": "Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing outputting to googleSheets",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Zip Entries",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "Extract Reviews",
        "parameters": [
          "options",
          "operation",
          "extractionValues"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Reviews to List",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "name": "Default Data Loader",
        "parameters": [
          "options",
          "jsonData",
          "jsonMode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
        "name": "Recursive Character Text Splitter",
        "parameters": [
          "options",
          "chunkSize"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set Variables",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Payload of Points",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "specifyBody",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Clusters To List",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.filter",
        "name": "Only Clusters With 3+ points",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set Variables1",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Find Reviews",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "specifyBody",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Prep Output For Export",
        "parameters": [
          "mode",
          "options",
          "jsonOutput"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Export To Sheets",
        "parameters": [
          "columns",
          "options",
          "operation",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Clear Existing Reviews",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "specifyBody",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.executeWorkflow",
        "name": "Trigger Insights",
        "parameters": [
          "options",
          "workflowId"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Prep Values For Trigger",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.executeWorkflowTrigger",
        "name": "Execute Workflow Trigger",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get TrustPilot Page",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
        "name": "Qdrant Vector Store",
        "parameters": [
          "mode",
          "options",
          "qdrantCollection"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Apply K-means Clustering Algorithm",
        "parameters": [
          "language",
          "pythonCode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.informationExtractor",
        "name": "Customer Insights Agent",
        "parameters": [
          "text",
          "options",
          "schemaType",
          "jsonSchemaExample"
        ]
      }
    ],
    "connections": {
      "Zip Entries": {
        "main": [
          [
            {
              "node": "Reviews to List",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Find Reviews": {
        "main": [
          [
            {
              "node": "Apply K-means Clustering Algorithm",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set Variables": {
        "main": [
          [
            {
              "node": "Clear Existing Reviews",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set Variables1": {
        "main": [
          [
            {
              "node": "Find Reviews",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Reviews": {
        "main": [
          [
            {
              "node": "Zip Entries",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Reviews to List": {
        "main": [
          [
            {
              "node": "Qdrant Vector Store",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Clusters To List": {
        "main": [
          [
            {
              "node": "Only Clusters With 3+ points",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI": {
        "ai_embedding": [
          [
            {
              "node": "Qdrant Vector Store",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Customer Insights Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Default Data Loader": {
        "ai_document": [
          [
            {
              "node": "Qdrant Vector Store",
              "type": "ai_document",
              "index": 0
            }
          ]
        ]
      },
      "Get TrustPilot Page": {
        "main": [
          [
            {
              "node": "Extract Reviews",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Qdrant Vector Store": {
        "main": [
          [
            {
              "node": "Prep Values For Trigger",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Payload of Points": {
        "main": [
          [
            {
              "node": "Customer Insights Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Clear Existing Reviews": {
        "main": [
          [
            {
              "node": "Get TrustPilot Page",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Prep Output For Export": {
        "main": [
          [
            {
              "node": "Export To Sheets",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Customer Insights Agent": {
        "main": [
          [
            {
              "node": "Prep Output For Export",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Prep Values For Trigger": {
        "main": [
          [
            {
              "node": "Trigger Insights",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Execute Workflow Trigger": {
        "main": [
          [
            {
              "node": "Set Variables1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Only Clusters With 3+ points": {
        "main": [
          [
            {
              "node": "Get Payload of Points",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Recursive Character Text Splitter": {
        "ai_textSplitter": [
          [
            {
              "node": "Default Data Loader",
              "type": "ai_textSplitter",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Set Variables",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Apply K-means Clustering Algorithm": {
        "main": [
          [
            {
              "node": "Clusters To List",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Scheduled automation with AI processing outputting to slack",
    "nodes": [
      {
        "type": "n8n-nodes-base.slack",
        "name": "Slack",
        "parameters": [
          "limit",
          "query",
          "options",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser",
        "parameters": [
          "jsonSchema"
        ]
      },
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "Schedule Trigger",
        "parameters": [
          "rule"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Get Values",
        "parameters": [
          "mode",
          "options",
          "jsonOutput"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Create New Ticket?",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.linear",
        "name": "Get Existing Issues",
        "parameters": [
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Generate Ticket Using ChatGPT",
        "parameters": [
          "text",
          "promptType",
          "hasOutputParser"
        ]
      },
      {
        "type": "n8n-nodes-base.linear",
        "name": "Create Ticket",
        "parameters": [
          "title",
          "teamId",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge",
        "parameters": [
          "mode",
          "options",
          "combinationMode"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Get Hashes Only",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Collect Descriptions",
        "parameters": [
          "options",
          "fieldsToAggregate"
        ]
      }
    ],
    "connections": {
      "Merge": {
        "main": [
          [
            {
              "node": "Create New Ticket?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Slack": {
        "main": [
          [
            {
              "node": "Get Values",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Values": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            },
            {
              "node": "Get Existing Issues",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Hashes Only": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Schedule Trigger": {
        "main": [
          [
            {
              "node": "Slack",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Generate Ticket Using ChatGPT",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Create New Ticket?": {
        "main": [
          [
            {
              "node": "Generate Ticket Using ChatGPT",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Existing Issues": {
        "main": [
          [
            {
              "node": "Collect Descriptions",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Collect Descriptions": {
        "main": [
          [
            {
              "node": "Get Hashes Only",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Generate Ticket Using ChatGPT",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Generate Ticket Using ChatGPT": {
        "main": [
          [
            {
              "node": "Create Ticket",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser",
        "parameters": [
          "jsonSchemaExample"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Should Proceed To Stage 2?",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.googleDrive",
        "name": "Download Resume",
        "parameters": [
          "fileId",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "PDF-to-Image API",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "contentType",
          "bodyParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.editImage",
        "name": "Resize Converted Image",
        "parameters": [
          "width",
          "height",
          "options",
          "operation",
          "resizeOption"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "name": "Google Gemini Chat Model",
        "parameters": [
          "options",
          "modelName"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Candidate Resume Analyser",
        "parameters": [
          "text",
          "messages",
          "promptType",
          "hasOutputParser"
        ]
      }
    ],
    "connections": {
      "Download Resume": {
        "main": [
          [
            {
              "node": "PDF-to-Image API",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "PDF-to-Image API": {
        "main": [
          [
            {
              "node": "Resize Converted Image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Resize Converted Image": {
        "main": [
          [
            {
              "node": "Candidate Resume Analyser",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Gemini Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Candidate Resume Analyser",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Candidate Resume Analyser",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Candidate Resume Analyser": {
        "main": [
          [
            {
              "node": "Should Proceed To Stage 2?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Download Resume",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Scheduled automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Grants to List",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Grant Details",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "contentType",
          "bodyParameters"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.informationExtractor",
        "name": "Summarize Synopsis",
        "parameters": [
          "text",
          "options",
          "schemaType",
          "inputSchema"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.informationExtractor",
        "name": "Eligibility Factors",
        "parameters": [
          "text",
          "options",
          "schemaType",
          "inputSchema"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model1",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge",
        "parameters": [
          "mode",
          "options",
          "combineBy"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Save to Tracker",
        "parameters": [
          "base",
          "table",
          "columns",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.removeDuplicates",
        "name": "Only New Grants",
        "parameters": [
          "options",
          "operation",
          "dedupeValue"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "AI Grants since Yesterday",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "specifyBody"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Get New Eligible Grants Today",
        "parameters": [
          "base",
          "table",
          "options",
          "operation",
          "filterByFormula"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "Generate Email",
        "parameters": [
          "html"
        ]
      },
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "Everyday @ 9am",
        "parameters": [
          "rule"
        ]
      },
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "Everyday @ 8.30am",
        "parameters": [
          "rule"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Get Subscribers",
        "parameters": [
          "base",
          "table",
          "options",
          "operation",
          "filterByFormula"
        ]
      },
      {
        "type": "n8n-nodes-base.gmail",
        "name": "Send Subscriber Email",
        "parameters": [
          "sendTo",
          "message",
          "options",
          "subject"
        ]
      }
    ],
    "connections": {
      "Merge": {
        "main": [
          [
            {
              "node": "Save to Tracker",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Everyday @ 9am": {
        "main": [
          [
            {
              "node": "Get New Eligible Grants Today",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate Email": {
        "main": [
          [
            {
              "node": "Get Subscribers",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Grants to List": {
        "main": [
          [
            {
              "node": "Only New Grants",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Subscribers": {
        "main": [
          [
            {
              "node": "Send Subscriber Email",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Only New Grants": {
        "main": [
          [
            {
              "node": "Get Grant Details",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Save to Tracker": {
        "main": [
          []
        ]
      },
      "Everyday @ 8.30am": {
        "main": [
          [
            {
              "node": "AI Grants since Yesterday",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Grant Details": {
        "main": [
          [
            {
              "node": "Summarize Synopsis",
              "type": "main",
              "index": 0
            },
            {
              "node": "Eligibility Factors",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Summarize Synopsis",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Eligibility Factors",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Summarize Synopsis": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Eligibility Factors": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "AI Grants since Yesterday": {
        "main": [
          [
            {
              "node": "Grants to List",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get New Eligible Grants Today": {
        "main": [
          [
            {
              "node": "Generate Email",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": outputting to respondToWebhook, webhook",
    "nodes": [
      {
        "type": "n8n-nodes-base.set",
        "name": "Parse Webhook",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.executeWorkflow",
        "name": "Qualys Create Report",
        "parameters": [
          "options",
          "workflowId"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Required Report Variables",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.executeWorkflow",
        "name": "Qualys Start Vulnerability Scan",
        "parameters": [
          "options",
          "workflowId"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Scan Report Task Modal",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "jsonQuery",
          "sendQuery",
          "specifyBody",
          "specifyQuery",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Vuln Scan Modal",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "jsonQuery",
          "sendQuery",
          "specifyBody",
          "specifyQuery",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Route Message",
        "parameters": [
          "rules",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Required Scan Variables",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Route Submission",
        "parameters": [
          "rules",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.respondToWebhook",
        "name": "Close Modal Popup",
        "parameters": [
          "options",
          "respondWith"
        ]
      },
      {
        "type": "n8n-nodes-base.webhook",
        "name": "Webhook",
        "parameters": [
          "path",
          "options",
          "httpMethod",
          "responseMode"
        ]
      },
      {
        "type": "n8n-nodes-base.respondToWebhook",
        "name": "Respond to Slack Webhook - Vulnerability",
        "parameters": [
          "options",
          "respondWith"
        ]
      },
      {
        "type": "n8n-nodes-base.respondToWebhook",
        "name": "Respond to Slack Webhook - Report",
        "parameters": [
          "options",
          "respondWith"
        ]
      }
    ],
    "connections": {
      "Webhook": {
        "main": [
          [
            {
              "node": "Parse Webhook",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Parse Webhook": {
        "main": [
          [
            {
              "node": "Route Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Route Message": {
        "main": [
          [
            {
              "node": "Respond to Slack Webhook - Vulnerability",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Respond to Slack Webhook - Report",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Close Modal Popup",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Route Submission": {
        "main": [
          [
            {
              "node": "Required Scan Variables",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Required Report Variables",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Close Modal Popup": {
        "main": [
          [
            {
              "node": "Route Submission",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Required Scan Variables": {
        "main": [
          [
            {
              "node": "Qualys Start Vulnerability Scan",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Required Report Variables": {
        "main": [
          [
            {
              "node": "Qualys Create Report",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Respond to Slack Webhook - Report": {
        "main": [
          [
            {
              "node": "Scan Report Task Modal",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Respond to Slack Webhook - Vulnerability": {
        "main": [
          [
            {
              "node": "Vuln Scan Modal",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "piepdrive-test",
    "description": "piepdrive-test: Event-driven automation with AI processing outputting to slack",
    "nodes": [
      {
        "type": "n8n-nodes-base.pipedriveTrigger",
        "name": "Pipedrive Trigger - An Organization is created",
        "parameters": [
          "action",
          "object"
        ]
      },
      {
        "type": "n8n-nodes-base.pipedrive",
        "name": "Pipedrive - Create a Note with OpenAI output",
        "parameters": [
          "content",
          "resource",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Code - Markdown to Slack Markdown",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Scrapingbee - Get Organization's URL content",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "queryParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.markdown",
        "name": "HTML To Markdown",
        "parameters": [
          "html",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.slack",
        "name": "Slack - Notify ",
        "parameters": [
          "text",
          "select",
          "channelId",
          "otherOptions",
          "authentication"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "OpenAI - Message GPT-4o with Scraped Data",
        "parameters": [
          "modelId",
          "options",
          "messages"
        ]
      }
    ],
    "connections": {
      "HTML To Markdown": {
        "main": [
          [
            {
              "node": "Code - Markdown to Slack Markdown",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Code - Markdown to Slack Markdown": {
        "main": [
          [
            {
              "node": "Slack - Notify ",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI - Message GPT-4o with Scraped Data": {
        "main": [
          [
            {
              "node": "Pipedrive - Create a Note with OpenAI output",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Pipedrive - Create a Note with OpenAI output": {
        "main": [
          [
            {
              "node": "HTML To Markdown",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Scrapingbee - Get Organization's URL content": {
        "main": [
          [
            {
              "node": "OpenAI - Message GPT-4o with Scraped Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Pipedrive Trigger - An Organization is created": {
        "main": [
          [
            {
              "node": "Scrapingbee - Get Organization's URL content",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking \"Test workflow\"",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model1",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Get Applicable Rows",
        "parameters": [
          "base",
          "table",
          "options",
          "operation",
          "returnAll",
          "filterByFormula"
        ]
      },
      {
        "type": "n8n-nodes-base.executeWorkflowTrigger",
        "name": "Execute Workflow Trigger",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Edit Fields",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Fallback Response",
        "parameters": [
          "mode",
          "options",
          "jsonOutput"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "SERP Google Reverse Image API",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "authentication",
          "queryParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Reverse Image Search Response",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "name": "Reverse Image Search Tool",
        "parameters": [
          "name",
          "fields",
          "workflowId",
          "description"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Firecrawl Scrape API",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "sendHeaders",
          "authentication",
          "bodyParameters",
          "genericAuthType",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Scrape Success?",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Firecrawl Scrape Success Response",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Firecrawl scrape Error Response",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "name": "Firecrawl Web Scaper Tool",
        "parameters": [
          "name",
          "fields",
          "workflowId",
          "description"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser",
        "parameters": [
          "jsonSchema"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Enrich Product Rows",
        "parameters": [
          "base",
          "table",
          "columns",
          "options",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Analyse Image",
        "parameters": [
          "text",
          "options",
          "resource",
          "imageUrls",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "Object Identifier Agent",
        "parameters": [
          "text",
          "agent",
          "options",
          "promptType",
          "hasOutputParser"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Actions Router",
        "parameters": [
          "rules",
          "options"
        ]
      }
    ],
    "connections": {
      "Edit Fields": {
        "main": [
          [
            {
              "node": "Actions Router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Analyse Image": {
        "main": [
          [
            {
              "node": "Object Identifier Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Actions Router": {
        "main": [
          [
            {
              "node": "SERP Google Reverse Image API",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Firecrawl Scrape API",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Fallback Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Scrape Success?": {
        "main": [
          [
            {
              "node": "Firecrawl Scrape Success Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Firecrawl scrape Error Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Object Identifier Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Get Applicable Rows": {
        "main": [
          [
            {
              "node": "Analyse Image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Firecrawl Scrape API": {
        "main": [
          [
            {
              "node": "Scrape Success?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Object Identifier Agent": {
        "main": [
          [
            {
              "node": "Enrich Product Rows",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Execute Workflow Trigger": {
        "main": [
          [
            {
              "node": "Edit Fields",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Object Identifier Agent",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Firecrawl Web Scaper Tool": {
        "ai_tool": [
          [
            {
              "node": "Object Identifier Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Reverse Image Search Tool": {
        "ai_tool": [
          [
            {
              "node": "Object Identifier Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "SERP Google Reverse Image API": {
        "main": [
          [
            {
              "node": "Reverse Image Search Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking \"Test workflow\"": {
        "main": [
          [
            {
              "node": "Get Applicable Rows",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "ETL pipeline",
    "description": "ETL pipeline: outputting to slack",
    "nodes": [
      {
        "type": "n8n-nodes-base.twitter",
        "name": "Twitter",
        "parameters": [
          "limit",
          "operation",
          "searchText",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.postgres",
        "name": "Postgres",
        "parameters": [
          "table",
          "columns",
          "returnFields"
        ]
      },
      {
        "type": "n8n-nodes-base.mongoDb",
        "name": "MongoDB",
        "parameters": [
          "fields",
          "options",
          "operation",
          "collection"
        ]
      },
      {
        "type": "n8n-nodes-base.slack",
        "name": "Slack",
        "parameters": [
          "text",
          "channel",
          "attachments",
          "otherOptions"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "IF",
        "parameters": [
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.noOp",
        "name": "NoOp",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.googleCloudNaturalLanguage",
        "name": "Google Cloud Natural Language",
        "parameters": [
          "content",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set",
        "parameters": [
          "values",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.cron",
        "name": "Cron",
        "parameters": [
          "triggerTimes"
        ]
      }
    ],
    "connections": {
      "IF": {
        "main": [
          [
            {
              "node": "Slack",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "NoOp",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set": {
        "main": [
          [
            {
              "node": "Postgres",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Cron": {
        "main": [
          [
            {
              "node": "Twitter",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "MongoDB": {
        "main": [
          [
            {
              "node": "Google Cloud Natural Language",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Twitter": {
        "main": [
          [
            {
              "node": "MongoDB",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Postgres": {
        "main": [
          [
            {
              "node": "IF",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Cloud Natural Language": {
        "main": [
          [
            {
              "node": "Set",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking 'Test workflow'",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.extractFromFile",
        "name": "Extract from File",
        "parameters": [
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.googleDrive",
        "name": "Google Drive",
        "parameters": [
          "fileId",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Call Gemini 2.0 Flash with PDF Capabilities",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "specifyBody",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Call Claude 3.5 Sonnet with PDF Capabilities",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "sendHeaders",
          "specifyBody",
          "authentication",
          "headerParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Define Prompt",
        "parameters": [
          "options",
          "assignments"
        ]
      }
    ],
    "connections": {
      "Google Drive": {
        "main": [
          [
            {
              "node": "Extract from File",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Define Prompt": {
        "main": [
          [
            {
              "node": "Google Drive",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract from File": {
        "main": [
          [
            {
              "node": "Call Claude 3.5 Sonnet with PDF Capabilities",
              "type": "main",
              "index": 0
            },
            {
              "node": "Call Gemini 2.0 Flash with PDF Capabilities",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking 'Test workflow'": {
        "main": [
          [
            {
              "node": "Define Prompt",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Convert education to HTML",
        "parameters": [
          "mode",
          "jsCode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
        "name": "Auto-fixing Output Parser",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model1",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser",
        "parameters": [
          "jsonSchema"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Convert employment history to HTML",
        "parameters": [
          "mode",
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Convert projects to HTML",
        "parameters": [
          "mode",
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Convert volunteering to HTML",
        "parameters": [
          "mode",
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.telegramTrigger",
        "name": "Telegram trigger",
        "parameters": [
          "updates",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Auth",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.noOp",
        "name": "No operation (unauthorized)",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Check if start message",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.noOp",
        "name": "No operation (start message)",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.telegram",
        "name": "Get file",
        "parameters": [
          "fileId",
          "resource"
        ]
      },
      {
        "type": "n8n-nodes-base.extractFromFile",
        "name": "Extract text from PDF",
        "parameters": [
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set parsed fileds",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Personal info",
        "parameters": [
          "fields",
          "include",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Technologies",
        "parameters": [
          "fields",
          "include",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Employment history",
        "parameters": [
          "fields",
          "include",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Education",
        "parameters": [
          "fields",
          "include",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Projects",
        "parameters": [
          "fields",
          "include",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Volunteering",
        "parameters": [
          "fields",
          "include",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge education and employment history",
        "parameters": [
          "mode",
          "options",
          "combinationMode"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge projects and volunteering",
        "parameters": [
          "mode",
          "options",
          "combinationMode"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge personal info and technologies",
        "parameters": [
          "mode",
          "options",
          "combinationMode"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge all",
        "parameters": [
          "mode",
          "options",
          "combinationMode"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set final data",
        "parameters": [
          "fields",
          "include",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Convert raw to base64",
        "parameters": [
          "mode",
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.convertToFile",
        "name": "Convert to HTML",
        "parameters": [
          "options",
          "operation",
          "sourceProperty"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Generate plain PDF doc",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "contentType",
          "bodyParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.telegram",
        "name": "Send PDF to the user",
        "parameters": [
          "chatId",
          "operation",
          "binaryData",
          "additionalFields"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Parse resume data",
        "parameters": [
          "prompt",
          "messages"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge other data",
        "parameters": [
          "mode",
          "options",
          "combinationMode"
        ]
      }
    ],
    "connections": {
      "Auth": {
        "main": [
          [
            {
              "node": "Check if start message",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "No operation (unauthorized)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get file": {
        "main": [
          [
            {
              "node": "Extract text from PDF",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Projects": {
        "main": [
          [
            {
              "node": "Merge projects and volunteering",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Education": {
        "main": [
          [
            {
              "node": "Merge education and employment history",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Merge all": {
        "main": [
          [
            {
              "node": "Set final data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Technologies": {
        "main": [
          [
            {
              "node": "Merge personal info and technologies",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Volunteering": {
        "main": [
          [
            {
              "node": "Merge projects and volunteering",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Personal info": {
        "main": [
          [
            {
              "node": "Merge personal info and technologies",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set final data": {
        "main": [
          [
            {
              "node": "Convert raw to base64",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Convert to HTML": {
        "main": [
          [
            {
              "node": "Generate plain PDF doc",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge other data": {
        "main": [
          [
            {
              "node": "Merge all",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Telegram trigger": {
        "main": [
          [
            {
              "node": "Auth",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Parse resume data",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Parse resume data": {
        "main": [
          [
            {
              "node": "Set parsed fileds",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set parsed fileds": {
        "main": [
          [
            {
              "node": "Convert employment history to HTML",
              "type": "main",
              "index": 0
            },
            {
              "node": "Convert education to HTML",
              "type": "main",
              "index": 0
            },
            {
              "node": "Convert projects to HTML",
              "type": "main",
              "index": 0
            },
            {
              "node": "Personal info",
              "type": "main",
              "index": 0
            },
            {
              "node": "Convert volunteering to HTML",
              "type": "main",
              "index": 0
            },
            {
              "node": "Technologies",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Employment history": {
        "main": [
          [
            {
              "node": "Merge education and employment history",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Auto-fixing Output Parser",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Convert raw to base64": {
        "main": [
          [
            {
              "node": "Convert to HTML",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract text from PDF": {
        "main": [
          [
            {
              "node": "Parse resume data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check if start message": {
        "main": [
          [
            {
              "node": "Get file",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "No operation (start message)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate plain PDF doc": {
        "main": [
          [
            {
              "node": "Send PDF to the user",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Convert projects to HTML": {
        "main": [
          [
            {
              "node": "Projects",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Auto-fixing Output Parser",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Auto-fixing Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Parse resume data",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Convert education to HTML": {
        "main": [
          [
            {
              "node": "Education",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Convert volunteering to HTML": {
        "main": [
          [
            {
              "node": "Volunteering",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge projects and volunteering": {
        "main": [
          [
            {
              "node": "Merge other data",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Convert employment history to HTML": {
        "main": [
          [
            {
              "node": "Employment history",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge personal info and technologies": {
        "main": [
          [
            {
              "node": "Merge all",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge education and employment history": {
        "main": [
          [
            {
              "node": "Merge other data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "name": "get_channel_details",
        "parameters": [
          "name",
          "fields",
          "schemaType",
          "workflowId",
          "description",
          "inputSchema",
          "specifyInputSchema"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "name": "get_video_description",
        "parameters": [
          "name",
          "fields",
          "schemaType",
          "workflowId",
          "description",
          "inputSchema",
          "specifyInputSchema"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "name": "get_list_of_videos",
        "parameters": [
          "name",
          "fields",
          "schemaType",
          "workflowId",
          "description",
          "inputSchema",
          "specifyInputSchema"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "name": "get_list_of_comments",
        "parameters": [
          "name",
          "fields",
          "schemaType",
          "workflowId",
          "description",
          "inputSchema",
          "specifyInputSchema"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "name": "search",
        "parameters": [
          "name",
          "fields",
          "schemaType",
          "workflowId",
          "description",
          "inputSchema",
          "specifyInputSchema"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "name": "analyze_thumbnail",
        "parameters": [
          "name",
          "fields",
          "schemaType",
          "workflowId",
          "description",
          "inputSchema",
          "specifyInputSchema"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "name": "video_transcription",
        "parameters": [
          "name",
          "fields",
          "schemaType",
          "workflowId",
          "description",
          "inputSchema",
          "specifyInputSchema"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
        "name": "Postgres Chat Memory",
        "parameters": [
          "sessionKey",
          "sessionIdType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "AI Agent",
        "parameters": [
          "text",
          "agent",
          "options",
          "promptType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chatTrigger",
        "name": "When chat message received",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Comments",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "authentication",
          "genericAuthType",
          "queryParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.executeWorkflowTrigger",
        "name": "Execute Workflow Trigger",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Channel Details",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "authentication",
          "genericAuthType",
          "queryParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Video Description",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "authentication",
          "genericAuthType",
          "queryParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Edit Fields",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Run Query",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "authentication",
          "genericAuthType",
          "queryParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Videos by Channel",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "authentication",
          "genericAuthType",
          "queryParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Response",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Switch",
        "parameters": [
          "rules",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Video Transcription",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "specifyBody",
          "authentication",
          "genericAuthType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "OpenAI",
        "parameters": [
          "text",
          "modelId",
          "options",
          "resource",
          "imageUrls",
          "operation"
        ]
      }
    ],
    "connections": {
      "OpenAI": {
        "main": [
          [
            {
              "node": "Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Switch": {
        "main": [
          [
            {
              "node": "Get Channel Details",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Get Video Description",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Get Comments",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Run Query",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Get Videos by Channel",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "OpenAI",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Get Video Transcription",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "search": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Run Query": {
        "main": [
          [
            {
              "node": "Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Edit Fields": {
        "main": [
          [
            {
              "node": "Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Comments": {
        "main": [
          [
            {
              "node": "Edit Fields",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "analyze_thumbnail": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "get_list_of_videos": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Get Channel Details": {
        "main": [
          [
            {
              "node": "Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "get_channel_details": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "video_transcription": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Postgres Chat Memory": {
        "ai_memory": [
          [
            {
              "node": "AI Agent",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "get_list_of_comments": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Get Video Description": {
        "main": [
          [
            {
              "node": "Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Videos by Channel": {
        "main": [
          [
            {
              "node": "Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "get_video_description": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Get Video Transcription": {
        "main": [
          [
            {
              "node": "Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Execute Workflow Trigger": {
        "main": [
          [
            {
              "node": "Switch",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When chat message received": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Image to license plate number",
    "description": "Image to license plate number: Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Basic LLM Chain",
        "parameters": [
          "text",
          "messages",
          "promptType"
        ]
      },
      {
        "type": "n8n-nodes-base.form",
        "name": "FormResultPage",
        "parameters": [
          "options",
          "operation",
          "completionTitle",
          "completionMessage"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
        "name": "OpenRouter LLM",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Settings",
        "parameters": [
          "options",
          "assignments",
          "includeOtherFields"
        ]
      },
      {
        "type": "n8n-nodes-base.formTrigger",
        "name": "FromTrigger",
        "parameters": [
          "options",
          "formTitle",
          "formFields",
          "responseMode",
          "formDescription"
        ]
      }
    ],
    "connections": {
      "Settings": {
        "main": [
          [
            {
              "node": "Basic LLM Chain",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "FromTrigger": {
        "main": [
          [
            {
              "node": "Settings",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenRouter LLM": {
        "ai_languageModel": [
          [
            {
              "node": "Basic LLM Chain",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Basic LLM Chain": {
        "main": [
          [
            {
              "node": "FormResultPage",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Extract text from PDF and image using Vertex AI (Gemini) into CSV",
    "description": "Extract text from PDF and image using Vertex AI (Gemini) into CSV: Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "name": "Google Gemini Chat Model",
        "parameters": [
          "options",
          "modelName"
        ]
      },
      {
        "type": "n8n-nodes-base.googleDriveTrigger",
        "name": "Get PDF or Images",
        "parameters": [
          "event",
          "options",
          "pollTimes",
          "triggerOn",
          "folderToWatch",
          "authentication"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Route based on PDF or Image",
        "parameters": [
          "rules",
          "value1",
          "dataType"
        ]
      },
      {
        "type": "n8n-nodes-base.googleDrive",
        "name": "Download PDF",
        "parameters": [
          "fileId",
          "options",
          "operation",
          "authentication"
        ]
      },
      {
        "type": "n8n-nodes-base.googleDrive",
        "name": "Download Image",
        "parameters": [
          "fileId",
          "options",
          "operation",
          "authentication"
        ]
      },
      {
        "type": "n8n-nodes-base.extractFromFile",
        "name": "Extract data from PDF",
        "parameters": [
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Send data to A.I.",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "specifyBody",
          "authentication",
          "genericAuthType"
        ]
      },
      {
        "type": "n8n-nodes-base.convertToFile",
        "name": "Convert to CSV",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.googleDrive",
        "name": "Upload to Google Drive",
        "parameters": [
          "name",
          "driveId",
          "options",
          "folderId",
          "authentication"
        ]
      },
      {
        "type": "n8n-nodes-base.convertToFile",
        "name": "Convert to CSV2",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.googleDrive",
        "name": "Upload to Google Drive1",
        "parameters": [
          "name",
          "driveId",
          "options",
          "folderId",
          "authentication"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Vertex A.I. extract text",
        "parameters": [
          "text",
          "messages",
          "promptType",
          "hasOutputParser"
        ]
      }
    ],
    "connections": {
      "Download PDF": {
        "main": [
          [
            {
              "node": "Extract data from PDF",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Convert to CSV": {
        "main": [
          [
            {
              "node": "Upload to Google Drive",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Download Image": {
        "main": [
          [
            {
              "node": "Vertex A.I. extract text",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Convert to CSV2": {
        "main": [
          [
            {
              "node": "Upload to Google Drive1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get PDF or Images": {
        "main": [
          [
            {
              "node": "Route based on PDF or Image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Send data to A.I.": {
        "main": [
          [
            {
              "node": "Convert to CSV",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract data from PDF": {
        "main": [
          [
            {
              "node": "Send data to A.I.",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Gemini Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Vertex A.I. extract text",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Vertex A.I. extract text": {
        "main": [
          [
            {
              "node": "Convert to CSV2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Route based on PDF or Image": {
        "main": [
          [
            {
              "node": "Download PDF",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Download Image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
        "name": "Anthropic Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split Out",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set Ideal Customer Profile (ICP)",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Aggregate for AI node",
        "parameters": [
          "options",
          "aggregate"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "AI Agent",
        "parameters": [
          "text",
          "agent",
          "options",
          "promptType"
        ]
      },
      {
        "type": "n8n-nodes-base.noOp",
        "name": "Connect to your own database",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      }
    ],
    "connections": {
      "AI Agent": {
        "main": [
          [
            {
              "node": "Split Out",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Out": {
        "main": [
          [
            {
              "node": "Connect to your own database",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Anthropic Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Aggregate for AI node": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set Ideal Customer Profile (ICP)": {
        "main": [
          [
            {
              "node": "Aggregate for AI node",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Set Ideal Customer Profile (ICP)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "HN Who is Hiring Scrape",
    "description": "HN Who is Hiring Scrape: Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split Out",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser",
        "parameters": [
          "schemaType",
          "inputSchema"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Search for Who is hiring posts",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "sendQuery",
          "sendHeaders",
          "specifyBody",
          "authentication",
          "genericAuthType",
          "queryParameters",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Get relevant data",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.filter",
        "name": "Get latest post",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split out children (jobs)",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Trun into structured data",
        "parameters": [
          "text",
          "messages",
          "promptType",
          "hasOutputParser"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Extract text",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Clean text",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.limit",
        "name": "Limit for testing (optional)",
        "parameters": [
          "maxItems"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Write results to airtable",
        "parameters": [
          "base",
          "table",
          "columns",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "HI API: Get the individual job post",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "HN API: Get Main Post",
        "parameters": [
          "url",
          "options"
        ]
      }
    ],
    "connections": {
      "Split Out": {
        "main": [
          [
            {
              "node": "Get relevant data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Clean text": {
        "main": [
          [
            {
              "node": "Limit for testing (optional)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract text": {
        "main": [
          [
            {
              "node": "Clean text",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get latest post": {
        "main": [
          [
            {
              "node": "HN API: Get Main Post",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get relevant data": {
        "main": [
          [
            {
              "node": "Get latest post",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Trun into structured data",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "HN API: Get Main Post": {
        "main": [
          [
            {
              "node": "Split out children (jobs)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Trun into structured data",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Split out children (jobs)": {
        "main": [
          [
            {
              "node": "HI API: Get the individual job post",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Trun into structured data": {
        "main": [
          [
            {
              "node": "Write results to airtable",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Limit for testing (optional)": {
        "main": [
          [
            {
              "node": "Trun into structured data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Search for Who is hiring posts": {
        "main": [
          [
            {
              "node": "Split Out",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Search for Who is hiring posts",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "HI API: Get the individual job post": {
        "main": [
          [
            {
              "node": "Extract text",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Hacker News to Video Template - AlexK1919",
    "description": "Hacker News to Video Template - AlexK1919: Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.hackerNews",
        "name": "Hacker News",
        "parameters": [
          "resource",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.splitInBatches",
        "name": "Loop Over Items",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model3",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
        "name": "HTTP Request1",
        "parameters": [
          "url",
          "toolDescription"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser",
        "parameters": [
          "schemaType",
          "inputSchema"
        ]
      },
      {
        "type": "n8n-nodes-base.s3",
        "name": "Upload to Minio",
        "parameters": [
          "operation",
          "bucketName",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "News1",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Leo - Improve Prompt",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "sendHeaders",
          "specifyBody",
          "authentication",
          "genericAuthType",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Leo - Get imageId",
        "parameters": [
          "url",
          "options",
          "sendHeaders",
          "authentication",
          "genericAuthType",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Runway - Create Video",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "sendHeaders",
          "authentication",
          "bodyParameters",
          "genericAuthType",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Runway - Get Video",
        "parameters": [
          "url",
          "options",
          "sendHeaders",
          "authentication",
          "genericAuthType",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.wait",
        "name": "Wait2",
        "parameters": [
          "unit",
          "amount"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "If Topic",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Image",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Prompt Settings1",
        "parameters": [
          "options",
          "assignments",
          "includeOtherFields"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Leo - Generate Image",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "sendHeaders",
          "specifyBody",
          "authentication",
          "genericAuthType",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.wait",
        "name": "Wait1",
        "parameters": [
          "amount"
        ]
      },
      {
        "type": "n8n-nodes-base.limit",
        "name": "Limit",
        "parameters": [
          "keep",
          "maxItems"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Image Analysis",
        "parameters": [
          "modelId",
          "options",
          "resource",
          "imageUrls",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.wait",
        "name": "Wait3",
        "parameters": [
          "unit"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "Article Analysis",
        "parameters": [
          "text",
          "options",
          "promptType",
          "hasOutputParser"
        ]
      },
      {
        "type": "n8n-nodes-base.dropbox",
        "name": "Dropbox",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.googleDrive",
        "name": "Google Drive",
        "parameters": [
          "fileId",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.microsoftOneDrive",
        "name": "Microsoft OneDrive",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.youTube",
        "name": "YouTube",
        "parameters": [
          "options",
          "resource",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.twitter",
        "name": "X",
        "parameters": [
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Instagram",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.linkedIn",
        "name": "LinkedIn",
        "parameters": [
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Leo - Improve Prompt2",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "sendHeaders",
          "specifyBody",
          "authentication",
          "genericAuthType",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.wait",
        "name": "Wait4",
        "parameters": [
          "unit",
          "amount"
        ]
      },
      {
        "type": "n8n-nodes-base.wait",
        "name": "Wait6",
        "parameters": [
          "amount"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Leo - Generate Image2",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "sendHeaders",
          "specifyBody",
          "authentication",
          "genericAuthType",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Leo - Get imageId2",
        "parameters": [
          "url",
          "options",
          "sendHeaders",
          "authentication",
          "genericAuthType",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Runway - Create Video2",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "sendHeaders",
          "authentication",
          "bodyParameters",
          "genericAuthType",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Runway - Get Video2",
        "parameters": [
          "url",
          "options",
          "sendHeaders",
          "authentication",
          "genericAuthType",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Cre - Generate Video1",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "specifyBody",
          "authentication",
          "genericAuthType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Cre - Get Video",
        "parameters": [
          "url",
          "options",
          "authentication",
          "genericAuthType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Article Prep",
        "parameters": [
          "modelId",
          "options",
          "messages",
          "jsonOutput"
        ]
      }
    ],
    "connections": {
      "X": {
        "main": [
          [
            {
              "node": "LinkedIn",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Limit": {
        "main": [
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "News1": {
        "main": [
          [
            {
              "node": "Prompt Settings1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Wait1": {
        "main": [
          [
            {
              "node": "Leo - Get imageId",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Wait2": {
        "main": [
          [
            {
              "node": "Runway - Get Video",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Wait3": {
        "main": [
          [
            {
              "node": "Cre - Get Video",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Wait4": {
        "main": [
          [
            {
              "node": "Runway - Get Video2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Wait6": {
        "main": [
          [
            {
              "node": "Leo - Get imageId2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Dropbox": {
        "main": [
          [
            {
              "node": "Google Drive",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "YouTube": {
        "main": [
          [
            {
              "node": "X",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "If Topic": {
        "main": [
          [
            {
              "node": "Image Analysis",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "LinkedIn": {
        "main": [
          [
            {
              "node": "Instagram",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Image": {
        "main": [
          [
            {
              "node": "Article Prep",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Hacker News": {
        "main": [
          [
            {
              "node": "Limit",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Article Prep": {
        "main": [
          [
            {
              "node": "News1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Drive": {
        "main": [
          [
            {
              "node": "Microsoft OneDrive",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "HTTP Request1": {
        "ai_tool": [
          [
            {
              "node": "Article Analysis",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Image Analysis": {
        "main": [
          [
            {
              "node": "Get Image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Loop Over Items": {
        "main": [
          [],
          [
            {
              "node": "Article Analysis",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Article Analysis": {
        "main": [
          [
            {
              "node": "If Topic",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Prompt Settings1": {
        "main": [
          [
            {
              "node": "Leo - Improve Prompt",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Leo - Get imageId": {
        "main": [
          [
            {
              "node": "Runway - Create Video",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Leo - Get imageId2": {
        "main": [
          [
            {
              "node": "Runway - Create Video2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Microsoft OneDrive": {
        "main": [
          [
            {
              "node": "Upload to Minio",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model3": {
        "ai_languageModel": [
          [
            {
              "node": "Article Analysis",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Runway - Get Video": {
        "main": [
          [
            {
              "node": "Leo - Improve Prompt2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Runway - Get Video2": {
        "main": [
          [
            {
              "node": "Cre - Generate Video1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Leo - Generate Image": {
        "main": [
          [
            {
              "node": "Wait1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Leo - Improve Prompt": {
        "main": [
          [
            {
              "node": "Leo - Generate Image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Cre - Generate Video1": {
        "main": [
          [
            {
              "node": "Wait3",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Leo - Generate Image2": {
        "main": [
          [
            {
              "node": "Wait6",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Leo - Improve Prompt2": {
        "main": [
          [
            {
              "node": "Leo - Generate Image2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Runway - Create Video": {
        "main": [
          [
            {
              "node": "Wait2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Runway - Create Video2": {
        "main": [
          [
            {
              "node": "Wait4",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Article Analysis",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Hacker News",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": [
      {
        "id": "04PL2irdWYmF2Dg3",
        "name": "RunwayML",
        "createdAt": "2024-11-15T05:55:30.783Z",
        "updatedAt": "2024-11-15T05:55:30.783Z"
      },
      {
        "id": "yrY6updwSCXMsT0z",
        "name": "Video",
        "createdAt": "2024-11-15T05:55:34.333Z",
        "updatedAt": "2024-11-15T05:55:34.333Z"
      },
      {
        "id": "QsH2EXuw2e7YCv0K",
        "name": "OpenAI",
        "createdAt": "2024-11-15T04:05:20.872Z",
        "updatedAt": "2024-11-15T04:05:20.872Z"
      },
      {
        "id": "lvPj9rYRsKOHCi4J",
        "name": "Creatomate",
        "createdAt": "2024-11-19T15:59:16.134Z",
        "updatedAt": "2024-11-19T15:59:16.134Z"
      },
      {
        "id": "9LXACqpQLNtrM6or",
        "name": "Leonardo",
        "createdAt": "2024-11-19T15:59:21.368Z",
        "updatedAt": "2024-11-19T15:59:21.368Z"
      }
    ]
  },
  {
    "name": "Intelligent Web Query and Semantic Re-Ranking Flow",
    "description": "Intelligent Web Query and Semantic Re-Ranking Flow: with AI processing outputting to respondToWebhook, webhook",
    "nodes": [
      {
        "type": "n8n-nodes-base.dateTime",
        "name": "Date & Time",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.webhook",
        "name": "Webhook",
        "parameters": [
          "path",
          "options",
          "responseMode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
        "name": "Auto-fixing Output Parser6",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
        "name": "Auto-fixing Output Parser",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser1",
        "parameters": [
          "jsonSchemaExample"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Query-1 Combined",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.respondToWebhook",
        "name": "Respond to Webhook",
        "parameters": [
          "options",
          "respondWith",
          "responseBody"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Semantic Search - Result Re-Ranker",
        "parameters": [
          "text",
          "messages",
          "promptType",
          "hasOutputParser"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Query",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "sendHeaders",
          "queryParameters",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Webhook Call",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "queryParameters"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Semantic Search -Query Maker",
        "parameters": [
          "text",
          "messages",
          "promptType",
          "hasOutputParser"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
        "name": "Anthropic Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser2",
        "parameters": [
          "jsonSchemaExample"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "name": "Parser Model",
        "parameters": [
          "options",
          "modelName"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "name": "Agent Model",
        "parameters": [
          "options",
          "modelName"
        ]
      }
    ],
    "connections": {
      "Query": {
        "main": [
          [
            {
              "node": "Query-1 Combined",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Webhook": {
        "main": [
          [
            {
              "node": "Date & Time",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Agent Model": {
        "ai_languageModel": [
          [
            {
              "node": "Semantic Search - Result Re-Ranker",
              "type": "ai_languageModel",
              "index": 0
            },
            {
              "node": "Semantic Search -Query Maker",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Date & Time": {
        "main": [
          [
            {
              "node": "Semantic Search -Query Maker",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Parser Model": {
        "ai_languageModel": [
          [
            {
              "node": "Auto-fixing Output Parser6",
              "type": "ai_languageModel",
              "index": 0
            },
            {
              "node": "Auto-fixing Output Parser",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Query-1 Combined": {
        "main": [
          [
            {
              "node": "Semantic Search - Result Re-Ranker",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          []
        ]
      },
      "Anthropic Chat Model": {
        "ai_languageModel": [
          []
        ]
      },
      "Auto-fixing Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Semantic Search -Query Maker",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser1": {
        "ai_outputParser": [
          [
            {
              "node": "Auto-fixing Output Parser",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser2": {
        "ai_outputParser": [
          [
            {
              "node": "Auto-fixing Output Parser6",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Auto-fixing Output Parser6": {
        "ai_outputParser": [
          [
            {
              "node": "Semantic Search - Result Re-Ranker",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Semantic Search -Query Maker": {
        "main": [
          [
            {
              "node": "Query",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Semantic Search - Result Re-Ranker": {
        "main": [
          [
            {
              "node": "Respond to Webhook",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing outputting to googleSheets",
    "nodes": [
      {
        "type": "@n8n/n8n-nodes-langchain.lmOpenAi",
        "name": "OpenAI Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser",
        "parameters": [
          "jsonSchema"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Upload to LlamaParse",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "contentType",
          "sendHeaders",
          "authentication",
          "bodyParameters",
          "genericAuthType",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.gmailTrigger",
        "name": "Receiving Invoices",
        "parameters": [
          "simple",
          "filters",
          "options",
          "pollTimes"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Append to Reconciliation Sheet",
        "parameters": [
          "columns",
          "options",
          "operation",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Processing Status",
        "parameters": [
          "url",
          "options",
          "sendHeaders",
          "authentication",
          "genericAuthType",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.wait",
        "name": "Wait to stay within service limits",
        "parameters": [
          "amount"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Is Job Ready?",
        "parameters": [
          "rules",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.gmail",
        "name": "Add \"invoice synced\" Label",
        "parameters": [
          "labelIds",
          "messageId",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Parsed Invoice Data",
        "parameters": [
          "url",
          "options",
          "authentication",
          "genericAuthType"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Map Output",
        "parameters": [
          "mode",
          "options",
          "jsonOutput"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Apply Data Extraction Rules",
        "parameters": [
          "text",
          "promptType",
          "hasOutputParser"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Should Process Email?",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split Out Labels",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.gmail",
        "name": "Get Labels Names",
        "parameters": [
          "labelId",
          "resource",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Combine Label Names",
        "parameters": [
          "options",
          "fieldsToAggregate"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Email with Label Names",
        "parameters": [
          "mode",
          "options",
          "combinationMode"
        ]
      }
    ],
    "connections": {
      "Map Output": {
        "main": [
          [
            {
              "node": "Append to Reconciliation Sheet",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Model": {
        "ai_languageModel": [
          [
            {
              "node": "Apply Data Extraction Rules",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Is Job Ready?": {
        "main": [
          [
            {
              "node": "Get Parsed Invoice Data",
              "type": "main",
              "index": 0
            }
          ],
          null,
          null,
          [
            {
              "node": "Wait to stay within service limits",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Labels Names": {
        "main": [
          [
            {
              "node": "Combine Label Names",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Out Labels": {
        "main": [
          [
            {
              "node": "Get Labels Names",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Receiving Invoices": {
        "main": [
          [
            {
              "node": "Split Out Labels",
              "type": "main",
              "index": 0
            },
            {
              "node": "Email with Label Names",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Combine Label Names": {
        "main": [
          [
            {
              "node": "Email with Label Names",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Upload to LlamaParse": {
        "main": [
          [
            {
              "node": "Get Processing Status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Processing Status": {
        "main": [
          [
            {
              "node": "Is Job Ready?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Should Process Email?": {
        "main": [
          [
            {
              "node": "Upload to LlamaParse",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Email with Label Names": {
        "main": [
          [
            {
              "node": "Should Process Email?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Parsed Invoice Data": {
        "main": [
          [
            {
              "node": "Apply Data Extraction Rules",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Apply Data Extraction Rules",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Apply Data Extraction Rules": {
        "main": [
          [
            {
              "node": "Map Output",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Append to Reconciliation Sheet": {
        "main": [
          [
            {
              "node": "Add \"invoice synced\" Label",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Wait to stay within service limits": {
        "main": [
          [
            {
              "node": "Get Processing Status",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": with AI processing outputting to respondToWebhook, slack, webhook",
    "nodes": [
      {
        "type": "n8n-nodes-base.respondToWebhook",
        "name": "Verify Webhook",
        "parameters": [
          "options",
          "respondWith",
          "responseBody"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.noOp",
        "name": "No Operation, do nothing",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "name": "Window Buffer Memory",
        "parameters": [
          "sessionKey",
          "sessionIdType",
          "contextWindowLength"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Check if Bot",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.slack",
        "name": "Send Initial Message",
        "parameters": [
          "text",
          "select",
          "channelId",
          "otherOptions"
        ]
      },
      {
        "type": "n8n-nodes-base.slack",
        "name": "Delete Initial Message",
        "parameters": [
          "select",
          "channelId",
          "operation",
          "timestamp"
        ]
      },
      {
        "type": "n8n-nodes-base.slack",
        "name": "Send Message",
        "parameters": [
          "text",
          "select",
          "channelId",
          "otherOptions"
        ]
      },
      {
        "type": "n8n-nodes-base.webhook",
        "name": "Receive DMs",
        "parameters": [
          "path",
          "options",
          "httpMethod",
          "responseMode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "name": "Call Confluence Workflow Tool",
        "parameters": [
          "name",
          "workflowId",
          "description"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "AI Agent",
        "parameters": [
          "text",
          "options",
          "promptType"
        ]
      }
    ],
    "connections": {
      "AI Agent": {
        "main": [
          [
            {
              "node": "Delete Initial Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Receive DMs": {
        "main": [
          [
            {
              "node": "Verify Webhook",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check if Bot": {
        "main": [
          [
            {
              "node": "No Operation, do nothing",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Send Initial Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Verify Webhook": {
        "main": [
          [
            {
              "node": "Check if Bot",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Send Initial Message": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Window Buffer Memory": {
        "ai_memory": [
          [
            {
              "node": "AI Agent",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "Delete Initial Message": {
        "main": [
          [
            {
              "node": "Send Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Call Confluence Workflow Tool": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing outputting to emailSend",
    "nodes": [
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "name": "Google Gemini Chat Model",
        "parameters": [
          "options",
          "modelName"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Basic LLM Chain",
        "parameters": [
          "text",
          "promptType"
        ]
      },
      {
        "type": "n8n-nodes-base.hackerNews",
        "name": "SearchAskHN",
        "parameters": [
          "limit",
          "resource",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "FindHNComments",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "CombineIntoSingleText",
        "parameters": [
          "options",
          "fieldsToAggregate"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "SplitOutChildrenIDs",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.formTrigger",
        "name": "GetTopicFromToLearn",
        "parameters": [
          "options",
          "formTitle",
          "formFields",
          "formDescription"
        ]
      },
      {
        "type": "n8n-nodes-base.emailSend",
        "name": "SendEmailWithTopResources",
        "parameters": [
          "html",
          "options",
          "subject",
          "toEmail",
          "fromEmail"
        ]
      },
      {
        "type": "n8n-nodes-base.markdown",
        "name": "Convert2HTML",
        "parameters": [
          "mode",
          "options",
          "markdown"
        ]
      },
      {
        "type": "n8n-nodes-base.noOp",
        "name": "Finished",
        "parameters": []
      }
    ],
    "connections": {
      "SearchAskHN": {
        "main": [
          [
            {
              "node": "SplitOutChildrenIDs",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Convert2HTML": {
        "main": [
          [
            {
              "node": "SendEmailWithTopResources",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "FindHNComments": {
        "main": [
          [
            {
              "node": "CombineIntoSingleText",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Basic LLM Chain": {
        "main": [
          [
            {
              "node": "Convert2HTML",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "GetTopicFromToLearn": {
        "main": [
          [
            {
              "node": "SearchAskHN",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "SplitOutChildrenIDs": {
        "main": [
          [
            {
              "node": "FindHNComments",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "CombineIntoSingleText": {
        "main": [
          [
            {
              "node": "Basic LLM Chain",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Gemini Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Basic LLM Chain",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "SendEmailWithTopResources": {
        "main": [
          [
            {
              "node": "Finished",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Make OpenAI Citation for File Retrieval RAG",
    "description": "Make OpenAI Citation for File Retrieval RAG: Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Aggregate",
        "parameters": [
          "options",
          "aggregate"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "name": "Window Buffer Memory",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chatTrigger",
        "name": "Create a simple Trigger to have the Chat button within N8N",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "OpenAI Assistant with Vector Store",
        "parameters": [
          "options",
          "resource",
          "assistantId"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get ALL Thread Content",
        "parameters": [
          "url",
          "options",
          "sendHeaders",
          "authentication",
          "headerParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split all message iterations from a thread",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split all content from a single message",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split all citations from a single message",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Retrieve file name from a file ID",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "authentication",
          "queryParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Regularize output",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.markdown",
        "name": "Optional Markdown to HTML",
        "parameters": [
          "html",
          "options",
          "destinationKey"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Finnaly format the output",
        "parameters": [
          "mode",
          "jsCode"
        ]
      }
    ],
    "connections": {
      "Aggregate": {
        "main": [
          [
            {
              "node": "Finnaly format the output",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Regularize output": {
        "main": [
          [
            {
              "node": "Aggregate",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Window Buffer Memory": {
        "ai_memory": [
          [
            {
              "node": "OpenAI Assistant with Vector Store",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "Get ALL Thread Content": {
        "main": [
          [
            {
              "node": "Split all message iterations from a thread",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Finnaly format the output": {
        "main": [
          [
            {
              "node": "Optional Markdown to HTML",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Retrieve file name from a file ID": {
        "main": [
          [
            {
              "node": "Regularize output",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Assistant with Vector Store": {
        "main": [
          [
            {
              "node": "Get ALL Thread Content",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split all content from a single message": {
        "main": [
          [
            {
              "node": "Split all citations from a single message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split all citations from a single message": {
        "main": [
          [
            {
              "node": "Retrieve file name from a file ID",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split all message iterations from a thread": {
        "main": [
          [
            {
              "node": "Split all content from a single message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Create a simple Trigger to have the Chat button within N8N": {
        "main": [
          [
            {
              "node": "OpenAI Assistant with Vector Store",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": [
      {
        "id": "urxRtGxxLObZWPvX",
        "name": "sample",
        "createdAt": "2024-09-13T02:43:13.014Z",
        "updatedAt": "2024-09-13T02:43:13.014Z"
      },
      {
        "id": "nMXS3c9l1WqDwWF5",
        "name": "assist",
        "createdAt": "2024-12-23T16:09:38.737Z",
        "updatedAt": "2024-12-23T16:09:38.737Z"
      }
    ]
  },
  {
    "name": "Open Deep Research - AI-Powered Autonomous Research Workflow",
    "description": "Open Deep Research - AI-Powered Autonomous Research Workflow: Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "@n8n/n8n-nodes-langchain.chatTrigger",
        "name": "Chat Message Trigger",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Generate Search Queries using LLM",
        "parameters": [
          "text",
          "messages",
          "promptType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
        "name": "LLM Response Provider (OpenRouter)",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Parse and Chunk JSON Data",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Perform SerpAPI Search Request",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "queryParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Perform Jina AI Analysis Request",
        "parameters": [
          "url",
          "options",
          "authentication",
          "genericAuthType"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Format SerpAPI Organic Results",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "Extract Relevant Context via LLM",
        "parameters": [
          "text",
          "options",
          "promptType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "Generate Comprehensive Research Report",
        "parameters": [
          "text",
          "options",
          "promptType"
        ]
      },
      {
        "type": "n8n-nodes-base.splitInBatches",
        "name": "Split Data for SerpAPI Batching",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.splitInBatches",
        "name": "Split Data for Jina AI Batching",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "name": "LLM Memory Buffer (Input Context)",
        "parameters": [
          "sessionKey",
          "sessionIdType",
          "contextWindowLength"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "name": "LLM Memory Buffer (Report Context)",
        "parameters": [
          "sessionKey",
          "sessionIdType",
          "contextWindowLength"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
        "name": "Fetch Wikipedia Information",
        "parameters": []
      }
    ],
    "connections": {
      "Chat Message Trigger": {
        "main": [
          [
            {
              "node": "Generate Search Queries using LLM",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Parse and Chunk JSON Data": {
        "main": [
          [
            {
              "node": "Split Data for SerpAPI Batching",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch Wikipedia Information": {
        "ai_tool": [
          [
            {
              "node": "Generate Comprehensive Research Report",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Format SerpAPI Organic Results": {
        "main": [
          [
            {
              "node": "Split Data for Jina AI Batching",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Perform SerpAPI Search Request": {
        "main": [
          [
            {
              "node": "Split Data for SerpAPI Batching",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Data for Jina AI Batching": {
        "main": [
          [
            {
              "node": "Extract Relevant Context via LLM",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Perform Jina AI Analysis Request",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Data for SerpAPI Batching": {
        "main": [
          [
            {
              "node": "Format SerpAPI Organic Results",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Perform SerpAPI Search Request",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Relevant Context via LLM": {
        "main": [
          [
            {
              "node": "Generate Comprehensive Research Report",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Perform Jina AI Analysis Request": {
        "main": [
          [
            {
              "node": "Split Data for Jina AI Batching",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate Search Queries using LLM": {
        "main": [
          [
            {
              "node": "Parse and Chunk JSON Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "LLM Memory Buffer (Input Context)": {
        "ai_memory": [
          [
            {
              "node": "Extract Relevant Context via LLM",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "LLM Memory Buffer (Report Context)": {
        "ai_memory": [
          [
            {
              "node": "Generate Comprehensive Research Report",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "LLM Response Provider (OpenRouter)": {
        "ai_languageModel": [
          [
            {
              "node": "Generate Search Queries using LLM",
              "type": "ai_languageModel",
              "index": 0
            },
            {
              "node": "Extract Relevant Context via LLM",
              "type": "ai_languageModel",
              "index": 0
            },
            {
              "node": "Generate Comprehensive Research Report",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set Params",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Clean Output",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Perplexity Request",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "specifyBody",
          "authentication",
          "genericAuthType"
        ]
      }
    ],
    "connections": {
      "Set Params": {
        "main": [
          [
            {
              "node": "Perplexity Request",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Perplexity Request": {
        "main": [
          [
            {
              "node": "Clean Output",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Set Params",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.localFileTrigger",
        "name": "Watch For Bank Statements",
        "parameters": [
          "path",
          "events",
          "options",
          "triggerOn"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolCode",
        "name": "Get Tenant Details",
        "parameters": [
          "name",
          "jsCode",
          "description"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser",
        "parameters": [
          "jsonSchemaExample"
        ]
      },
      {
        "type": "n8n-nodes-base.readWriteFile",
        "name": "Get Bank Statement File",
        "parameters": [
          "options",
          "fileSelector"
        ]
      },
      {
        "type": "n8n-nodes-base.extractFromFile",
        "name": "Get CSV Data",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Alert Actions To List",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolCode",
        "name": "Get Property Details",
        "parameters": [
          "name",
          "jsCode",
          "description"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set Variables",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Append To Spreadsheet",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "Reconcile Rental Payments",
        "parameters": [
          "text",
          "options",
          "promptType",
          "hasOutputParser"
        ]
      }
    ],
    "connections": {
      "Get CSV Data": {
        "main": [
          [
            {
              "node": "Reconcile Rental Payments",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set Variables": {
        "main": [
          [
            {
              "node": "Get Bank Statement File",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Reconcile Rental Payments",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Get Tenant Details": {
        "ai_tool": [
          [
            {
              "node": "Reconcile Rental Payments",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Get Property Details": {
        "ai_tool": [
          [
            {
              "node": "Reconcile Rental Payments",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Alert Actions To List": {
        "main": [
          [
            {
              "node": "Append To Spreadsheet",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Bank Statement File": {
        "main": [
          [
            {
              "node": "Get CSV Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Reconcile Rental Payments",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Reconcile Rental Payments": {
        "main": [
          [
            {
              "node": "Alert Actions To List",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Watch For Bank Statements": {
        "main": [
          [
            {
              "node": "Set Variables",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "News Extraction",
    "description": "News Extraction: Scheduled automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.html",
        "name": "Extract the HTML with the right css class",
        "parameters": [
          "options",
          "operation",
          "extractionValues"
        ]
      },
      {
        "type": "n8n-nodes-base.openAi",
        "name": "Summary",
        "parameters": [
          "model",
          "prompt",
          "options",
          "resource"
        ]
      },
      {
        "type": "n8n-nodes-base.openAi",
        "name": "Keywords",
        "parameters": [
          "model",
          "prompt",
          "options",
          "resource"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Rename keywords",
        "parameters": [
          "fields",
          "include",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Rename Summary",
        "parameters": [
          "fields",
          "include",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge",
        "parameters": [
          "mode",
          "options",
          "combinationMode"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "Extract date",
        "parameters": [
          "options",
          "operation",
          "extractionValues"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Select posts of last 7 days",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge date & links",
        "parameters": [
          "mode",
          "options",
          "combinationMode"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "HTTP Request1",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge Content with Date & Link",
        "parameters": [
          "mode",
          "options",
          "combinationMode"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "Extract individual posts",
        "parameters": [
          "options",
          "operation",
          "extractionValues"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge ChatGPT output with Date & Link",
        "parameters": [
          "mode",
          "options",
          "combinationMode"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Retrieve the web page for further processsing",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "Schedule Trigger each week",
        "parameters": [
          "rule"
        ]
      },
      {
        "type": "n8n-nodes-base.nocoDb",
        "name": "NocoDB news database",
        "parameters": [
          "table",
          "fieldsUi",
          "operation",
          "projectId",
          "authentication"
        ]
      },
      {
        "type": "n8n-nodes-base.itemLists",
        "name": "Create single link items",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.itemLists",
        "name": "Create single date items",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      }
    ],
    "connections": {
      "Merge": {
        "main": [
          [
            {
              "node": "Merge ChatGPT output with Date & Link",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Summary": {
        "main": [
          [
            {
              "node": "Rename Summary",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Keywords": {
        "main": [
          [
            {
              "node": "Rename keywords",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract date": {
        "main": [
          [
            {
              "node": "Create single date items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "HTTP Request1": {
        "main": [
          [
            {
              "node": "Extract individual posts",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Rename Summary": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Rename keywords": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Merge date & links": {
        "main": [
          [
            {
              "node": "Select posts of last 7 days",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Create single date items": {
        "main": [
          [
            {
              "node": "Merge date & links",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Create single link items": {
        "main": [
          [
            {
              "node": "Merge date & links",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Extract individual posts": {
        "main": [
          [
            {
              "node": "Merge Content with Date & Link",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Schedule Trigger each week": {
        "main": [
          [
            {
              "node": "Retrieve the web page for further processsing",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Select posts of last 7 days": {
        "main": [
          [
            {
              "node": "Merge Content with Date & Link",
              "type": "main",
              "index": 1
            },
            {
              "node": "HTTP Request1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge Content with Date & Link": {
        "main": [
          [
            {
              "node": "Summary",
              "type": "main",
              "index": 0
            },
            {
              "node": "Keywords",
              "type": "main",
              "index": 0
            },
            {
              "node": "Merge ChatGPT output with Date & Link",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge ChatGPT output with Date & Link": {
        "main": [
          [
            {
              "node": "NocoDB news database",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract the HTML with the right css class": {
        "main": [
          [
            {
              "node": "Create single link items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Retrieve the web page for further processsing": {
        "main": [
          [
            {
              "node": "Extract the HTML with the right css class",
              "type": "main",
              "index": 0
            },
            {
              "node": "Extract date",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking \"Execute Workflow\"",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Fetch essay list",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "Extract essay names",
        "parameters": [
          "options",
          "operation",
          "dataPropertyName",
          "extractionValues"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Fetch essay texts",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "Extract title",
        "parameters": [
          "options",
          "operation",
          "extractionValues"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Clean up",
        "parameters": [
          "fields",
          "include",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split out into items",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.limit",
        "name": "Limit to first 3",
        "parameters": [
          "maxItems"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "name": "Default Data Loader",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
        "name": "Recursive Character Text Splitter",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model1",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge",
        "parameters": [
          "mode",
          "options",
          "combineBy"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainSummarization",
        "name": "Summarization Chain",
        "parameters": [
          "options",
          "operationMode"
        ]
      }
    ],
    "connections": {
      "Merge": {
        "main": [
          [
            {
              "node": "Clean up",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract title": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch essay list": {
        "main": [
          [
            {
              "node": "Extract essay names",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Limit to first 3": {
        "main": [
          [
            {
              "node": "Fetch essay texts",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch essay texts": {
        "main": [
          [
            {
              "node": "Extract title",
              "type": "main",
              "index": 0
            },
            {
              "node": "Summarization Chain",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Summarization Chain",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Default Data Loader": {
        "ai_document": [
          [
            {
              "node": "Summarization Chain",
              "type": "ai_document",
              "index": 0
            }
          ]
        ]
      },
      "Extract essay names": {
        "main": [
          [
            {
              "node": "Split out into items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Summarization Chain": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Split out into items": {
        "main": [
          [
            {
              "node": "Limit to first 3",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking \"Execute Workflow\"": {
        "main": [
          [
            {
              "node": "Fetch essay list",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Recursive Character Text Splitter": {
        "ai_textSplitter": [
          [
            {
              "node": "Default Data Loader",
              "type": "ai_textSplitter",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Scrape Trustpilot Reviews with DeepSeek, Analyze Sentiment with OpenAI",
    "description": "Scrape Trustpilot Reviews with DeepSeek, Analyze Sentiment with OpenAI: Event-driven automation with AI processing outputting to googleSheets",
    "nodes": [
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split Out",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.informationExtractor",
        "name": "Information Extractor",
        "parameters": [
          "text",
          "options",
          "attributes"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "If",
        "parameters": [
          "options",
          "conditions",
          "looseTypeValidation"
        ]
      },
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.limit",
        "name": "Limit1",
        "parameters": [
          "maxItems"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set Parameters",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get reviews",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "queryParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "Extract",
        "parameters": [
          "options",
          "operation",
          "extractionValues"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Get rows",
        "parameters": [
          "options",
          "filtersUI",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Get Google Sheets",
        "parameters": [
          "columns",
          "options",
          "operation",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Single review",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "Extract review",
        "parameters": [
          "options",
          "operation",
          "extractionValues"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Update sheet",
        "parameters": [
          "columns",
          "options",
          "operation",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.sentimentAnalysis",
        "name": "Sentiment Analysis",
        "parameters": [
          "options",
          "inputText"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "DeepSeek Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      }
    ],
    "connections": {
      "If": {
        "main": [
          [
            {
              "node": "Get Single review",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Limit1": {
        "main": [
          [
            {
              "node": "Get Google Sheets",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract": {
        "main": [
          [
            {
              "node": "Split Out",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get rows": {
        "main": [
          [
            {
              "node": "If",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Out": {
        "main": [
          [
            {
              "node": "Limit1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get reviews": {
        "main": [
          [
            {
              "node": "Extract",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract review": {
        "main": [
          [
            {
              "node": "Information Extractor",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set Parameters": {
        "main": [
          [
            {
              "node": "Get reviews",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Google Sheets": {
        "main": [
          [
            {
              "node": "Get rows",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Single review": {
        "main": [
          [
            {
              "node": "Extract review",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Sentiment Analysis",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Sentiment Analysis": {
        "main": [
          [
            {
              "node": "Update sheet",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Update sheet",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Update sheet",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "DeepSeek Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Information Extractor",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Information Extractor": {
        "main": [
          [
            {
              "node": "Sentiment Analysis",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Set Parameters",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": [
      {
        "id": "2VG6RbmUdJ2VZbrj",
        "name": "Google Drive",
        "createdAt": "2024-12-04T16:50:56.177Z",
        "updatedAt": "2024-12-04T16:50:56.177Z"
      },
      {
        "id": "paTcf5QZDJsC2vKY",
        "name": "OpenAI",
        "createdAt": "2024-12-04T16:52:10.768Z",
        "updatedAt": "2024-12-04T16:52:10.768Z"
      }
    ]
  },
  {
    "name": "",
    "description": ": Scheduled automation with AI processing outputting to slack",
    "nodes": [
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Issues to List",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Combine Sentiment Analysis",
        "parameters": [
          "mode",
          "options",
          "jsonOutput"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.informationExtractor",
        "name": "Sentiment over Issue Comments",
        "parameters": [
          "text",
          "options",
          "attributes"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Copy of Issue",
        "parameters": [
          "mode",
          "options",
          "jsonOutput"
        ]
      },
      {
        "type": "n8n-nodes-base.splitInBatches",
        "name": "For Each Issue...",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Get Existing Sentiment",
        "parameters": [
          "base",
          "table",
          "options",
          "operation",
          "filterByFormula"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Update Row",
        "parameters": [
          "base",
          "table",
          "columns",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.airtableTrigger",
        "name": "Airtable Trigger",
        "parameters": [
          "baseId",
          "tableId",
          "pollTimes",
          "triggerField",
          "authentication",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Sentiment Transition",
        "parameters": [
          "rules",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.graphql",
        "name": "Fetch Active Linear Issues",
        "parameters": [
          "query",
          "endpoint",
          "variables",
          "requestFormat",
          "authentication"
        ]
      },
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "Schedule Trigger",
        "parameters": [
          "rule"
        ]
      },
      {
        "type": "n8n-nodes-base.removeDuplicates",
        "name": "Deduplicate Notifications",
        "parameters": [
          "options",
          "operation",
          "dedupeValue"
        ]
      },
      {
        "type": "n8n-nodes-base.slack",
        "name": "Report Issue Negative Transition",
        "parameters": [
          "text",
          "select",
          "blocksUi",
          "channelId",
          "messageType",
          "otherOptions"
        ]
      }
    ],
    "connections": {
      "Update Row": {
        "main": [
          [
            {
              "node": "For Each Issue...",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Copy of Issue": {
        "main": [
          [
            {
              "node": "Get Existing Sentiment",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Issues to List": {
        "main": [
          [
            {
              "node": "Sentiment over Issue Comments",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Airtable Trigger": {
        "main": [
          [
            {
              "node": "Sentiment Transition",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Schedule Trigger": {
        "main": [
          [
            {
              "node": "Fetch Active Linear Issues",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "For Each Issue...": {
        "main": [
          [],
          [
            {
              "node": "Copy of Issue",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Sentiment over Issue Comments",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Sentiment Transition": {
        "main": [
          [
            {
              "node": "Deduplicate Notifications",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Existing Sentiment": {
        "main": [
          [
            {
              "node": "Update Row",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Deduplicate Notifications": {
        "main": [
          [
            {
              "node": "Report Issue Negative Transition",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Combine Sentiment Analysis": {
        "main": [
          [
            {
              "node": "For Each Issue...",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch Active Linear Issues": {
        "main": [
          [
            {
              "node": "Issues to List",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Sentiment over Issue Comments": {
        "main": [
          [
            {
              "node": "Combine Sentiment Analysis",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "My workflow 6",
    "description": "My workflow 6: with AI processing outputting to slack, webhook",
    "nodes": [
      {
        "type": "n8n-nodes-base.webhook",
        "name": "Webhook",
        "parameters": [
          "path",
          "options",
          "httpMethod"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Switch",
        "parameters": [
          "rules",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Basic LLM Chain",
        "parameters": [
          "text",
          "promptType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.slack",
        "name": "Send a Message",
        "parameters": [
          "text",
          "select",
          "channelId",
          "otherOptions"
        ]
      }
    ],
    "connections": {
      "Switch": {
        "main": [
          [
            {
              "node": "Basic LLM Chain",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Webhook": {
        "main": [
          [
            {
              "node": "Switch",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Basic LLM Chain": {
        "main": [
          [
            {
              "node": "Send a Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Basic LLM Chain",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": with AI processing outputting to respondToWebhook, slack, webhook",
    "nodes": [
      {
        "type": "n8n-nodes-base.venafiTlsProtectCloud",
        "name": "Venafi TLS Protect Cloud",
        "parameters": [
          "options",
          "commonName",
          "generateCsr",
          "applicationId",
          "additionalFields",
          "certificateIssuingTemplateId"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Parse Webhook",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.respondToWebhook",
        "name": "Close Modal Popup",
        "parameters": [
          "options",
          "respondWith"
        ]
      },
      {
        "type": "n8n-nodes-base.respondToWebhook",
        "name": "Respond to Slack Webhook - Vulnerability",
        "parameters": [
          "options",
          "respondWith"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Venafi Request Certificate",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "jsonQuery",
          "sendQuery",
          "specifyBody",
          "specifyQuery",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Extract Fields",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Get Slack User ID",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.executeWorkflow",
        "name": "Translate Slack User ID to Email",
        "parameters": [
          "options",
          "workflowId"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "VirusTotal HTTP Request",
        "parameters": [
          "",
          "url",
          "method",
          "options",
          "sendBody",
          "sendQuery",
          "curlImport",
          "infoMessage",
          "sendHeaders",
          "authentication",
          "specifyHeaders",
          "headerParameters",
          "httpVariantWarning",
          "provideSslCertificates"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Summarize output to save on tokens",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Auto Issue Certificate Based on 0 Malicious Reports",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.noOp",
        "name": "Auto Issue Certificate",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.noOp",
        "name": "Generate Report For Manual Approval",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Get Slack Team ID",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.executeWorkflow",
        "name": "Execute Workflow",
        "parameters": [
          "options",
          "workflowId"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge User and Team Data",
        "parameters": [
          "mode",
          "options",
          "combineBy"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "OpenAI",
        "parameters": [
          "modelId",
          "options",
          "messages"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge Requestor and VT Data",
        "parameters": [
          "mode",
          "options",
          "combineBy"
        ]
      },
      {
        "type": "n8n-nodes-base.slack",
        "name": "Send Auto Generated Confirmation",
        "parameters": [
          "text",
          "select",
          "blocksUi",
          "channelId",
          "messageType",
          "otherOptions"
        ]
      },
      {
        "type": "n8n-nodes-base.slack",
        "name": "Send Message Request for Manual Approval",
        "parameters": [
          "text",
          "select",
          "blocksUi",
          "channelId",
          "messageType",
          "otherOptions"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Route Message",
        "parameters": [
          "rules",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.venafiTlsProtectCloud",
        "name": "Venafi TLS Protect Cloud1",
        "parameters": [
          "options",
          "commonName",
          "generateCsr",
          "applicationId",
          "additionalFields",
          "certificateIssuingTemplateId"
        ]
      },
      {
        "type": "n8n-nodes-base.slack",
        "name": "Send Auto Generated Confirmation1",
        "parameters": [
          "text",
          "select",
          "blocksUi",
          "channelId",
          "messageType",
          "otherOptions"
        ]
      },
      {
        "type": "n8n-nodes-base.noOp",
        "name": "Manual Issue Certificate",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.webhook",
        "name": "Webhook",
        "parameters": [
          "path",
          "options",
          "httpMethod",
          "responseMode"
        ]
      },
      {
        "type": "n8n-nodes-base.respondToWebhook",
        "name": "Respond to webhook success",
        "parameters": [
          "options",
          "respondWith"
        ]
      }
    ],
    "connections": {
      "OpenAI": {
        "main": [
          [
            {
              "node": "Send Message Request for Manual Approval",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Webhook": {
        "main": [
          [
            {
              "node": "Parse Webhook",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Parse Webhook": {
        "main": [
          [
            {
              "node": "Route Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Route Message": {
        "main": [
          [
            {
              "node": "Respond to Slack Webhook - Vulnerability",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Close Modal Popup",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Respond to webhook success",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Fields": {
        "main": [
          [
            {
              "node": "VirusTotal HTTP Request",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Execute Workflow": {
        "main": [
          [
            {
              "node": "Merge User and Team Data",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Close Modal Popup": {
        "main": [
          [
            {
              "node": "Extract Fields",
              "type": "main",
              "index": 0
            },
            {
              "node": "Get Slack User ID",
              "type": "main",
              "index": 0
            },
            {
              "node": "Get Slack Team ID",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Slack Team ID": {
        "main": [
          [
            {
              "node": "Execute Workflow",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Slack User ID": {
        "main": [
          [
            {
              "node": "Translate Slack User ID to Email",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Auto Issue Certificate": {
        "main": [
          [
            {
              "node": "Venafi TLS Protect Cloud",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "VirusTotal HTTP Request": {
        "main": [
          [
            {
              "node": "Summarize output to save on tokens",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Manual Issue Certificate": {
        "main": [
          [
            {
              "node": "Venafi TLS Protect Cloud1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge User and Team Data": {
        "main": [
          [
            {
              "node": "Merge Requestor and VT Data",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Venafi TLS Protect Cloud": {
        "main": [
          [
            {
              "node": "Send Auto Generated Confirmation",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Venafi TLS Protect Cloud1": {
        "main": [
          [
            {
              "node": "Send Auto Generated Confirmation1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Respond to webhook success": {
        "main": [
          [
            {
              "node": "Manual Issue Certificate",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge Requestor and VT Data": {
        "main": [
          [
            {
              "node": "Auto Issue Certificate Based on 0 Malicious Reports",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Translate Slack User ID to Email": {
        "main": [
          [
            {
              "node": "Merge User and Team Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Summarize output to save on tokens": {
        "main": [
          [
            {
              "node": "Merge Requestor and VT Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate Report For Manual Approval": {
        "main": [
          [
            {
              "node": "OpenAI",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Respond to Slack Webhook - Vulnerability": {
        "main": [
          [
            {
              "node": "Venafi Request Certificate",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Auto Issue Certificate Based on 0 Malicious Reports": {
        "main": [
          [
            {
              "node": "Auto Issue Certificate",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Generate Report For Manual Approval",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "RAG & GenAI App With WordPress Content",
    "description": "RAG & GenAI App With WordPress Content: Scheduled automation with AI processing outputting to respondToWebhook",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "name": "Default Data Loader",
        "parameters": [
          "options",
          "jsonData",
          "jsonMode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
        "name": "Token Splitter",
        "parameters": [
          "chunkSize",
          "chunkOverlap"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI1",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
        "name": "Postgres Chat Memory",
        "parameters": [
          "tableName"
        ]
      },
      {
        "type": "n8n-nodes-base.respondToWebhook",
        "name": "Respond to Webhook",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set fields",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI2",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "name": "Default Data Loader1",
        "parameters": [
          "options",
          "jsonData",
          "jsonMode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
        "name": "Token Splitter1",
        "parameters": [
          "chunkSize",
          "chunkOverlap"
        ]
      },
      {
        "type": "n8n-nodes-base.markdown",
        "name": "Markdown1",
        "parameters": [
          "html",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.postgres",
        "name": "Postgres",
        "parameters": [
          "query",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Aggregate",
        "parameters": [
          "options",
          "aggregate"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Aggregate1",
        "parameters": [
          "options",
          "aggregate"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Aggregate2",
        "parameters": [
          "options",
          "fieldsToAggregate"
        ]
      },
      {
        "type": "n8n-nodes-base.wordpress",
        "name": "Wordpress - Get all posts",
        "parameters": [
          "options",
          "operation",
          "returnAll"
        ]
      },
      {
        "type": "n8n-nodes-base.wordpress",
        "name": "Wordpress - Get all pages",
        "parameters": [
          "options",
          "resource",
          "operation",
          "returnAll"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set fields1",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.filter",
        "name": "Filter - Only published & unprotected content",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.markdown",
        "name": "HTML To Markdown",
        "parameters": [
          "html",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.supabase",
        "name": "Supabase - Store workflow execution",
        "parameters": [
          "tableId",
          "fieldsUi"
        ]
      },
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "Every 30 seconds",
        "parameters": [
          "rule"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Wordpress - Get posts modified after last workflow execution",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "authentication",
          "queryParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Wordpress - Get posts modified after last workflow execution1",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "authentication",
          "queryParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set fields2",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.filter",
        "name": "Filter - Only published and unprotected content",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.splitInBatches",
        "name": "Loop Over Items",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set fields3",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set fields4",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
        "name": "Store documents on Supabase",
        "parameters": [
          "mode",
          "options",
          "tableName"
        ]
      },
      {
        "type": "n8n-nodes-base.supabase",
        "name": "Store workflow execution id and timestamptz",
        "parameters": [
          "tableId"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Aggregate documents",
        "parameters": [
          "options",
          "fieldsToAggregate"
        ]
      },
      {
        "type": "n8n-nodes-base.postgres",
        "name": "Postgres - Create documents table",
        "parameters": [
          "query",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.postgres",
        "name": "Postgres - Create workflow execution history table",
        "parameters": [
          "query",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge Wordpress Posts and Pages",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge retrieved WordPress posts and pages",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.postgres",
        "name": "Postgres - Filter on existing documents",
        "parameters": [
          "query",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.supabase",
        "name": "Supabase - Delete row if documents exists",
        "parameters": [
          "tableId",
          "operation",
          "filterType",
          "filterString"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Switch",
        "parameters": [
          "rules",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chatTrigger",
        "name": "When chat message received",
        "parameters": [
          "mode",
          "public",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
        "name": "Supabase - Retrieve documents from chatinput",
        "parameters": [
          "mode",
          "prompt",
          "options",
          "tableName"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "AI Agent",
        "parameters": [
          "text",
          "agent",
          "options",
          "promptType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
        "name": "Supabase Vector Store",
        "parameters": [
          "mode",
          "options",
          "tableName"
        ]
      }
    ],
    "connections": {
      "Switch": {
        "main": [
          [
            {
              "node": "Supabase - Delete row if documents exists",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Set fields4",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI Agent": {
        "main": [
          [
            {
              "node": "Respond to Webhook",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Postgres": {
        "main": [
          [
            {
              "node": "Wordpress - Get posts modified after last workflow execution",
              "type": "main",
              "index": 0
            },
            {
              "node": "Wordpress - Get posts modified after last workflow execution1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Aggregate": {
        "main": [
          [
            {
              "node": "Supabase - Store workflow execution",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Markdown1": {
        "main": [
          [
            {
              "node": "Store documents on Supabase",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Aggregate1": {
        "main": [
          [
            {
              "node": "Store workflow execution id and timestamptz",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Aggregate2": {
        "main": [
          [
            {
              "node": "Set fields3",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set fields": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set fields1": {
        "main": [
          [
            {
              "node": "Filter - Only published & unprotected content",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set fields2": {
        "main": [
          [
            {
              "node": "Filter - Only published and unprotected content",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set fields3": {
        "main": [
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set fields4": {
        "main": [
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Token Splitter": {
        "ai_textSplitter": [
          [
            {
              "node": "Default Data Loader",
              "type": "ai_textSplitter",
              "index": 0
            }
          ]
        ]
      },
      "Loop Over Items": {
        "main": [
          [
            {
              "node": "Markdown1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Postgres - Filter on existing documents",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Token Splitter1": {
        "ai_textSplitter": [
          [
            {
              "node": "Default Data Loader1",
              "type": "ai_textSplitter",
              "index": 0
            }
          ]
        ]
      },
      "Every 30 seconds": {
        "main": [
          [
            {
              "node": "Postgres",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "HTML To Markdown": {
        "main": [
          [
            {
              "node": "Supabase Vector Store",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI": {
        "ai_embedding": [
          [
            {
              "node": "Supabase Vector Store",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI1": {
        "ai_embedding": [
          [
            {
              "node": "Supabase - Retrieve documents from chatinput",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI2": {
        "ai_embedding": [
          [
            {
              "node": "Store documents on Supabase",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Aggregate documents": {
        "main": [
          [
            {
              "node": "Set fields",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Default Data Loader": {
        "ai_document": [
          [
            {
              "node": "Supabase Vector Store",
              "type": "ai_document",
              "index": 0
            }
          ]
        ]
      },
      "Default Data Loader1": {
        "ai_document": [
          [
            {
              "node": "Store documents on Supabase",
              "type": "ai_document",
              "index": 0
            }
          ]
        ]
      },
      "Postgres Chat Memory": {
        "ai_memory": [
          [
            {
              "node": "AI Agent",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "Supabase Vector Store": {
        "main": [
          [
            {
              "node": "Aggregate",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Wordpress - Get all pages": {
        "main": [
          [
            {
              "node": "Merge Wordpress Posts and Pages",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Wordpress - Get all posts": {
        "main": [
          [
            {
              "node": "Merge Wordpress Posts and Pages",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When chat message received": {
        "main": [
          [
            {
              "node": "Supabase - Retrieve documents from chatinput",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Store documents on Supabase": {
        "main": [
          [
            {
              "node": "Aggregate1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge Wordpress Posts and Pages": {
        "main": [
          [
            {
              "node": "Set fields1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Postgres - Create documents table": {
        "main": [
          [
            {
              "node": "Postgres - Create workflow execution history table",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Wordpress - Get all posts",
              "type": "main",
              "index": 0
            },
            {
              "node": "Wordpress - Get all pages",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Postgres - Filter on existing documents": {
        "main": [
          [
            {
              "node": "Switch",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge retrieved WordPress posts and pages": {
        "main": [
          [
            {
              "node": "Set fields2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Supabase - Delete row if documents exists": {
        "main": [
          [
            {
              "node": "Aggregate2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Supabase - Retrieve documents from chatinput": {
        "main": [
          [
            {
              "node": "Aggregate documents",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Filter - Only published & unprotected content": {
        "main": [
          [
            {
              "node": "HTML To Markdown",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Filter - Only published and unprotected content": {
        "main": [
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Wordpress - Get posts modified after last workflow execution": {
        "main": [
          [
            {
              "node": "Merge retrieved WordPress posts and pages",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Wordpress - Get posts modified after last workflow execution1": {
        "main": [
          [
            {
              "node": "Merge retrieved WordPress posts and pages",
              "type": "main",
              "index": 1
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Write a WordPress post with AI (starting from a few keywords)",
    "description": "Write a WordPress post with AI (starting from a few keywords): Event-driven automation with AI processing outputting to respondToWebhook",
    "nodes": [
      {
        "type": "n8n-nodes-base.formTrigger",
        "name": "Form",
        "parameters": [
          "path",
          "formTitle",
          "formFields",
          "responseMode",
          "formDescription"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Settings",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Check data consistency",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split out chapters",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge chapters title and text",
        "parameters": [
          "mode",
          "options",
          "combinationMode"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Final article text",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.wordpress",
        "name": "Post on Wordpress",
        "parameters": [
          "title",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Upload media",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "contentType",
          "sendHeaders",
          "authentication",
          "headerParameters",
          "inputDataFieldName",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Set image ID for the post",
        "parameters": [
          "url",
          "method",
          "options",
          "sendQuery",
          "authentication",
          "queryParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.respondToWebhook",
        "name": "Respond: Success",
        "parameters": [
          "options",
          "respondWith",
          "responseBody"
        ]
      },
      {
        "type": "n8n-nodes-base.respondToWebhook",
        "name": "Respond: Error",
        "parameters": [
          "options",
          "respondWith",
          "responseBody"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Generate featured image",
        "parameters": [
          "prompt",
          "options",
          "resource"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
        "name": "Wikipedia",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Create post title and structure",
        "parameters": [
          "modelId",
          "options",
          "messages",
          "jsonOutput"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Create chapters text",
        "parameters": [
          "modelId",
          "options",
          "messages"
        ]
      }
    ],
    "connections": {
      "Form": {
        "main": [
          [
            {
              "node": "Settings",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Settings": {
        "main": [
          [
            {
              "node": "Create post title and structure",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Wikipedia": {
        "ai_tool": [
          [
            {
              "node": "Create post title and structure",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Upload media": {
        "main": [
          [
            {
              "node": "Set image ID for the post",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Post on Wordpress": {
        "main": [
          [
            {
              "node": "Generate featured image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Final article text": {
        "main": [
          [
            {
              "node": "Post on Wordpress",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split out chapters": {
        "main": [
          [
            {
              "node": "Merge chapters title and text",
              "type": "main",
              "index": 1
            },
            {
              "node": "Create chapters text",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Create chapters text": {
        "main": [
          [
            {
              "node": "Merge chapters title and text",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check data consistency": {
        "main": [
          [
            {
              "node": "Split out chapters",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Respond: Error",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate featured image": {
        "main": [
          [
            {
              "node": "Upload media",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set image ID for the post": {
        "main": [
          [
            {
              "node": "Respond: Success",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge chapters title and text": {
        "main": [
          [
            {
              "node": "Final article text",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Create post title and structure": {
        "main": [
          [
            {
              "node": "Check data consistency",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing outputting to webhook",
    "nodes": [
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "AI Agent",
        "parameters": [
          "text",
          "agent",
          "options",
          "promptType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "name": "Create Tasks",
        "parameters": [
          "name",
          "schemaType",
          "workflowId",
          "description",
          "inputSchema",
          "specifyInputSchema"
        ]
      },
      {
        "type": "n8n-nodes-base.gmailTool",
        "name": "Notify Client About Tasks",
        "parameters": [
          "sendTo",
          "message",
          "options",
          "subject",
          "emailType",
          "descriptionType",
          "toolDescription"
        ]
      },
      {
        "type": "n8n-nodes-base.executeWorkflowTrigger",
        "name": "Execute Workflow Trigger",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split Out",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Create Task",
        "parameters": [
          "base",
          "table",
          "columns",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.googleCalendarTool",
        "name": "Create Event",
        "parameters": [
          "end",
          "start",
          "calendar",
          "descriptionType",
          "toolDescription",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.webhook",
        "name": "Webhook",
        "parameters": [
          "path",
          "options",
          "httpMethod"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Meeting Content",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "sendHeaders",
          "specifyBody",
          "headerParameters"
        ]
      }
    ],
    "connections": {
      "Webhook": {
        "main": [
          [
            {
              "node": "Get Meeting Content",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI Agent": {
        "main": [
          []
        ]
      },
      "Split Out": {
        "main": [
          [
            {
              "node": "Create Task",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Create Event": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Create Tasks": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Get Meeting Content": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Execute Workflow Trigger": {
        "main": [
          [
            {
              "node": "Split Out",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Notify Client About Tasks": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "AI Email processing autoresponder with approval (Yes/No)",
    "description": "AI Email processing autoresponder with approval (Yes/No): with AI processing outputting to emailSend, emailReadImap",
    "nodes": [
      {
        "type": "n8n-nodes-base.emailReadImap",
        "name": "Email Trigger (IMAP)",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.markdown",
        "name": "Markdown",
        "parameters": [
          "html",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "DeepSeek R1",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.emailSend",
        "name": "Send Email",
        "parameters": [
          "html",
          "options",
          "subject",
          "toEmail",
          "fromEmail"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
        "name": "Qdrant Vector Store",
        "parameters": [
          "mode",
          "options",
          "toolName",
          "toolDescription",
          "qdrantCollection",
          "includeDocumentMetadata"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainSummarization",
        "name": "Email Summarization Chain",
        "parameters": [
          "options",
          "operationMode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "Write email",
        "parameters": [
          "text",
          "options",
          "promptType",
          "hasOutputParser"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set Email",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Approve?",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.gmail",
        "name": "Send Draft",
        "parameters": [
          "sendTo",
          "message",
          "options",
          "subject",
          "operation",
          "approvalOptions"
        ]
      }
    ],
    "connections": {
      "OpenAI": {
        "ai_languageModel": [
          [
            {
              "node": "Write email",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Approve?": {
        "main": [
          [
            {
              "node": "Send Email",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Set Email",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Markdown": {
        "main": [
          [
            {
              "node": "Email Summarization Chain",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set Email": {
        "main": [
          [
            {
              "node": "Write email",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Send Draft": {
        "main": [
          [
            {
              "node": "Approve?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "DeepSeek R1": {
        "ai_languageModel": [
          [
            {
              "node": "Email Summarization Chain",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Write email": {
        "main": [
          [
            {
              "node": "Send Draft",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI": {
        "ai_embedding": [
          [
            {
              "node": "Qdrant Vector Store",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Qdrant Vector Store": {
        "ai_tool": [
          [
            {
              "node": "Write email",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Email Trigger (IMAP)": {
        "main": [
          [
            {
              "node": "Markdown",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Email Summarization Chain": {
        "main": [
          [
            {
              "node": "Set Email",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "AI-Powered Information Monitoring with OpenAI, Google Sheets, Jina AI and Slack",
    "description": "AI-Powered Information Monitoring with OpenAI, Google Sheets, Jina AI and Slack: Scheduled automation with AI processing outputting to slack, googleSheets",
    "nodes": [
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Basic LLM Chain",
        "parameters": [
          "text",
          "messages",
          "promptType"
        ]
      },
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "Schedule Trigger",
        "parameters": [
          "rule"
        ]
      },
      {
        "type": "n8n-nodes-base.rssFeedRead",
        "name": "RSS Read",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textClassifier",
        "name": "Relevance Classification for Topic Monitoring",
        "parameters": [
          "options",
          "inputText",
          "categories"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Google Sheets - Get RSS Feed url followed",
        "parameters": [
          "options",
          "sheetName",
          "documentId",
          "authentication"
        ]
      },
      {
        "type": "n8n-nodes-base.slack",
        "name": "Slack1",
        "parameters": [
          "text",
          "select",
          "channelId",
          "otherOptions",
          "authentication"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Google Sheets - Get article monitored database",
        "parameters": [
          "options",
          "sheetName",
          "documentId",
          "authentication"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Code",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.noOp",
        "name": "No Operation, do nothing",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "If",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Jina AI - Read URL",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set field - existing_url",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model1",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set fields - Not relevant articles",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Google Sheets - Add relevant articles",
        "parameters": [
          "columns",
          "options",
          "operation",
          "sheetName",
          "documentId",
          "authentication"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Google Sheets - Add relevant article",
        "parameters": [
          "columns",
          "options",
          "operation",
          "sheetName",
          "documentId",
          "authentication"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set Fields - Relevant Articles",
        "parameters": [
          "options",
          "assignments"
        ]
      }
    ],
    "connections": {
      "If": {
        "main": [
          [
            {
              "node": "Relevance Classification for Topic Monitoring",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "No Operation, do nothing",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Code": {
        "main": [
          [
            {
              "node": "If",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "RSS Read": {
        "main": [
          [
            {
              "node": "Code",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Basic LLM Chain": {
        "main": [
          [
            {
              "node": "Slack1",
              "type": "main",
              "index": 0
            },
            {
              "node": "Set Fields - Relevant Articles",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Schedule Trigger": {
        "main": [
          [
            {
              "node": "Google Sheets - Get article monitored database",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Basic LLM Chain",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Jina AI - Read URL": {
        "main": [
          [
            {
              "node": "Basic LLM Chain",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Relevance Classification for Topic Monitoring",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Set field - existing_url": {
        "main": [
          [
            {
              "node": "Google Sheets - Get RSS Feed url followed",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set Fields - Relevant Articles": {
        "main": [
          [
            {
              "node": "Google Sheets - Add relevant article",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set fields - Not relevant articles": {
        "main": [
          [
            {
              "node": "Google Sheets - Add relevant articles",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Sheets - Add relevant article": {
        "main": [
          []
        ]
      },
      "Google Sheets - Get RSS Feed url followed": {
        "main": [
          [
            {
              "node": "RSS Read",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Relevance Classification for Topic Monitoring": {
        "main": [
          [
            {
              "node": "Jina AI - Read URL",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Set fields - Not relevant articles",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Sheets - Get article monitored database": {
        "main": [
          [
            {
              "node": "Set field - existing_url",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Blog Automation TEMPLATE",
    "description": "Blog Automation TEMPLATE: Scheduled automation with AI processing outputting to googleSheets",
    "nodes": [
      {
        "type": "n8n-nodes-base.set",
        "name": "Settings",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "ScheduleTrigger",
        "parameters": [
          "rule"
        ]
      },
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "ManualTrigger",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Schedule",
        "parameters": [
          "options",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Config",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "fetchConfig",
        "parameters": [
          "options",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "AgentLLM",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "IfScheduledNow",
        "parameters": [
          "options",
          "conditions",
          "looseTypeValidation"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "PreparedData",
        "parameters": [
          "mode",
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "RecombinedDataRow",
        "parameters": [
          "mode",
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "SaveBackToSheet",
        "parameters": [
          "columns",
          "options",
          "operation",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "IfActionPublish",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "IfTakeAction",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "IfPromptExists",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Basic LLM Chain",
        "parameters": [
          "text",
          "promptType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "CreatePost",
        "parameters": [
          "url",
          "body",
          "method",
          "options",
          "sendBody",
          "contentType",
          "sendHeaders",
          "rawContentType",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "SetToPublish",
        "parameters": [
          "columns",
          "options",
          "operation",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "PrepareXmlPost",
        "parameters": [
          "mode",
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "HandleXMLRPCResponse",
        "parameters": [
          "mode",
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "PostingSuccessful",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "LogStatus",
        "parameters": [
          "columns",
          "options",
          "operation",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "LogPublished",
        "parameters": [
          "columns",
          "options",
          "operation",
          "sheetName",
          "documentId"
        ]
      }
    ],
    "connections": {
      "Config": {
        "main": [
          []
        ]
      },
      "AgentLLM": {
        "ai_languageModel": [
          [
            {
              "node": "Basic LLM Chain",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Schedule": {
        "main": [
          [
            {
              "node": "PreparedData",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Settings": {
        "main": [
          [
            {
              "node": "fetchConfig",
              "type": "main",
              "index": 0
            },
            {
              "node": "Schedule",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "LogStatus": {
        "main": [
          [
            {
              "node": "SaveBackToSheet",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "CreatePost": {
        "main": [
          [
            {
              "node": "HandleXMLRPCResponse",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "fetchConfig": {
        "main": [
          [
            {
              "node": "Config",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "IfTakeAction": {
        "main": [
          [
            {
              "node": "IfActionPublish",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "LogPublished": {
        "main": [
          [
            {
              "node": "PostingSuccessful",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "PreparedData": {
        "main": [
          [
            {
              "node": "IfTakeAction",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "SetToPublish": {
        "main": [
          []
        ]
      },
      "ManualTrigger": {
        "main": [
          [
            {
              "node": "Settings",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "IfPromptExists": {
        "main": [
          [
            {
              "node": "Basic LLM Chain",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "IfScheduledNow": {
        "main": [
          [
            {
              "node": "PrepareXmlPost",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "PrepareXmlPost": {
        "main": [
          [
            {
              "node": "CreatePost",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Basic LLM Chain": {
        "main": [
          [
            {
              "node": "RecombinedDataRow",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "IfActionPublish": {
        "main": [
          [
            {
              "node": "IfScheduledNow",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "IfPromptExists",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "SaveBackToSheet": {
        "main": [
          []
        ]
      },
      "ScheduleTrigger": {
        "main": [
          [
            {
              "node": "Settings",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "PostingSuccessful": {
        "main": [
          [
            {
              "node": "SetToPublish",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "RecombinedDataRow": {
        "main": [
          [
            {
              "node": "LogStatus",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "HandleXMLRPCResponse": {
        "main": [
          [
            {
              "node": "LogPublished",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": [
      {
        "id": "uumvgGHY5e6zEL7V",
        "name": "Published Template",
        "createdAt": "2025-02-10T11:18:10.923Z",
        "updatedAt": "2025-02-10T11:18:10.923Z"
      }
    ]
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
        "name": "Ollama Chat Model1",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.microsoftOutlook",
        "name": "Microsoft Outlook10",
        "parameters": [
          "folderId",
          "messageId",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.microsoftOutlook",
        "name": "Microsoft Outlook12",
        "parameters": [
          "messageId",
          "operation",
          "updateFields"
        ]
      },
      {
        "type": "n8n-nodes-base.splitInBatches",
        "name": "Loop Over Items1",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.microsoftOutlook",
        "name": "Microsoft Outlook13",
        "parameters": [
          "messageId",
          "operation",
          "updateFields"
        ]
      },
      {
        "type": "n8n-nodes-base.microsoftOutlook",
        "name": "Microsoft Outlook15",
        "parameters": [
          "folderId",
          "messageId",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.microsoftOutlook",
        "name": "Microsoft Outlook16",
        "parameters": [
          "messageId",
          "operation",
          "updateFields"
        ]
      },
      {
        "type": "n8n-nodes-base.microsoftOutlook",
        "name": "Microsoft Outlook17",
        "parameters": [
          "folderId",
          "messageId",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.microsoftOutlook",
        "name": "Microsoft Outlook18",
        "parameters": [
          "messageId",
          "operation",
          "updateFields"
        ]
      },
      {
        "type": "n8n-nodes-base.microsoftOutlook",
        "name": "Microsoft Outlook19",
        "parameters": [
          "folderId",
          "messageId",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.markdown",
        "name": "Markdown1",
        "parameters": [
          "html",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "varEmal1",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.microsoftOutlook",
        "name": "Microsoft Outlook20",
        "parameters": [
          "messageId",
          "operation",
          "updateFields"
        ]
      },
      {
        "type": "n8n-nodes-base.microsoftOutlook",
        "name": "Microsoft Outlook21",
        "parameters": [
          "messageId",
          "operation",
          "updateFields"
        ]
      },
      {
        "type": "n8n-nodes-base.filter",
        "name": "Filter1",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "If1",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.microsoftOutlook",
        "name": "Microsoft Outlook22",
        "parameters": [
          "messageId",
          "operation",
          "updateFields"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Catch Errors1",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "varJSON1",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.microsoftOutlook",
        "name": "Microsoft Outlook23",
        "parameters": [
          "limit",
          "fields",
          "output",
          "options",
          "filtersUI",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "varID & Category1",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.microsoftOutlook",
        "name": "Microsoft Outlook Move Message1",
        "parameters": [
          "folderId",
          "messageId",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "AI Agent1",
        "parameters": [
          "text",
          "options",
          "promptType",
          "hasOutputParser"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge1",
        "parameters": [
          "numberInputs"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Switch1",
        "parameters": [
          "rules",
          "options"
        ]
      }
    ],
    "connections": {
      "If1": {
        "main": [
          [
            {
              "node": "Microsoft Outlook Move Message1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Merge1",
              "type": "main",
              "index": 5
            }
          ]
        ]
      },
      "Merge1": {
        "main": [
          [
            {
              "node": "Loop Over Items1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Filter1": {
        "main": [
          [
            {
              "node": "Loop Over Items1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Switch1": {
        "main": [
          [
            {
              "node": "Microsoft Outlook12",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Microsoft Outlook13",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Microsoft Outlook18",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Microsoft Outlook16",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Microsoft Outlook20",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Microsoft Outlook22",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Microsoft Outlook21",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "varEmal1": {
        "main": [
          [
            {
              "node": "varID & Category1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "varJSON1": {
        "main": [
          [
            {
              "node": "Switch1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Catch Errors1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI Agent1": {
        "main": [
          [
            {
              "node": "varJSON1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Markdown1": {
        "main": [
          [
            {
              "node": "varEmal1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Catch Errors1": {
        "main": [
          [
            {
              "node": "Loop Over Items1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Loop Over Items1": {
        "main": [
          null,
          [
            {
              "node": "Markdown1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "varID & Category1": {
        "main": [
          [
            {
              "node": "AI Agent1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Ollama Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent1",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Microsoft Outlook10": {
        "main": [
          [
            {
              "node": "Merge1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Microsoft Outlook12": {
        "main": [
          [
            {
              "node": "Microsoft Outlook10",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Microsoft Outlook13": {
        "main": [
          [
            {
              "node": "Microsoft Outlook15",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Microsoft Outlook15": {
        "main": [
          [
            {
              "node": "Merge1",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Microsoft Outlook16": {
        "main": [
          [
            {
              "node": "Microsoft Outlook17",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Microsoft Outlook17": {
        "main": [
          [
            {
              "node": "Merge1",
              "type": "main",
              "index": 3
            }
          ]
        ]
      },
      "Microsoft Outlook18": {
        "main": [
          [
            {
              "node": "Microsoft Outlook19",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Microsoft Outlook19": {
        "main": [
          [
            {
              "node": "Merge1",
              "type": "main",
              "index": 2
            }
          ]
        ]
      },
      "Microsoft Outlook20": {
        "main": [
          [
            {
              "node": "If1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Microsoft Outlook21": {
        "main": [
          [
            {
              "node": "Merge1",
              "type": "main",
              "index": 6
            }
          ]
        ]
      },
      "Microsoft Outlook22": {
        "main": [
          [
            {
              "node": "If1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Microsoft Outlook23": {
        "main": [
          [
            {
              "node": "Filter1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Microsoft Outlook Move Message1": {
        "main": [
          [
            {
              "node": "Merge1",
              "type": "main",
              "index": 4
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Microsoft Outlook23",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Auto-Tag Blog Posts in WordPress with AI",
    "description": "Auto-Tag Blog Posts in WordPress with AI: Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
        "name": "Auto-fixing Output Parser",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model1",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser",
        "parameters": [
          "jsonSchemaExample"
        ]
      },
      {
        "type": "n8n-nodes-base.rssFeedReadTrigger",
        "name": "RSS Feed Trigger",
        "parameters": [
          "pollTimes"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Return article details",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split Out",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.splitInBatches",
        "name": "Loop over articles",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "SET initial record",
        "parameters": [
          "options",
          "includeOtherFields"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "GET WP tags",
        "parameters": [
          "url",
          "options",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "POST WP tags",
        "parameters": [
          "url",
          "method",
          "options",
          "sendQuery",
          "authentication",
          "queryParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "GET updated WP tags",
        "parameters": [
          "url",
          "options",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.filter",
        "name": "Keep matches",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Combine tag_ids",
        "parameters": [
          "options",
          "fieldsToAggregate"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Combine slugs",
        "parameters": [
          "options",
          "fieldsToAggregate"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "If",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "MOCK article",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Return missing tags",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.wordpress",
        "name": "Wordpress",
        "parameters": [
          "title",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.executeWorkflowTrigger",
        "name": "Demo Usage in Another Workflow",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.executeWorkflow",
        "name": "Auto-Tag Posts in WordPress",
        "parameters": [
          "mode",
          "options",
          "workflowId"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Generate tags for article",
        "parameters": [
          "text",
          "promptType",
          "hasOutputParser"
        ]
      }
    ],
    "connections": {
      "If": {
        "main": [
          [
            {
              "node": "GET updated WP tags",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Split Out",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Out": {
        "main": [
          [
            {
              "node": "POST WP tags",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "GET WP tags": {
        "main": [
          [
            {
              "node": "Combine slugs",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Keep matches": {
        "main": [
          [
            {
              "node": "Combine tag_ids",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "MOCK article": {
        "main": [
          [
            {
              "node": "Auto-Tag Posts in WordPress",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "POST WP tags": {
        "main": [
          [
            {
              "node": "GET updated WP tags",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Combine slugs": {
        "main": [
          [
            {
              "node": "Return missing tags",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Combine tag_ids": {
        "main": [
          [
            {
              "node": "Loop over articles",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "RSS Feed Trigger": {
        "main": [
          [
            {
              "node": "Generate tags for article",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Generate tags for article",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Loop over articles": {
        "main": [
          [],
          [
            {
              "node": "SET initial record",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Auto-fixing Output Parser",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "SET initial record": {
        "main": [
          [
            {
              "node": "GET WP tags",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "GET updated WP tags": {
        "main": [
          [
            {
              "node": "Keep matches",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Return missing tags": {
        "main": [
          [
            {
              "node": "If",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Return article details": {
        "main": [
          [
            {
              "node": "Wordpress",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Auto-fixing Output Parser",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Auto-fixing Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Generate tags for article",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Generate tags for article": {
        "main": [
          [
            {
              "node": "MOCK article",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Auto-Tag Posts in WordPress": {
        "main": [
          [
            {
              "node": "Return article details",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Demo Usage in Another Workflow": {
        "main": [
          [
            {
              "node": "Loop over articles",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": [
      {
        "id": "ijuVOmJpw5mCrzQX",
        "name": "marketing",
        "createdAt": "2025-01-28T16:42:03.029Z",
        "updatedAt": "2025-01-28T16:42:03.029Z"
      }
    ]
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model1",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model2",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.informationExtractor",
        "name": "Extract Voice Characteristics",
        "parameters": [
          "text",
          "options",
          "schemaType",
          "inputSchema"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Blog",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Article",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "Extract Article URLs",
        "parameters": [
          "options",
          "operation",
          "extractionValues"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split Out URLs",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.limit",
        "name": "Latest Articles",
        "parameters": [
          "maxItems"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "Extract Article Content",
        "parameters": [
          "options",
          "operation",
          "extractionValues"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Combine Articles",
        "parameters": [
          "options",
          "fieldsToAggregate"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Article Style & Brand Voice",
        "parameters": [
          "mode",
          "options",
          "combineBy"
        ]
      },
      {
        "type": "n8n-nodes-base.wordpress",
        "name": "Save as Draft",
        "parameters": [
          "title",
          "additionalFields"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Capture Existing Article Structure",
        "parameters": [
          "text",
          "messages",
          "promptType"
        ]
      },
      {
        "type": "n8n-nodes-base.markdown",
        "name": "Markdown",
        "parameters": [
          "html",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.informationExtractor",
        "name": "Content Generation Agent",
        "parameters": [
          "text",
          "options",
          "attributes"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "New Article Instruction",
        "parameters": [
          "options",
          "assignments"
        ]
      }
    ],
    "connections": {
      "Get Blog": {
        "main": [
          [
            {
              "node": "Extract Article URLs",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Markdown": {
        "main": [
          [
            {
              "node": "Combine Articles",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Article": {
        "main": [
          [
            {
              "node": "Extract Article Content",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Out URLs": {
        "main": [
          [
            {
              "node": "Latest Articles",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Latest Articles": {
        "main": [
          [
            {
              "node": "Get Article",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Combine Articles": {
        "main": [
          [
            {
              "node": "Capture Existing Article Structure",
              "type": "main",
              "index": 0
            },
            {
              "node": "Extract Voice Characteristics",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Extract Voice Characteristics",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Content Generation Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model2": {
        "ai_languageModel": [
          [
            {
              "node": "Capture Existing Article Structure",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Extract Article URLs": {
        "main": [
          [
            {
              "node": "Split Out URLs",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Article Content": {
        "main": [
          [
            {
              "node": "Markdown",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "New Article Instruction": {
        "main": [
          [
            {
              "node": "Content Generation Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Content Generation Agent": {
        "main": [
          [
            {
              "node": "Save as Draft",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Article Style & Brand Voice": {
        "main": [
          [
            {
              "node": "New Article Instruction",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Voice Characteristics": {
        "main": [
          [
            {
              "node": "Article Style & Brand Voice",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Get Blog",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Capture Existing Article Structure": {
        "main": [
          [
            {
              "node": "Article Style & Brand Voice",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Automate Content Generator for WordPress with DeepSeek R1",
    "description": "Automate Content Generator for WordPress with DeepSeek R1: Event-driven automation with AI processing outputting to googleSheets",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Get Ideas",
        "parameters": [
          "options",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set your prompt",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.wordpress",
        "name": "Create post on Wordpress",
        "parameters": [
          "title",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Upload image",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "contentType",
          "sendHeaders",
          "authentication",
          "headerParameters",
          "inputDataFieldName",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Set Image",
        "parameters": [
          "url",
          "method",
          "options",
          "sendQuery",
          "authentication",
          "queryParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Update Sheet",
        "parameters": [
          "columns",
          "options",
          "operation",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Generate article with DeepSeek",
        "parameters": [
          "modelId",
          "options",
          "messages"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Generate title with DeepSeek",
        "parameters": [
          "modelId",
          "options",
          "messages"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Generate Image with DALL-E",
        "parameters": [
          "prompt",
          "options",
          "resource"
        ]
      }
    ],
    "connections": {
      "Get Ideas": {
        "main": [
          [
            {
              "node": "Set your prompt",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set Image": {
        "main": [
          [
            {
              "node": "Update Sheet",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Upload image": {
        "main": [
          [
            {
              "node": "Set Image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set your prompt": {
        "main": [
          [
            {
              "node": "Generate article with DeepSeek",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Create post on Wordpress": {
        "main": [
          [
            {
              "node": "Generate Image with DALL-E",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate Image with DALL-E": {
        "main": [
          [
            {
              "node": "Upload image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate title with DeepSeek": {
        "main": [
          [
            {
              "node": "Create post on Wordpress",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate article with DeepSeek": {
        "main": [
          [
            {
              "node": "Generate title with DeepSeek",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Get Ideas",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Automate LinkedIn Posts with AI",
    "description": "Automate LinkedIn Posts with AI: Scheduled automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "Schedule Trigger",
        "parameters": [
          "rule"
        ]
      },
      {
        "type": "n8n-nodes-base.notion",
        "name": "Set post status to \"Done\"",
        "parameters": [
          "pageId",
          "options",
          "resource",
          "operation",
          "propertiesUi"
        ]
      },
      {
        "type": "n8n-nodes-base.linkedIn",
        "name": "Post on LinkedIn",
        "parameters": [
          "text",
          "person",
          "additionalFields",
          "shareMediaCategory"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Combine text+image",
        "parameters": [
          "mode",
          "options",
          "combinationMode"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Fetch image from post",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Reformat Post Text",
        "parameters": [
          "text",
          "prompt",
          "options",
          "resource",
          "assistantId"
        ]
      },
      {
        "type": "n8n-nodes-base.notion",
        "name": "get all content from post page",
        "parameters": [
          "blockId",
          "resource",
          "operation",
          "returnAll"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Pull together all text blocks + image",
        "parameters": [
          "options",
          "fieldsToAggregate"
        ]
      },
      {
        "type": "n8n-nodes-base.notion",
        "name": "query entries from Notion table for today",
        "parameters": [
          "filters",
          "options",
          "resource",
          "operation",
          "databaseId",
          "filterType"
        ]
      }
    ],
    "connections": {
      "Post on LinkedIn": {
        "main": [
          [
            {
              "node": "Set post status to \"Done\"",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Schedule Trigger": {
        "main": [
          [
            {
              "node": "query entries from Notion table for today",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Combine text+image": {
        "main": [
          [
            {
              "node": "Post on LinkedIn",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Reformat Post Text": {
        "main": [
          [
            {
              "node": "Combine text+image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch image from post": {
        "main": [
          [
            {
              "node": "Combine text+image",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "get all content from post page": {
        "main": [
          [
            {
              "node": "Pull together all text blocks + image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Pull together all text blocks + image": {
        "main": [
          [
            {
              "node": "Fetch image from post",
              "type": "main",
              "index": 0
            },
            {
              "node": "Reformat Post Text",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "query entries from Notion table for today": {
        "main": [
          [
            {
              "node": "get all content from post page",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Scheduled automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.gmail",
        "name": "Get Message Contents",
        "parameters": [
          "simple",
          "options",
          "messageId",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Simplify Emails",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.googleCalendar",
        "name": "Check For Upcoming Meetings",
        "parameters": [
          "limit",
          "options",
          "calendar",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model2",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.informationExtractor",
        "name": "Extract Attendee Information",
        "parameters": [
          "text",
          "options",
          "schemaType",
          "inputSchema"
        ]
      },
      {
        "type": "n8n-nodes-base.executeWorkflowTrigger",
        "name": "Execute Workflow Trigger",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.gmail",
        "name": "Get Last Correspondence",
        "parameters": [
          "limit",
          "filters",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model1",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model3",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.whatsApp",
        "name": "WhatsApp Business Cloud",
        "parameters": [
          "textBody",
          "operation",
          "phoneNumberId",
          "requestOptions",
          "additionalFields",
          "recipientPhoneNumber"
        ]
      },
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "Schedule Trigger",
        "parameters": [
          "rule"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Return LinkedIn Success",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Return LinkedIn Error",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Return Email Error",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Return Email Success",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set Route Email",
        "parameters": [
          "mode",
          "options",
          "jsonOutput"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set Route Linkedin",
        "parameters": [
          "mode",
          "options",
          "jsonOutput"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Router",
        "parameters": [
          "rules",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Return LinkedIn Error1",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Has Emails?",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Return Email Error1",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Sections To List",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set LinkedIn Cookie",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Attendees to List",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Merge Attendee with Summaries",
        "parameters": [
          "mode",
          "options",
          "jsonOutput"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Has Email Address?",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Has LinkedIn URL?",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.executeWorkflow",
        "name": "Get Correspondance",
        "parameters": [
          "mode",
          "options",
          "workflowId"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge",
        "parameters": [
          "mode",
          "options",
          "combineBy"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Aggregate Attendees",
        "parameters": [
          "options",
          "aggregate",
          "destinationFieldName"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Activities To Array",
        "parameters": [
          "options",
          "aggregate",
          "destinationFieldName"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "Extract Profile Metadata",
        "parameters": [
          "options",
          "operation",
          "dataPropertyName",
          "extractionValues"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Activities To List",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "APIFY Web Scraper",
        "parameters": [
          "url",
          "options",
          "jsonBody",
          "sendBody",
          "specifyBody",
          "authentication",
          "genericAuthType"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "Get Activity Details",
        "parameters": [
          "options",
          "operation",
          "dataPropertyName",
          "extractionValues"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "Get Sections",
        "parameters": [
          "options",
          "operation",
          "extractionValues"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Get About Section",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Get Activity Section",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "Extract Activities",
        "parameters": [
          "options",
          "operation",
          "dataPropertyName",
          "extractionValues"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge1",
        "parameters": [
          "mode",
          "options",
          "combineBy"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Is Scrape Successful?",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "Extract About",
        "parameters": [
          "options",
          "operation",
          "dataPropertyName",
          "extractionValues"
        ]
      },
      {
        "type": "n8n-nodes-base.executeWorkflow",
        "name": "Get LinkedIn Profile & Activity",
        "parameters": [
          "mode",
          "options",
          "workflowId"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Correspondance Recap Agent",
        "parameters": [
          "text",
          "messages",
          "promptType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Attendee Research Agent",
        "parameters": [
          "text",
          "messages",
          "promptType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "LinkedIn Summarizer Agent",
        "parameters": [
          "text",
          "messages",
          "promptType"
        ]
      }
    ],
    "connections": {
      "Merge": {
        "main": [
          [
            {
              "node": "Merge Attendee with Summaries",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge1": {
        "main": [
          [
            {
              "node": "LinkedIn Summarizer Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Router": {
        "main": [
          [
            {
              "node": "Has Email Address?",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Has LinkedIn URL?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Has Emails?": {
        "main": [
          [
            {
              "node": "Get Message Contents",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Return Email Error",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Sections": {
        "main": [
          [
            {
              "node": "Get About Section",
              "type": "main",
              "index": 0
            },
            {
              "node": "Get Activity Section",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract About": {
        "main": [
          [
            {
              "node": "Merge1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set Route Email": {
        "main": [
          [
            {
              "node": "Get Correspondance",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Simplify Emails": {
        "main": [
          [
            {
              "node": "Correspondance Recap Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Schedule Trigger": {
        "main": [
          [
            {
              "node": "Check For Upcoming Meetings",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Sections To List": {
        "main": [
          [
            {
              "node": "Get Sections",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "APIFY Web Scraper": {
        "main": [
          [
            {
              "node": "Is Scrape Successful?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Attendees to List": {
        "main": [
          [
            {
              "node": "Set Route Email",
              "type": "main",
              "index": 0
            },
            {
              "node": "Set Route Linkedin",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get About Section": {
        "main": [
          [
            {
              "node": "Extract About",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Has LinkedIn URL?": {
        "main": [
          [
            {
              "node": "Set LinkedIn Cookie",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Return LinkedIn Error1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Correspondance Recap Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Activities To List": {
        "main": [
          [
            {
              "node": "Get Activity Details",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Activities": {
        "main": [
          [
            {
              "node": "Activities To List",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Correspondance": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Has Email Address?": {
        "main": [
          [
            {
              "node": "Get Last Correspondence",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Return Email Error1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "LinkedIn Summarizer Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model2": {
        "ai_languageModel": [
          [
            {
              "node": "Extract Attendee Information",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model3": {
        "ai_languageModel": [
          [
            {
              "node": "Attendee Research Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Set Route Linkedin": {
        "main": [
          [
            {
              "node": "Get LinkedIn Profile & Activity",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Activities To Array": {
        "main": [
          [
            {
              "node": "Merge1",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Aggregate Attendees": {
        "main": [
          [
            {
              "node": "Attendee Research Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set LinkedIn Cookie": {
        "main": [
          [
            {
              "node": "APIFY Web Scraper",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Activity Details": {
        "main": [
          [
            {
              "node": "Activities To Array",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Activity Section": {
        "main": [
          [
            {
              "node": "Extract Activities",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Message Contents": {
        "main": [
          [
            {
              "node": "Simplify Emails",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Is Scrape Successful?": {
        "main": [
          [
            {
              "node": "Extract Profile Metadata",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Return LinkedIn Error",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Attendee Research Agent": {
        "main": [
          [
            {
              "node": "WhatsApp Business Cloud",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Last Correspondence": {
        "main": [
          [
            {
              "node": "Has Emails?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Execute Workflow Trigger": {
        "main": [
          [
            {
              "node": "Router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Profile Metadata": {
        "main": [
          [
            {
              "node": "Sections To List",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "LinkedIn Summarizer Agent": {
        "main": [
          [
            {
              "node": "Return LinkedIn Success",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Correspondance Recap Agent": {
        "main": [
          [
            {
              "node": "Return Email Success",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check For Upcoming Meetings": {
        "main": [
          [
            {
              "node": "Extract Attendee Information",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Attendee Information": {
        "main": [
          [
            {
              "node": "Attendees to List",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge Attendee with Summaries": {
        "main": [
          [
            {
              "node": "Aggregate Attendees",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get LinkedIn Profile & Activity": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.telegramTrigger",
        "name": "Get the Image",
        "parameters": [
          "updates",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.telegram",
        "name": "Send Content for the Analyzed image",
        "parameters": [
          "text",
          "chatId",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.telegram",
        "name": "Update Telegram Error Message",
        "parameters": [
          "text",
          "chatId",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.wait",
        "name": "Wait",
        "parameters": [
          "amount"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Analyze image",
        "parameters": [
          "options",
          "resource",
          "inputType",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Switch ( image or not )",
        "parameters": [
          "rules",
          "options"
        ]
      }
    ],
    "connections": {
      "Wait": {
        "main": [
          [
            {
              "node": "Update Telegram Error Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Analyze image": {
        "main": [
          [
            {
              "node": "Send Content for the Analyzed image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get the Image": {
        "main": [
          [
            {
              "node": "Switch ( image or not )",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Switch ( image or not )": {
        "main": [
          [
            {
              "node": "Analyze image",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Wait",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "BambooHR AI-Powered Company Policies and Benefits Chatbot",
    "description": "BambooHR AI-Powered Company Policies and Benefits Chatbot: Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "name": "Default Data Loader",
        "parameters": [
          "options",
          "dataType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
        "name": "Recursive Character Text Splitter",
        "parameters": [
          "options",
          "chunkOverlap"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "name": "Window Buffer Memory",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
        "name": "Vector Store Tool",
        "parameters": [
          "name",
          "topK",
          "description"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model1",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI1",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
        "name": "Employee Lookup Tool",
        "parameters": [
          "name",
          "workflowId",
          "description",
          "jsonSchemaExample",
          "specifyInputSchema"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model2",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model3",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model4",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
        "name": "Auto-fixing Output Parser",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model5",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser",
        "parameters": [
          "jsonSchemaExample"
        ]
      },
      {
        "type": "n8n-nodes-base.bambooHr",
        "name": "GET all files",
        "parameters": [
          "resource",
          "operation",
          "returnAll",
          "simplifyOutput"
        ]
      },
      {
        "type": "n8n-nodes-base.filter",
        "name": "Filter out files from undesired categories",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split out individual files",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.filter",
        "name": "Filter out non-pdf files",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.bambooHr",
        "name": "Download file from BambooHR",
        "parameters": [
          "fileId",
          "resource",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
        "name": "Supabase Vector Store",
        "parameters": [
          "mode",
          "options",
          "tableName"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chatTrigger",
        "name": "Employee initiates a conversation",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
        "name": "Supabase Vector Store Retrieval",
        "parameters": [
          "options",
          "tableName"
        ]
      },
      {
        "type": "n8n-nodes-base.executeWorkflowTrigger",
        "name": "AI-Powered HR Benefits and Company Policies Chatbot",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textClassifier",
        "name": "Text Classifier",
        "parameters": [
          "options",
          "inputText",
          "categories"
        ]
      },
      {
        "type": "n8n-nodes-base.bambooHr",
        "name": "GET all employees",
        "parameters": [
          "operation",
          "returnAll"
        ]
      },
      {
        "type": "n8n-nodes-base.filter",
        "name": "Filter out other employees",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Stringify employee record for response",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.bambooHr",
        "name": "GET all employees (second path)",
        "parameters": [
          "operation",
          "returnAll"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Extract departments",
        "parameters": [
          "options",
          "fieldsToAggregate"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Ensure uniqueness in department list",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.informationExtractor",
        "name": "Extract department",
        "parameters": [
          "text",
          "options",
          "attributes"
        ]
      },
      {
        "type": "n8n-nodes-base.bambooHr",
        "name": "Retrieve all employees",
        "parameters": [
          "operation",
          "returnAll"
        ]
      },
      {
        "type": "n8n-nodes-base.filter",
        "name": "Filter out other departments",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Extract relevant employee fields",
        "parameters": [
          "include",
          "options",
          "aggregate",
          "fieldsToInclude",
          "destinationFieldName"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Identify most senior employee",
        "parameters": [
          "text",
          "promptType",
          "hasOutputParser"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Format name for response",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "HR AI Agent",
        "parameters": [
          "options"
        ]
      }
    ],
    "connections": {
      "GET all files": {
        "main": [
          [
            {
              "node": "Filter out files from undesired categories",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Text Classifier": {
        "main": [
          [
            {
              "node": "GET all employees",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "GET all employees (second path)",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI": {
        "ai_embedding": [
          [
            {
              "node": "Supabase Vector Store",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "GET all employees": {
        "main": [
          [
            {
              "node": "Filter out other employees",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "HR AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Vector Store Tool": {
        "ai_tool": [
          [
            {
              "node": "HR AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI1": {
        "ai_embedding": [
          [
            {
              "node": "Supabase Vector Store Retrieval",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Extract department": {
        "main": [
          [
            {
              "node": "Retrieve all employees",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Vector Store Tool",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model2": {
        "ai_languageModel": [
          [
            {
              "node": "Text Classifier",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model3": {
        "ai_languageModel": [
          [
            {
              "node": "Extract department",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model4": {
        "ai_languageModel": [
          [
            {
              "node": "Identify most senior employee",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model5": {
        "ai_languageModel": [
          [
            {
              "node": "Auto-fixing Output Parser",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Default Data Loader": {
        "ai_document": [
          [
            {
              "node": "Supabase Vector Store",
              "type": "ai_document",
              "index": 0
            }
          ]
        ]
      },
      "Extract departments": {
        "main": [
          [
            {
              "node": "Ensure uniqueness in department list",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Employee Lookup Tool": {
        "ai_tool": [
          [
            {
              "node": "HR AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Window Buffer Memory": {
        "ai_memory": [
          [
            {
              "node": "HR AI Agent",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "Retrieve all employees": {
        "main": [
          [
            {
              "node": "Filter out other departments",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Filter out non-pdf files": {
        "main": [
          [
            {
              "node": "Download file from BambooHR",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Auto-fixing Output Parser",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Auto-fixing Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Identify most senior employee",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Filter out other employees": {
        "main": [
          [
            {
              "node": "Stringify employee record for response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split out individual files": {
        "main": [
          [
            {
              "node": "Filter out non-pdf files",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Download file from BambooHR": {
        "main": [
          [
            {
              "node": "Supabase Vector Store",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Filter out other departments": {
        "main": [
          [
            {
              "node": "Extract relevant employee fields",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Identify most senior employee": {
        "main": [
          [
            {
              "node": "Format name for response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "GET all employees (second path)": {
        "main": [
          [
            {
              "node": "Extract departments",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Supabase Vector Store Retrieval": {
        "ai_vectorStore": [
          [
            {
              "node": "Vector Store Tool",
              "type": "ai_vectorStore",
              "index": 0
            }
          ]
        ]
      },
      "Extract relevant employee fields": {
        "main": [
          [
            {
              "node": "Identify most senior employee",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Employee initiates a conversation": {
        "main": [
          [
            {
              "node": "HR AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Recursive Character Text Splitter": {
        "ai_textSplitter": [
          [
            {
              "node": "Default Data Loader",
              "type": "ai_textSplitter",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "GET all files",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Ensure uniqueness in department list": {
        "main": [
          [
            {
              "node": "Extract department",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Filter out files from undesired categories": {
        "main": [
          [
            {
              "node": "Split out individual files",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI-Powered HR Benefits and Company Policies Chatbot": {
        "main": [
          [
            {
              "node": "Text Classifier",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.gmailTrigger",
        "name": "Gmail Trigger",
        "parameters": [
          "filters",
          "pollTimes"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model1",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.gmailTool",
        "name": "Gmail - read labels",
        "parameters": [
          "resource",
          "returnAll",
          "descriptionType",
          "toolDescription"
        ]
      },
      {
        "type": "n8n-nodes-base.gmailTool",
        "name": "Gmail - get message",
        "parameters": [
          "messageId",
          "operation",
          "descriptionType",
          "toolDescription"
        ]
      },
      {
        "type": "n8n-nodes-base.gmailTool",
        "name": "Gmail - add label to message",
        "parameters": [
          "labelIds",
          "messageId",
          "operation",
          "descriptionType",
          "toolDescription"
        ]
      },
      {
        "type": "n8n-nodes-base.gmailTool",
        "name": "Gmail - create label",
        "parameters": [
          "name",
          "options",
          "resource",
          "operation",
          "descriptionType",
          "toolDescription"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "Gmail labelling agent",
        "parameters": [
          "text",
          "options",
          "promptType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "name": "Window Buffer Memory",
        "parameters": [
          "sessionKey",
          "sessionIdType"
        ]
      },
      {
        "type": "n8n-nodes-base.wait",
        "name": "Wait",
        "parameters": [
          "amount"
        ]
      }
    ],
    "connections": {
      "Wait": {
        "main": [
          [
            {
              "node": "Gmail labelling agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Gmail Trigger": {
        "main": [
          [
            {
              "node": "Wait",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Gmail labelling agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Gmail - get message": {
        "ai_tool": [
          [
            {
              "node": "Gmail labelling agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Gmail - read labels": {
        "ai_tool": [
          [
            {
              "node": "Gmail labelling agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Gmail - create label": {
        "ai_tool": [
          [
            {
              "node": "Gmail labelling agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Window Buffer Memory": {
        "ai_memory": [
          [
            {
              "node": "Gmail labelling agent",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "Gmail - add label to message": {
        "ai_tool": [
          [
            {
              "node": "Gmail labelling agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Build an OpenAI Assistant with Google Drive Integration",
    "description": "Build an OpenAI Assistant with Google Drive Integration: Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.googleDrive",
        "name": "Google Drive",
        "parameters": [
          "fileId",
          "options",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chatTrigger",
        "name": "When chat message received",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "name": "Window Buffer Memory",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "OpenAI",
        "parameters": [
          "name",
          "modelId",
          "options",
          "resource",
          "operation",
          "description",
          "instructions"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "OpenAI2",
        "parameters": [
          "options",
          "resource",
          "binaryPropertyName"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "OpenAI1",
        "parameters": [
          "options",
          "resource",
          "operation",
          "assistantId"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "OpenAI Assistent",
        "parameters": [
          "options",
          "resource",
          "assistantId"
        ]
      }
    ],
    "connections": {
      "OpenAI2": {
        "main": [
          [
            {
              "node": "OpenAI1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Drive": {
        "main": [
          [
            {
              "node": "OpenAI2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Window Buffer Memory": {
        "ai_memory": [
          [
            {
              "node": "OpenAI Assistent",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "When chat message received": {
        "main": [
          [
            {
              "node": "OpenAI Assistent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "OpenAI",
              "type": "main",
              "index": 0
            },
            {
              "node": "Google Drive",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": [
      {
        "id": "2VG6RbmUdJ2VZbrj",
        "name": "Google Drive",
        "createdAt": "2024-12-04T16:50:56.177Z",
        "updatedAt": "2024-12-04T16:50:56.177Z"
      },
      {
        "id": "paTcf5QZDJsC2vKY",
        "name": "OpenAI",
        "createdAt": "2024-12-04T16:52:10.768Z",
        "updatedAt": "2024-12-04T16:52:10.768Z"
      }
    ]
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.whatsAppTrigger",
        "name": "WhatsApp Trigger",
        "parameters": [
          "updates"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "name": "Window Buffer Memory",
        "parameters": [
          "sessionKey",
          "sessionIdType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
        "name": "Vector Store Tool",
        "parameters": [
          "name",
          "description"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model1",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI1",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "name": "Default Data Loader",
        "parameters": [
          "options",
          "jsonData",
          "jsonMode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
        "name": "Recursive Character Text Splitter",
        "parameters": [
          "options",
          "chunkSize",
          "chunkOverlap"
        ]
      },
      {
        "type": "n8n-nodes-base.extractFromFile",
        "name": "Extract from File",
        "parameters": [
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "get Product Brochure",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.whatsApp",
        "name": "Reply To User",
        "parameters": [
          "textBody",
          "operation",
          "phoneNumberId",
          "requestOptions",
          "additionalFields",
          "recipientPhoneNumber"
        ]
      },
      {
        "type": "n8n-nodes-base.whatsApp",
        "name": "Reply To User1",
        "parameters": [
          "textBody",
          "operation",
          "phoneNumberId",
          "requestOptions",
          "additionalFields",
          "recipientPhoneNumber"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStoreInMemory",
        "name": "Product Catalogue",
        "parameters": [
          "memoryKey"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStoreInMemory",
        "name": "Create Product Catalogue",
        "parameters": [
          "mode",
          "memoryKey",
          "clearStore"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Handle Message Types",
        "parameters": [
          "rules",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "AI Sales Agent",
        "parameters": [
          "text",
          "options",
          "promptType"
        ]
      }
    ],
    "connections": {
      "AI Sales Agent": {
        "main": [
          [
            {
              "node": "Reply To User",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "WhatsApp Trigger": {
        "main": [
          [
            {
              "node": "Handle Message Types",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI": {
        "ai_embedding": [
          [
            {
              "node": "Product Catalogue",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Extract from File": {
        "main": [
          [
            {
              "node": "Create Product Catalogue",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Sales Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Product Catalogue": {
        "ai_vectorStore": [
          [
            {
              "node": "Vector Store Tool",
              "type": "ai_vectorStore",
              "index": 0
            }
          ]
        ]
      },
      "Vector Store Tool": {
        "ai_tool": [
          [
            {
              "node": "AI Sales Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI1": {
        "ai_embedding": [
          [
            {
              "node": "Create Product Catalogue",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Vector Store Tool",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Default Data Loader": {
        "ai_document": [
          [
            {
              "node": "Create Product Catalogue",
              "type": "ai_document",
              "index": 0
            }
          ]
        ]
      },
      "Handle Message Types": {
        "main": [
          [
            {
              "node": "AI Sales Agent",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Reply To User1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Window Buffer Memory": {
        "ai_memory": [
          [
            {
              "node": "AI Sales Agent",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "get Product Brochure": {
        "main": [
          [
            {
              "node": "Extract from File",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Recursive Character Text Splitter": {
        "ai_textSplitter": [
          [
            {
              "node": "Default Data Loader",
              "type": "ai_textSplitter",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "get Product Brochure",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.whatsAppTrigger",
        "name": "WhatsApp Trigger",
        "parameters": [
          "updates"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "name": "Window Buffer Memory",
        "parameters": [
          "sessionKey",
          "sessionIdType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
        "name": "Vector Store Tool",
        "parameters": [
          "name",
          "description"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model1",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI1",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "name": "Default Data Loader",
        "parameters": [
          "options",
          "jsonData",
          "jsonMode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
        "name": "Recursive Character Text Splitter",
        "parameters": [
          "options",
          "chunkSize",
          "chunkOverlap"
        ]
      },
      {
        "type": "n8n-nodes-base.extractFromFile",
        "name": "Extract from File",
        "parameters": [
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "get Product Brochure",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.whatsApp",
        "name": "Reply To User",
        "parameters": [
          "textBody",
          "operation",
          "phoneNumberId",
          "requestOptions",
          "additionalFields",
          "recipientPhoneNumber"
        ]
      },
      {
        "type": "n8n-nodes-base.whatsApp",
        "name": "Reply To User1",
        "parameters": [
          "textBody",
          "operation",
          "phoneNumberId",
          "requestOptions",
          "additionalFields",
          "recipientPhoneNumber"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStoreInMemory",
        "name": "Product Catalogue",
        "parameters": [
          "memoryKey"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStoreInMemory",
        "name": "Create Product Catalogue",
        "parameters": [
          "mode",
          "memoryKey",
          "clearStore"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Handle Message Types",
        "parameters": [
          "rules",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "AI Sales Agent",
        "parameters": [
          "text",
          "options",
          "promptType"
        ]
      }
    ],
    "connections": {
      "AI Sales Agent": {
        "main": [
          [
            {
              "node": "Reply To User",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "WhatsApp Trigger": {
        "main": [
          [
            {
              "node": "Handle Message Types",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI": {
        "ai_embedding": [
          [
            {
              "node": "Product Catalogue",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Extract from File": {
        "main": [
          [
            {
              "node": "Create Product Catalogue",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Sales Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Product Catalogue": {
        "ai_vectorStore": [
          [
            {
              "node": "Vector Store Tool",
              "type": "ai_vectorStore",
              "index": 0
            }
          ]
        ]
      },
      "Vector Store Tool": {
        "ai_tool": [
          [
            {
              "node": "AI Sales Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI1": {
        "ai_embedding": [
          [
            {
              "node": "Create Product Catalogue",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Vector Store Tool",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Default Data Loader": {
        "ai_document": [
          [
            {
              "node": "Create Product Catalogue",
              "type": "ai_document",
              "index": 0
            }
          ]
        ]
      },
      "Handle Message Types": {
        "main": [
          [
            {
              "node": "AI Sales Agent",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Reply To User1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Window Buffer Memory": {
        "ai_memory": [
          [
            {
              "node": "AI Sales Agent",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "get Product Brochure": {
        "main": [
          [
            {
              "node": "Extract from File",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Recursive Character Text Splitter": {
        "ai_textSplitter": [
          [
            {
              "node": "Default Data Loader",
              "type": "ai_textSplitter",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "get Product Brochure",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.telegramTrigger",
        "name": "Telegram Trigger",
        "parameters": [
          "updates",
          "additionalFields"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "AI Agent",
        "parameters": [
          "text",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.telegram",
        "name": "Telegram",
        "parameters": [
          "text",
          "chatId",
          "additionalFields"
        ]
      }
    ],
    "connections": {
      "AI Agent": {
        "main": [
          [
            {
              "node": "Telegram",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Telegram Trigger": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing outputting to respondToWebhook, webhook, googleSheets",
    "nodes": [
      {
        "type": "n8n-nodes-base.if",
        "name": "Stop Interview?",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Generate Row",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Generate Row1",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryManager",
        "name": "Clear For Next Interview",
        "parameters": [
          "mode",
          "deleteMode"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Send Reply To Agent",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.formTrigger",
        "name": "Start Interview",
        "parameters": [
          "options",
          "formTitle",
          "formFields",
          "responseMode",
          "formDescription"
        ]
      },
      {
        "type": "n8n-nodes-base.form",
        "name": "Get Answer",
        "parameters": [
          "options",
          "formFields"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set Interview Topic",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.crypto",
        "name": "UUID",
        "parameters": [
          "action"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Generate Row2",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.redis",
        "name": "Create Session",
        "parameters": [
          "key",
          "ttl",
          "value",
          "expire",
          "keyType",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.redis",
        "name": "Update Session",
        "parameters": [
          "list",
          "tail",
          "operation",
          "messageData"
        ]
      },
      {
        "type": "n8n-nodes-base.redis",
        "name": "Update Session1",
        "parameters": [
          "list",
          "tail",
          "operation",
          "messageData"
        ]
      },
      {
        "type": "n8n-nodes-base.redis",
        "name": "Update Session2",
        "parameters": [
          "list",
          "tail",
          "operation",
          "messageData"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Valid Session?",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.respondToWebhook",
        "name": "Respond to Webhook",
        "parameters": [
          "options",
          "respondWith",
          "responseBody"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "name": "Window Buffer Memory2",
        "parameters": [
          "sessionKey",
          "sessionIdType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "name": "Window Buffer Memory",
        "parameters": [
          "sessionKey",
          "sessionIdType"
        ]
      },
      {
        "type": "n8n-nodes-base.form",
        "name": "Redirect to Completion Screen",
        "parameters": [
          "operation",
          "redirectUrl",
          "respondWith"
        ]
      },
      {
        "type": "n8n-nodes-base.webhook",
        "name": "Webhook",
        "parameters": [
          "path",
          "options",
          "responseMode"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "404 Not Found",
        "parameters": [
          "html"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "AI Researcher",
        "parameters": [
          "text",
          "options",
          "promptType",
          "hasOutputParser"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Parse Response",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
        "name": "Groq Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "Show Transcript",
        "parameters": [
          "html"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Save to Google Sheet",
        "parameters": [
          "columns",
          "options",
          "operation",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Session to List",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Messages To JSON",
        "parameters": [
          "mode",
          "options",
          "jsonOutput"
        ]
      },
      {
        "type": "n8n-nodes-base.redis",
        "name": "Query By Session",
        "parameters": [
          "key",
          "options",
          "operation",
          "propertyName"
        ]
      },
      {
        "type": "n8n-nodes-base.redis",
        "name": "Get Session",
        "parameters": [
          "key",
          "keyType",
          "options",
          "operation",
          "propertyName"
        ]
      }
    ],
    "connections": {
      "UUID": {
        "main": [
          [
            {
              "node": "Create Session",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Webhook": {
        "main": [
          [
            {
              "node": "Query By Session",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Answer": {
        "main": [
          [
            {
              "node": "Generate Row",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Session": {
        "main": [
          [
            {
              "node": "Session to List",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate Row": {
        "main": [
          [
            {
              "node": "Update Session1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "404 Not Found": {
        "main": [
          [
            {
              "node": "Respond to Webhook",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI Researcher": {
        "main": [
          [
            {
              "node": "Parse Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate Row1": {
        "main": [
          [
            {
              "node": "Update Session2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate Row2": {
        "main": [
          [
            {
              "node": "Update Session",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Create Session": {
        "main": [
          [
            {
              "node": "Generate Row2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Parse Response": {
        "main": [
          [
            {
              "node": "Stop Interview?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Update Session": {
        "main": [
          [
            {
              "node": "Set Interview Topic",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Valid Session?": {
        "main": [
          [
            {
              "node": "Show Transcript",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "404 Not Found",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Groq Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Researcher",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Session to List": {
        "main": [
          [
            {
              "node": "Messages To JSON",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Show Transcript": {
        "main": [
          [
            {
              "node": "Respond to Webhook",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Start Interview": {
        "main": [
          [
            {
              "node": "UUID",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Stop Interview?": {
        "main": [
          [
            {
              "node": "Generate Row1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Get Answer",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Update Session1": {
        "main": [
          [
            {
              "node": "Send Reply To Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Update Session2": {
        "main": [
          [
            {
              "node": "Clear For Next Interview",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Messages To JSON": {
        "main": [
          [
            {
              "node": "Save to Google Sheet",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Query By Session": {
        "main": [
          [
            {
              "node": "Valid Session?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Send Reply To Agent": {
        "main": [
          [
            {
              "node": "AI Researcher",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set Interview Topic": {
        "main": [
          [
            {
              "node": "AI Researcher",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Window Buffer Memory": {
        "ai_memory": [
          [
            {
              "node": "Clear For Next Interview",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "Window Buffer Memory2": {
        "ai_memory": [
          [
            {
              "node": "AI Researcher",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "Clear For Next Interview": {
        "main": [
          [
            {
              "node": "Redirect to Completion Screen",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Redirect to Completion Screen": {
        "main": [
          [
            {
              "node": "Get Session",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "On clicking 'execute'",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Fetch new followers",
        "parameters": [
          "url",
          "options",
          "authentication"
        ]
      },
      {
        "type": "n8n-nodes-base.itemLists",
        "name": "Item Lists",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.function",
        "name": "Function",
        "parameters": [
          "functionCode"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge",
        "parameters": [
          "mode"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Fetching images",
        "parameters": [
          "url",
          "options",
          "responseFormat",
          "dataPropertyName"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Fetch bg",
        "parameters": [
          "url",
          "options",
          "responseFormat",
          "dataPropertyName"
        ]
      },
      {
        "type": "n8n-nodes-base.editImage",
        "name": "Resize",
        "parameters": [
          "width",
          "height",
          "options",
          "operation",
          "dataPropertyName"
        ]
      },
      {
        "type": "n8n-nodes-base.editImage",
        "name": "Crop",
        "parameters": [
          "options",
          "operation",
          "operations",
          "dataPropertyName"
        ]
      },
      {
        "type": "n8n-nodes-base.editImage",
        "name": "Edit Image",
        "parameters": [
          "options",
          "operation",
          "operations",
          "dataPropertyName"
        ]
      },
      {
        "type": "n8n-nodes-base.editImage",
        "name": "Resize1",
        "parameters": [
          "width",
          "height",
          "options",
          "operation",
          "dataPropertyName"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "HTTP Request",
        "parameters": [
          "url",
          "options",
          "requestMethod",
          "authentication",
          "jsonParameters",
          "sendBinaryData",
          "binaryPropertyName"
        ]
      }
    ],
    "connections": {
      "Crop": {
        "main": [
          [
            {
              "node": "Resize1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge": {
        "main": [
          [
            {
              "node": "Edit Image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Resize": {
        "main": [
          [
            {
              "node": "Crop",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Resize1": {
        "main": [
          [
            {
              "node": "Function",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch bg": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Function": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Edit Image": {
        "main": [
          [
            {
              "node": "HTTP Request",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Item Lists": {
        "main": [
          [
            {
              "node": "Fetching images",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetching images": {
        "main": [
          [
            {
              "node": "Resize",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch new followers": {
        "main": [
          [
            {
              "node": "Item Lists",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "Fetch new followers",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Create, update, and get a profile in Humantic AI",
    "description": "Create, update, and get a profile in Humantic AI: Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "On clicking 'execute'",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.humanticAi",
        "name": "Humantic AI",
        "parameters": [
          "userId"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "HTTP Request",
        "parameters": [
          "url",
          "options",
          "responseFormat"
        ]
      },
      {
        "type": "n8n-nodes-base.humanticAi",
        "name": "Humantic AI1",
        "parameters": [
          "userId",
          "operation",
          "sendResume"
        ]
      },
      {
        "type": "n8n-nodes-base.humanticAi",
        "name": "Humantic AI2",
        "parameters": [
          "userId",
          "options",
          "operation"
        ]
      }
    ],
    "connections": {
      "Humantic AI": {
        "main": [
          [
            {
              "node": "HTTP Request",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "HTTP Request": {
        "main": [
          [
            {
              "node": "Humantic AI1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Humantic AI1": {
        "main": [
          [
            {
              "node": "Humantic AI2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "Humantic AI",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Scheduled automation with AI processing outputting to slack",
    "nodes": [
      {
        "type": "n8n-nodes-base.slack",
        "name": "Slack",
        "parameters": [
          "limit",
          "query",
          "options",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser",
        "parameters": [
          "jsonSchema"
        ]
      },
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "Schedule Trigger",
        "parameters": [
          "rule"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Get Values",
        "parameters": [
          "mode",
          "options",
          "jsonOutput"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Create New Ticket?",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.linear",
        "name": "Get Existing Issues",
        "parameters": [
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Generate Ticket Using ChatGPT",
        "parameters": [
          "text",
          "promptType",
          "hasOutputParser"
        ]
      },
      {
        "type": "n8n-nodes-base.linear",
        "name": "Create Ticket",
        "parameters": [
          "title",
          "teamId",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge",
        "parameters": [
          "mode",
          "options",
          "combinationMode"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Get Hashes Only",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Collect Descriptions",
        "parameters": [
          "options",
          "fieldsToAggregate"
        ]
      }
    ],
    "connections": {
      "Merge": {
        "main": [
          [
            {
              "node": "Create New Ticket?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Slack": {
        "main": [
          [
            {
              "node": "Get Values",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Values": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            },
            {
              "node": "Get Existing Issues",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Hashes Only": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Schedule Trigger": {
        "main": [
          [
            {
              "node": "Slack",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Generate Ticket Using ChatGPT",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Create New Ticket?": {
        "main": [
          [
            {
              "node": "Generate Ticket Using ChatGPT",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Existing Issues": {
        "main": [
          [
            {
              "node": "Collect Descriptions",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Collect Descriptions": {
        "main": [
          [
            {
              "node": "Get Hashes Only",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Generate Ticket Using ChatGPT",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Generate Ticket Using ChatGPT": {
        "main": [
          [
            {
              "node": "Create Ticket",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation",
    "nodes": [
      {
        "type": "n8n-nodes-base.extractFromFile",
        "name": "Extract Document PDF",
        "parameters": [
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Download File",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "OpenAI - Analyze CV",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "specifyBody",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set Variables",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Parsed JSON",
        "parameters": [
          "options",
          "assignments"
        ]
      }
    ],
    "connections": {
      "Download File": {
        "main": [
          [
            {
              "node": "Extract Document PDF",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set Variables": {
        "main": [
          [
            {
              "node": "Download File",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI - Analyze CV": {
        "main": [
          [
            {
              "node": "Parsed JSON",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Document PDF": {
        "main": [
          [
            {
              "node": "OpenAI - Analyze CV",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Set Variables",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Discord AI bot",
    "description": "Discord AI bot: Event-driven automation with AI processing outputting to webhook",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking \"Execute Workflow\"",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.webhook",
        "name": "Webhook",
        "parameters": [
          "path",
          "options",
          "httpMethod"
        ]
      },
      {
        "type": "n8n-nodes-base.noOp",
        "name": "No Operation, do nothing",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.openAi",
        "name": "Analyze user request",
        "parameters": [
          "model",
          "prompt",
          "options",
          "resource"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Select category",
        "parameters": [
          "rules",
          "value1",
          "dataType",
          "fallbackOutput"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Parse JSON",
        "parameters": [
          "values",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.discord",
        "name": "User Success Dept",
        "parameters": [
          "text",
          "options",
          "webhookUri"
        ]
      },
      {
        "type": "n8n-nodes-base.discord",
        "name": "IT Dept",
        "parameters": [
          "text",
          "options",
          "webhookUri"
        ]
      },
      {
        "type": "n8n-nodes-base.discord",
        "name": "Helpdesk",
        "parameters": [
          "text",
          "options",
          "webhookUri"
        ]
      }
    ],
    "connections": {
      "Webhook": {
        "main": [
          [
            {
              "node": "Analyze user request",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Parse JSON": {
        "main": [
          [
            {
              "node": "Select category",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Select category": {
        "main": [
          [
            {
              "node": "User Success Dept",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "IT Dept",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Helpdesk",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "No Operation, do nothing",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Analyze user request": {
        "main": [
          [
            {
              "node": "Parse JSON",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking \"Execute Workflow\"": {
        "main": [
          [
            {
              "node": "Analyze user request",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Effortless Email Management with AI",
    "description": "Effortless Email Management with AI: Event-driven automation with AI processing outputting to emailSend, emailReadImap",
    "nodes": [
      {
        "type": "n8n-nodes-base.emailReadImap",
        "name": "Email Trigger (IMAP)",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.markdown",
        "name": "Markdown",
        "parameters": [
          "html",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.emailSend",
        "name": "Send Email",
        "parameters": [
          "html",
          "options",
          "subject",
          "toEmail",
          "fromEmail"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
        "name": "Qdrant Vector Store",
        "parameters": [
          "mode",
          "options",
          "toolName",
          "toolDescription",
          "qdrantCollection",
          "includeDocumentMetadata"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainSummarization",
        "name": "Email Summarization Chain",
        "parameters": [
          "options",
          "operationMode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "Write email",
        "parameters": [
          "text",
          "options",
          "promptType",
          "hasOutputParser"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.gmail",
        "name": "Gmail",
        "parameters": [
          "sendTo",
          "message",
          "options",
          "subject",
          "operation",
          "responseType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textClassifier",
        "name": "Text Classifier",
        "parameters": [
          "options",
          "inputText",
          "categories"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Edit Fields",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Create collection",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "sendHeaders",
          "specifyBody",
          "authentication",
          "genericAuthType",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Refresh collection",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "sendHeaders",
          "specifyBody",
          "authentication",
          "genericAuthType",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.googleDrive",
        "name": "Get folder",
        "parameters": [
          "filter",
          "options",
          "resource"
        ]
      },
      {
        "type": "n8n-nodes-base.googleDrive",
        "name": "Download Files",
        "parameters": [
          "fileId",
          "options",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "name": "Default Data Loader",
        "parameters": [
          "options",
          "dataType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
        "name": "Token Splitter",
        "parameters": [
          "chunkSize",
          "chunkOverlap"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
        "name": "Qdrant Vector Store1",
        "parameters": [
          "mode",
          "options",
          "qdrantCollection"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI1",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
        "name": "DeepSeek Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "Email Reviewer",
        "parameters": [
          "text",
          "options",
          "promptType",
          "hasOutputParser"
        ]
      }
    ],
    "connections": {
      "Gmail": {
        "main": [
          [
            {
              "node": "Text Classifier",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI": {
        "ai_languageModel": [
          [
            {
              "node": "Write email",
              "type": "ai_languageModel",
              "index": 0
            },
            {
              "node": "Email Reviewer",
              "type": "ai_languageModel",
              "index": 0
            },
            {
              "node": "Text Classifier",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Markdown": {
        "main": [
          [
            {
              "node": "Email Summarization Chain",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get folder": {
        "main": [
          [
            {
              "node": "Download Files",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Edit Fields": {
        "main": [
          [
            {
              "node": "Gmail",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Write email": {
        "main": [
          [
            {
              "node": "Edit Fields",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Download Files": {
        "main": [
          [
            {
              "node": "Qdrant Vector Store1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Email Reviewer": {
        "main": [
          [
            {
              "node": "Edit Fields",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Token Splitter": {
        "ai_textSplitter": [
          [
            {
              "node": "Default Data Loader",
              "type": "ai_textSplitter",
              "index": 0
            }
          ]
        ]
      },
      "Text Classifier": {
        "main": [
          [
            {
              "node": "Send Email",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Email Reviewer",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI": {
        "ai_embedding": [
          [
            {
              "node": "Qdrant Vector Store",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI1": {
        "ai_embedding": [
          [
            {
              "node": "Qdrant Vector Store1",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Refresh collection": {
        "main": [
          [
            {
              "node": "Get folder",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "DeepSeek Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Email Summarization Chain",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Default Data Loader": {
        "ai_document": [
          [
            {
              "node": "Qdrant Vector Store1",
              "type": "ai_document",
              "index": 0
            }
          ]
        ]
      },
      "Qdrant Vector Store": {
        "ai_tool": [
          [
            {
              "node": "Write email",
              "type": "ai_tool",
              "index": 0
            },
            {
              "node": "Email Reviewer",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Email Trigger (IMAP)": {
        "main": [
          [
            {
              "node": "Markdown",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Email Summarization Chain": {
        "main": [
          [
            {
              "node": "Write email",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Create collection",
              "type": "main",
              "index": 0
            },
            {
              "node": "Refresh collection",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Scheduled automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "Schedule Trigger",
        "parameters": [
          "rule"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Search daily",
        "parameters": [
          "base",
          "table",
          "options",
          "operation",
          "filterByFormula"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Search weekly",
        "parameters": [
          "base",
          "table",
          "options",
          "operation",
          "filterByFormula"
        ]
      },
      {
        "type": "n8n-nodes-base.gmail",
        "name": "confirmation email1",
        "parameters": [
          "sendTo",
          "message",
          "options",
          "subject"
        ]
      },
      {
        "type": "n8n-nodes-base.executeWorkflow",
        "name": "Execute Workflow",
        "parameters": [
          "mode",
          "options",
          "workflowId"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Create Event",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.executeWorkflowTrigger",
        "name": "Execute Workflow Trigger",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.formTrigger",
        "name": "Unsubscribe Form",
        "parameters": [
          "options",
          "formTitle",
          "formFields",
          "formDescription"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set Email Vars",
        "parameters": [
          "options",
          "assignments",
          "includeOtherFields"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Log Last Sent",
        "parameters": [
          "base",
          "table",
          "columns",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Search surprise",
        "parameters": [
          "base",
          "table",
          "options",
          "operation",
          "filterByFormula"
        ]
      },
      {
        "type": "n8n-nodes-base.filter",
        "name": "Should Send = True",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Should Send?",
        "parameters": [
          "mode",
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Create Subscriber",
        "parameters": [
          "base",
          "table",
          "columns",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Update Subscriber",
        "parameters": [
          "base",
          "table",
          "columns",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.formTrigger",
        "name": "Subscribe Form",
        "parameters": [
          "options",
          "formTitle",
          "formFields",
          "formDescription"
        ]
      },
      {
        "type": "n8n-nodes-base.executionData",
        "name": "Execution Data",
        "parameters": [
          "dataToSave"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "name": "Window Buffer Memory",
        "parameters": [
          "sessionKey",
          "sessionIdType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
        "name": "Wikipedia",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "Content Generation Agent",
        "parameters": [
          "text",
          "options",
          "promptType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
        "name": "Groq Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Generate Image",
        "parameters": [
          "prompt",
          "options",
          "resource"
        ]
      },
      {
        "type": "n8n-nodes-base.editImage",
        "name": "Resize Image",
        "parameters": [
          "width",
          "height",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.gmail",
        "name": "Send Message",
        "parameters": [
          "sendTo",
          "message",
          "options",
          "subject"
        ]
      }
    ],
    "connections": {
      "Wikipedia": {
        "ai_tool": [
          [
            {
              "node": "Content Generation Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Create Event": {
        "main": [
          [
            {
              "node": "Execute Workflow",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Resize Image": {
        "main": [
          [
            {
              "node": "Set Email Vars",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Search daily": {
        "main": [
          [
            {
              "node": "Create Event",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Send Message": {
        "main": [
          [
            {
              "node": "Log Last Sent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Should Send?": {
        "main": [
          [
            {
              "node": "Should Send = True",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Search weekly": {
        "main": [
          [
            {
              "node": "Create Event",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Execution Data": {
        "main": [
          [
            {
              "node": "Content Generation Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate Image": {
        "main": [
          [
            {
              "node": "Resize Image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set Email Vars": {
        "main": [
          [
            {
              "node": "Send Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Subscribe Form": {
        "main": [
          [
            {
              "node": "Create Subscriber",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Groq Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Content Generation Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Search surprise": {
        "main": [
          [
            {
              "node": "Should Send?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Schedule Trigger": {
        "main": [
          [
            {
              "node": "Search surprise",
              "type": "main",
              "index": 0
            },
            {
              "node": "Search daily",
              "type": "main",
              "index": 0
            },
            {
              "node": "Search weekly",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Unsubscribe Form": {
        "main": [
          [
            {
              "node": "Update Subscriber",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Create Subscriber": {
        "main": [
          [
            {
              "node": "confirmation email1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Should Send = True": {
        "main": [
          [
            {
              "node": "Create Event",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Window Buffer Memory": {
        "ai_memory": [
          [
            {
              "node": "Content Generation Agent",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "Content Generation Agent": {
        "main": [
          [
            {
              "node": "Generate Image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Execute Workflow Trigger": {
        "main": [
          [
            {
              "node": "Execution Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Email Summary Agent",
    "description": "Email Summary Agent: Scheduled automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "Daily 7AM Trigger",
        "parameters": [
          "rule"
        ]
      },
      {
        "type": "n8n-nodes-base.gmail",
        "name": "Fetch Emails - Past 24 Hours",
        "parameters": [
          "filters",
          "operation",
          "returnAll"
        ]
      },
      {
        "type": "n8n-nodes-base.aggregate",
        "name": "Organize Email Data - Morning",
        "parameters": [
          "include",
          "options",
          "aggregate",
          "fieldsToInclude"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Summarize Emails with OpenAI - Morning",
        "parameters": [
          "modelId",
          "options",
          "messages",
          "jsonOutput"
        ]
      },
      {
        "type": "n8n-nodes-base.gmail",
        "name": "Send Summary - Morning",
        "parameters": [
          "sendTo",
          "message",
          "options",
          "subject"
        ]
      }
    ],
    "connections": {
      "Daily 7AM Trigger": {
        "main": [
          [
            {
              "node": "Fetch Emails - Past 24 Hours",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch Emails - Past 24 Hours": {
        "main": [
          [
            {
              "node": "Organize Email Data - Morning",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Organize Email Data - Morning": {
        "main": [
          [
            {
              "node": "Summarize Emails with OpenAI - Morning",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Summarize Emails with OpenAI - Morning": {
        "main": [
          [
            {
              "node": "Send Summary - Morning",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": [
      {
        "id": "G1v7CnFpOHsReVhM",
        "name": "Product",
        "createdAt": "2025-01-13T17:04:34.969Z",
        "updatedAt": "2025-01-13T17:04:34.969Z"
      },
      {
        "id": "RagrXIh5iBDseqvj",
        "name": "AI",
        "createdAt": "2025-01-09T09:18:12.756Z",
        "updatedAt": "2025-01-09T09:18:12.756Z"
      },
      {
        "id": "Yg2lfYteJZAoIeaC",
        "name": "Building blocks",
        "createdAt": "2025-01-13T17:05:49.788Z",
        "updatedAt": "2025-01-13T17:05:49.788Z"
      },
      {
        "id": "ZuS1C3NpE8uBlFq4",
        "name": "Finance",
        "createdAt": "2025-01-13T17:05:03.996Z",
        "updatedAt": "2025-01-13T17:05:03.996Z"
      },
      {
        "id": "aqlZb2qfWiaT4Xr5",
        "name": "IT Ops",
        "createdAt": "2025-01-03T12:20:11.917Z",
        "updatedAt": "2025-01-03T12:20:11.917Z"
      },
      {
        "id": "fX8hRnEv4D8sLSzF",
        "name": "OpenAI",
        "createdAt": "2025-01-09T09:18:12.757Z",
        "updatedAt": "2025-01-09T09:18:12.757Z"
      },
      {
        "id": "j1qBXzFADkR3sHSa",
        "name": "Marketing",
        "createdAt": "2025-01-13T17:03:54.468Z",
        "updatedAt": "2025-01-13T17:03:54.468Z"
      },
      {
        "id": "x3OVvOuZkLx1hYpW",
        "name": "Support",
        "createdAt": "2025-01-13T17:05:40.900Z",
        "updatedAt": "2025-01-13T17:05:40.900Z"
      },
      {
        "id": "xBOhq1kP3lza5ajE",
        "name": "HR",
        "createdAt": "2025-01-13T17:04:57.045Z",
        "updatedAt": "2025-01-13T17:04:57.045Z"
      },
      {
        "id": "yy04JQqCaXepPdSa",
        "name": "Project Management",
        "createdAt": "2024-10-30T18:27:57.309Z",
        "updatedAt": "2024-10-30T18:27:57.309Z"
      },
      {
        "id": "zJaZorWWcGpTp35U",
        "name": "DevOps",
        "createdAt": "2025-01-03T12:19:34.273Z",
        "updatedAt": "2025-01-03T12:19:34.273Z"
      }
    ]
  },
  {
    "name": "Extract spend details (template)",
    "description": "Extract spend details (template): Event-driven automation with AI processing outputting to googleSheets",
    "nodes": [
      {
        "type": "n8n-nodes-base.gmailTrigger",
        "name": "Get invoice",
        "parameters": [
          "simple",
          "filters",
          "options",
          "pollTimes"
        ]
      },
      {
        "type": "n8n-nodes-base.gmailTrigger",
        "name": "Get payment",
        "parameters": [
          "simple",
          "filters",
          "options",
          "pollTimes"
        ]
      },
      {
        "type": "n8n-nodes-base.extractFromFile",
        "name": "Extract invoice",
        "parameters": [
          "options",
          "operation",
          "binaryPropertyName"
        ]
      },
      {
        "type": "n8n-nodes-base.extractFromFile",
        "name": "Extract payment",
        "parameters": [
          "options",
          "operation",
          "binaryPropertyName"
        ]
      },
      {
        "type": "n8n-nodes-base.html",
        "name": "HTML",
        "parameters": [
          "options",
          "operation",
          "dataPropertyName",
          "extractionValues"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split Out",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser1",
        "parameters": [
          "schemaType",
          "inputSchema"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "name": "Google Gemini Chat Model1",
        "parameters": [
          "options",
          "modelName"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Send",
        "parameters": [
          "columns",
          "options",
          "operation",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set data 0",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set data 1",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set data 2",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Invoice data",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Payment data",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Switch",
        "parameters": [
          "rules",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
        "name": "Groq Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser",
        "parameters": [
          "schemaType",
          "inputSchema"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Send1",
        "parameters": [
          "columns",
          "options",
          "operation",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Extract details1",
        "parameters": [
          "text",
          "messages",
          "promptType",
          "hasOutputParser"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Extract details",
        "parameters": [
          "text",
          "messages",
          "promptType",
          "hasOutputParser"
        ]
      }
    ],
    "connections": {
      "HTML": {
        "main": [
          [
            {
              "node": "Split Out",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge": {
        "main": [
          [
            {
              "node": "Extract details",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Switch": {
        "main": [
          [
            {
              "node": "HTML",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Set data 1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Set data 2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Out": {
        "main": [
          [
            {
              "node": "Set data 0",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set data 0": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set data 1": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Set data 2": {
        "main": [
          [
            {
              "node": "Extract details1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get invoice": {
        "main": [
          [
            {
              "node": "Extract invoice",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get payment": {
        "main": [
          [
            {
              "node": "Extract payment",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Invoice data": {
        "main": [
          [
            {
              "node": "Switch",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Payment data": {
        "main": [
          [
            {
              "node": "Switch",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract details": {
        "main": [
          [
            {
              "node": "Send",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract invoice": {
        "main": [
          [
            {
              "node": "Invoice data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract payment": {
        "main": [
          [
            {
              "node": "Payment data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Groq Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Extract details1",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Extract details1": {
        "main": [
          [
            {
              "node": "Send1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Extract details1",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Google Gemini Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Extract details",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser1": {
        "ai_outputParser": [
          [
            {
              "node": "Extract details",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": [
      {
        "id": "9mCuuNEpnYNvVzb8",
        "name": "Finance",
        "createdAt": "2024-09-15T07:22:30.749Z",
        "updatedAt": "2024-09-15T07:22:30.749Z"
      }
    ]
  },
  {
    "name": "Generate Instagram Content from Top Trends with AI Image Generation",
    "description": "Generate Instagram Content from Top Trends with AI Image Generation: Scheduled automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.if",
        "name": "If media status is finished",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "If media status is finished1",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.telegram",
        "name": "Telegram",
        "parameters": [
          "text",
          "chatId",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.telegram",
        "name": "Telegram1",
        "parameters": [
          "text",
          "chatId",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.telegram",
        "name": "Telegram2",
        "parameters": [
          "text",
          "chatId",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.splitInBatches",
        "name": "Loop Over Items",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "Schedule Trigger1",
        "parameters": [
          "rule"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Telegram Params",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Instagram params",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Rapid Api params",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "filter the image content",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "get top trends on instagram #blender3d",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "sendHeaders",
          "queryParameters",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "get top trends on instagram #isometric",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "sendHeaders",
          "queryParameters",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "merge the array content",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.postgres",
        "name": "Check Data on Database Is Exist",
        "parameters": [
          "table",
          "where",
          "schema",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "If Data is Exist",
        "parameters": [
          "options",
          "conditions",
          "looseTypeValidation"
        ]
      },
      {
        "type": "n8n-nodes-base.telegram",
        "name": "send error message to telegram",
        "parameters": [
          "text",
          "chatId",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.postgres",
        "name": "insert data on db",
        "parameters": [
          "table",
          "schema",
          "columns",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Analyze Image and give the content",
        "parameters": [
          "text",
          "modelId",
          "options",
          "resource",
          "imageUrls",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Analyze Content And Generate Instagram Caption",
        "parameters": [
          "modelId",
          "options",
          "messages"
        ]
      },
      {
        "type": "n8n-nodes-base.facebookGraphApi",
        "name": "Prepare data on Instagram",
        "parameters": [
          "edge",
          "node",
          "options",
          "graphApiVersion",
          "httpRequestMethod"
        ]
      },
      {
        "type": "n8n-nodes-base.facebookGraphApi",
        "name": "Check Status Of Media Before Uploaded",
        "parameters": [
          "node",
          "options",
          "graphApiVersion"
        ]
      },
      {
        "type": "n8n-nodes-base.facebookGraphApi",
        "name": "Publish Media on Instagram",
        "parameters": [
          "edge",
          "node",
          "options",
          "graphApiVersion",
          "httpRequestMethod"
        ]
      },
      {
        "type": "n8n-nodes-base.facebookGraphApi",
        "name": "Check status of post ",
        "parameters": [
          "node",
          "options",
          "graphApiVersion"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "filter the image content-2",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Replicate params",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Generate image on flux",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "sendHeaders",
          "specifyBody",
          "bodyParameters",
          "headerParameters"
        ]
      }
    ],
    "connections": {
      "Telegram": {
        "main": [
          []
        ]
      },
      "Loop Over Items": {
        "main": [
          [],
          [
            {
              "node": "Check Data on Database Is Exist",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Telegram Params": {
        "main": [
          [
            {
              "node": "Rapid Api params",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "If Data is Exist": {
        "main": [
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "insert data on db",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Instagram params": {
        "main": [
          [
            {
              "node": "Telegram Params",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Rapid Api params": {
        "main": [
          [
            {
              "node": "get top trends on instagram #isometric",
              "type": "main",
              "index": 0
            },
            {
              "node": "get top trends on instagram #blender3d",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Replicate params": {
        "main": [
          [
            {
              "node": "Instagram params",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Schedule Trigger1": {
        "main": [
          [
            {
              "node": "Replicate params",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "insert data on db": {
        "main": [
          [
            {
              "node": "Analyze Image and give the content",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check status of post ": {
        "main": [
          [
            {
              "node": "If media status is finished1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate image on flux": {
        "main": [
          [
            {
              "node": "Prepare data on Instagram",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "merge the array content": {
        "main": [
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "filter the image content": {
        "main": [
          [
            {
              "node": "merge the array content",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Prepare data on Instagram": {
        "main": [
          [
            {
              "node": "Check Status Of Media Before Uploaded",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Publish Media on Instagram": {
        "main": [
          [
            {
              "node": "Check status of post ",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "filter the image content-2": {
        "main": [
          [
            {
              "node": "merge the array content",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "If media status is finished": {
        "main": [
          [
            {
              "node": "Publish Media on Instagram",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Telegram",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "If media status is finished1": {
        "main": [
          [
            {
              "node": "Telegram1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Telegram2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check Data on Database Is Exist": {
        "main": [
          [
            {
              "node": "If Data is Exist",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "send error message to telegram",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Analyze Image and give the content": {
        "main": [
          [
            {
              "node": "Analyze Content And Generate Instagram Caption",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check Status Of Media Before Uploaded": {
        "main": [
          [
            {
              "node": "If media status is finished",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "get top trends on instagram #isometric": {
        "main": [
          [
            {
              "node": "filter the image content",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "get top trends on instagram #blender3d": {
        "main": [
          [
            {
              "node": "filter the image content-2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Analyze Content And Generate Instagram Caption": {
        "main": [
          [
            {
              "node": "Generate image on flux",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Gmail AI auto-responder: create draft replies to incoming emails",
    "description": "Gmail AI auto-responder: create draft replies to incoming emails: Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.gmailTrigger",
        "name": "Gmail Trigger",
        "parameters": [
          "simple",
          "filters",
          "options",
          "pollTimes"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "If Needs Reply",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "JSON Parser",
        "parameters": [
          "jsonSchema"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.gmail",
        "name": "Gmail - Create Draft",
        "parameters": [
          "message",
          "options",
          "subject",
          "resource",
          "emailType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Assess if message needs a reply",
        "parameters": [
          "prompt",
          "messages"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Generate email reply",
        "parameters": [
          "text",
          "messages",
          "promptType"
        ]
      }
    ],
    "connections": {
      "JSON Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Assess if message needs a reply",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat": {
        "ai_languageModel": [
          [
            {
              "node": "Assess if message needs a reply",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Gmail Trigger": {
        "main": [
          [
            {
              "node": "Assess if message needs a reply",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "If Needs Reply": {
        "main": [
          [
            {
              "node": "Generate email reply",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Generate email reply",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Generate email reply": {
        "main": [
          [
            {
              "node": "Gmail - Create Draft",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Assess if message needs a reply": {
        "main": [
          [
            {
              "node": "If Needs Reply",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.extractFromFile",
        "name": "Extract from File",
        "parameters": [
          "options",
          "operation",
          "binaryPropertyName"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model1",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser",
        "parameters": [
          "schemaType",
          "inputSchema"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model2",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.formTrigger",
        "name": "Step 1 of 2 - Upload CV",
        "parameters": [
          "options",
          "formTitle",
          "formFields",
          "responseMode",
          "formDescription"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Save to Airtable",
        "parameters": [
          "base",
          "table",
          "columns",
          "options",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textClassifier",
        "name": "Classify Document",
        "parameters": [
          "options",
          "inputText",
          "categories"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Upload File to Record",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "authentication",
          "bodyParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.form",
        "name": "Form Success",
        "parameters": [
          "options",
          "operation",
          "completionTitle",
          "completionMessage"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Save to Airtable1",
        "parameters": [
          "base",
          "table",
          "columns",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.formTrigger",
        "name": "Step 2 of 2 - Application Form",
        "parameters": [
          "options",
          "formTitle",
          "formFields",
          "formDescription"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Application Suitability Agent",
        "parameters": [
          "text",
          "messages",
          "promptType",
          "hasOutputParser"
        ]
      },
      {
        "type": "n8n-nodes-base.form",
        "name": "File Upload Retry",
        "parameters": [
          "options",
          "formFields"
        ]
      },
      {
        "type": "n8n-nodes-base.form",
        "name": "Redirect To Step 2 of 2",
        "parameters": [
          "operation",
          "redirectUrl",
          "respondWith"
        ]
      },
      {
        "type": "n8n-nodes-base.form",
        "name": "Submission Success",
        "parameters": [
          "options",
          "formFields"
        ]
      }
    ],
    "connections": {
      "Save to Airtable": {
        "main": [
          [
            {
              "node": "Upload File to Record",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Classify Document": {
        "main": [
          [
            {
              "node": "Application Suitability Agent",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "File Upload Retry",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract from File": {
        "main": [
          [
            {
              "node": "Classify Document",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "File Upload Retry": {
        "main": [
          [
            {
              "node": "Extract from File",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Save to Airtable1": {
        "main": [
          [
            {
              "node": "Form Success",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Form Success",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Application Suitability Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model2": {
        "ai_languageModel": [
          [
            {
              "node": "Classify Document",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Submission Success": {
        "main": [
          [
            {
              "node": "Redirect To Step 2 of 2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Upload File to Record": {
        "main": [
          [
            {
              "node": "Submission Success",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Step 1 of 2 - Upload CV": {
        "main": [
          [
            {
              "node": "Extract from File",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Application Suitability Agent",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Application Suitability Agent": {
        "main": [
          [
            {
              "node": "Save to Airtable",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Step 2 of 2 - Application Form": {
        "main": [
          [
            {
              "node": "Save to Airtable1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "HR & IT Helpdesk Chatbot with Audio Transcription",
    "description": "HR & IT Helpdesk Chatbot with Audio Transcription: Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "HTTP Request",
        "parameters": [
          "url",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.extractFromFile",
        "name": "Extract from File",
        "parameters": [
          "options",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
        "name": "Create HR Policies",
        "parameters": [
          "mode",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "name": "Default Data Loader",
        "parameters": [
          "options",
          "jsonData",
          "jsonMode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
        "name": "Recursive Character Text Splitter",
        "parameters": [
          "options",
          "chunkSize"
        ]
      },
      {
        "type": "n8n-nodes-base.telegramTrigger",
        "name": "Telegram Trigger",
        "parameters": [
          "updates",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Verify Message Type",
        "parameters": [
          "rules",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "OpenAI",
        "parameters": [
          "options",
          "resource",
          "operation",
          "binaryPropertyName"
        ]
      },
      {
        "type": "n8n-nodes-base.telegram",
        "name": "Telegram1",
        "parameters": [
          "fileId",
          "resource"
        ]
      },
      {
        "type": "n8n-nodes-base.telegram",
        "name": "Unsupported Message Type",
        "parameters": [
          "text",
          "chatId",
          "additionalFields"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "AI Agent",
        "parameters": [
          "text",
          "options",
          "promptType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
        "name": "Postgres Chat Memory",
        "parameters": [
          "sessionKey",
          "sessionIdType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
        "name": "Answer questions with a vector store",
        "parameters": [
          "name",
          "description"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
        "name": "Postgres PGVector Store",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model1",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI1",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.telegram",
        "name": "Telegram",
        "parameters": [
          "text",
          "chatId",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Edit Fields",
        "parameters": [
          "options",
          "assignments",
          "includeOtherFields"
        ]
      }
    ],
    "connections": {
      "OpenAI": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI Agent": {
        "main": [
          [
            {
              "node": "Telegram",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Telegram1": {
        "main": [
          [
            {
              "node": "OpenAI",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Edit Fields": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "HTTP Request": {
        "main": [
          [
            {
              "node": "Extract from File",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Telegram Trigger": {
        "main": [
          [
            {
              "node": "Verify Message Type",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI": {
        "ai_embedding": [
          [
            {
              "node": "Create HR Policies",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Extract from File": {
        "main": [
          [
            {
              "node": "Create HR Policies",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI1": {
        "ai_embedding": [
          [
            {
              "node": "Postgres PGVector Store",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Answer questions with a vector store",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Default Data Loader": {
        "ai_document": [
          [
            {
              "node": "Create HR Policies",
              "type": "ai_document",
              "index": 0
            }
          ]
        ]
      },
      "Verify Message Type": {
        "main": [
          [
            {
              "node": "Edit Fields",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Telegram1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Unsupported Message Type",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Postgres Chat Memory": {
        "ai_memory": [
          [
            {
              "node": "AI Agent",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "Postgres PGVector Store": {
        "ai_vectorStore": [
          [
            {
              "node": "Answer questions with a vector store",
              "type": "ai_vectorStore",
              "index": 0
            }
          ]
        ]
      },
      "Recursive Character Text Splitter": {
        "ai_textSplitter": [
          [
            {
              "node": "Default Data Loader",
              "type": "ai_textSplitter",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "HTTP Request",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Answer questions with a vector store": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "HR Job Posting and Evaluation with AI",
    "description": "HR Job Posting and Evaluation with AI: Event-driven automation with AI processing outputting to emailSend",
    "nodes": [
      {
        "type": "n8n-nodes-base.formTrigger",
        "name": "On form submission",
        "parameters": [
          "options",
          "formTitle",
          "formFields",
          "formDescription"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Airtable",
        "parameters": [
          "base",
          "table",
          "columns",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.googleDrive",
        "name": "Upload CV to google drive",
        "parameters": [
          "name",
          "driveId",
          "options",
          "folderId",
          "inputDataFieldName"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "applicant details",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.googleDrive",
        "name": "download CV",
        "parameters": [
          "fileId",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.extractFromFile",
        "name": "Extract from File",
        "parameters": [
          "options",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "AI Agent",
        "parameters": [
          "text",
          "options",
          "promptType",
          "hasOutputParser"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.airtableTool",
        "name": "Airtable1",
        "parameters": [
          "base",
          "table",
          "options",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser",
        "parameters": [
          "jsonSchemaExample"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "shortlisted?",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Rejected",
        "parameters": [
          "base",
          "table",
          "columns",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Potential Hire",
        "parameters": [
          "base",
          "table",
          "columns",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.airtableTool",
        "name": "Airtable2",
        "parameters": [
          "base",
          "table",
          "options",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "generate questionnaires",
        "parameters": [
          "modelId",
          "options",
          "messages",
          "jsonOutput"
        ]
      },
      {
        "type": "n8n-nodes-base.form",
        "name": "questionnaires",
        "parameters": [
          "options",
          "formFields"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "update questionnaires",
        "parameters": [
          "base",
          "table",
          "columns",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.airtableTool",
        "name": "job_posting",
        "parameters": [
          "base",
          "table",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.airtableTool",
        "name": "candidate_insights",
        "parameters": [
          "id",
          "base",
          "table",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Personalize email",
        "parameters": [
          "modelId",
          "options",
          "messages",
          "jsonOutput"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Edit Fields",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.emailSend",
        "name": "Send Email",
        "parameters": [
          "text",
          "options",
          "subject",
          "toEmail",
          "fromEmail",
          "emailFormat"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Book Meeting",
        "parameters": [
          "modelId",
          "options",
          "messages",
          "jsonOutput"
        ]
      },
      {
        "type": "n8n-nodes-base.googleCalendarTool",
        "name": "Google Calendar",
        "parameters": [
          "end",
          "start",
          "calendar",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "update phone meeting time",
        "parameters": [
          "base",
          "table",
          "columns",
          "options",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Screening Questions",
        "parameters": [
          "modelId",
          "options",
          "messages",
          "jsonOutput"
        ]
      },
      {
        "type": "n8n-nodes-base.airtableTool",
        "name": "job_posting1",
        "parameters": [
          "base",
          "table",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.airtableTool",
        "name": "candidate_insights1",
        "parameters": [
          "id",
          "base",
          "table",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "screening questions",
        "parameters": [
          "base",
          "table",
          "columns",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Edit Fields1",
        "parameters": [
          "options",
          "assignments"
        ]
      }
    ],
    "connections": {
      "AI Agent": {
        "main": [
          [
            {
              "node": "shortlisted?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Airtable": {
        "main": [
          [
            {
              "node": "download CV",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Airtable1": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Airtable2": {
        "ai_tool": [
          [
            {
              "node": "generate questionnaires",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Send Email": {
        "main": [
          [
            {
              "node": "Book Meeting",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Edit Fields": {
        "main": [
          [
            {
              "node": "Send Email",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "download CV": {
        "main": [
          [
            {
              "node": "Extract from File",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "job_posting": {
        "ai_tool": [
          [
            {
              "node": "Personalize email",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Book Meeting": {
        "main": [
          [
            {
              "node": "update phone meeting time",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Edit Fields1": {
        "main": [
          [
            {
              "node": "screening questions",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "job_posting1": {
        "ai_tool": [
          [
            {
              "node": "Screening Questions",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "shortlisted?": {
        "main": [
          [
            {
              "node": "Potential Hire",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Rejected",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Potential Hire": {
        "main": [
          [
            {
              "node": "generate questionnaires",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "questionnaires": {
        "main": [
          [
            {
              "node": "update questionnaires",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Calendar": {
        "ai_tool": [
          [
            {
              "node": "Book Meeting",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Extract from File": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Personalize email": {
        "main": [
          [
            {
              "node": "Edit Fields",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "applicant details": {
        "main": [
          [
            {
              "node": "Airtable",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "On form submission": {
        "main": [
          [
            {
              "node": "Upload CV to google drive",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "candidate_insights": {
        "ai_tool": [
          [
            {
              "node": "Personalize email",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Screening Questions": {
        "main": [
          [
            {
              "node": "Edit Fields1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "candidate_insights1": {
        "ai_tool": [
          [
            {
              "node": "Screening Questions",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "update questionnaires": {
        "main": [
          [
            {
              "node": "Personalize email",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "generate questionnaires": {
        "main": [
          [
            {
              "node": "questionnaires",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "AI Agent",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Upload CV to google drive": {
        "main": [
          [
            {
              "node": "applicant details",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "update phone meeting time": {
        "main": [
          [
            {
              "node": "Screening Questions",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": [
      {
        "id": "9ZApRtWeNXlymyQ6",
        "name": "HR",
        "createdAt": "2025-01-08T08:47:43.054Z",
        "updatedAt": "2025-01-08T08:47:43.054Z"
      }
    ]
  },
  {
    "name": "Microsoft Outlook AI Email Assistant",
    "description": "Microsoft Outlook AI Email Assistant: Scheduled automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking ‘Test workflow’",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.microsoftOutlook",
        "name": "Microsoft Outlook23",
        "parameters": [
          "limit",
          "fields",
          "output",
          "options",
          "filtersUI",
          "operation"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.microsoftOutlook",
        "name": "Set Category",
        "parameters": [
          "messageId",
          "operation",
          "updateFields"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser",
        "parameters": [
          "schemaType",
          "inputSchema"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "If",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.microsoftOutlook",
        "name": "Set Importance",
        "parameters": [
          "messageId",
          "operation",
          "updateFields"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "AI: Analyse Email",
        "parameters": [
          "text",
          "options",
          "promptType",
          "hasOutputParser"
        ]
      },
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "Check Mail Schedule Trigger",
        "parameters": [
          "rule"
        ]
      },
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "Update Contacts Schedule Trigger",
        "parameters": [
          "rule"
        ]
      },
      {
        "type": "n8n-nodes-base.mondayCom",
        "name": "Monday.com - Get Contacts",
        "parameters": [
          "boardId",
          "groupId",
          "resource",
          "operation",
          "returnAll"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Airtable - Contacts",
        "parameters": [
          "base",
          "table",
          "columns",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.markdown",
        "name": "Convert to Markdown",
        "parameters": [
          "html",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Email Messages",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Rules",
        "parameters": [
          "base",
          "table",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Categories",
        "parameters": [
          "base",
          "table",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Delete Rules",
        "parameters": [
          "base",
          "table",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Contact",
        "parameters": [
          "base",
          "table",
          "options",
          "operation",
          "filterByFormula"
        ]
      },
      {
        "type": "n8n-nodes-base.splitInBatches",
        "name": "Loop Over Items",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge",
        "parameters": [
          "mode",
          "numberInputs"
        ]
      }
    ],
    "connections": {
      "If": {
        "main": [
          [
            {
              "node": "Set Importance",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge": {
        "main": [
          [
            {
              "node": "AI: Analyse Email",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Rules": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Contact": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Categories": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 2
            }
          ]
        ]
      },
      "Delete Rules": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 3
            }
          ]
        ]
      },
      "Set Category": {
        "main": [
          [
            {
              "node": "If",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Email Messages": {
        "main": [
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set Importance": {
        "main": [
          [
            {
              "node": "Loop Over Items",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Loop Over Items": {
        "main": [
          [],
          [
            {
              "node": "Contact",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI: Analyse Email": {
        "main": [
          [
            {
              "node": "Set Category",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI: Analyse Email",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Convert to Markdown": {
        "main": [
          [
            {
              "node": "Email Messages",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Microsoft Outlook23": {
        "main": [
          [
            {
              "node": "Convert to Markdown",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "AI: Analyse Email",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Monday.com - Get Contacts": {
        "main": [
          [
            {
              "node": "Airtable - Contacts",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check Mail Schedule Trigger": {
        "main": [
          [
            {
              "node": "Microsoft Outlook23",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Update Contacts Schedule Trigger": {
        "main": [
          [
            {
              "node": "Monday.com - Get Contacts",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking ‘Test workflow’": {
        "main": [
          [
            {
              "node": "Microsoft Outlook23",
              "type": "main",
              "index": 0
            },
            {
              "node": "Rules",
              "type": "main",
              "index": 0
            },
            {
              "node": "Categories",
              "type": "main",
              "index": 0
            },
            {
              "node": "Delete Rules",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "On clicking 'execute'",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.functionItem",
        "name": "FunctionItem",
        "parameters": [
          "functionCode"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "HTTP Request",
        "parameters": [
          "url",
          "options",
          "requestMethod",
          "authentication",
          "jsonParameters",
          "bodyParametersJson"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Airtable",
        "parameters": [
          "table",
          "options",
          "operation",
          "application"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set",
        "parameters": [
          "values",
          "options",
          "keepOnlySet"
        ]
      }
    ],
    "connections": {
      "Set": {
        "main": [
          [
            {
              "node": "Airtable",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "FunctionItem": {
        "main": [
          [
            {
              "node": "HTTP Request",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "HTTP Request": {
        "main": [
          [
            {
              "node": "Set",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "On clicking 'execute'": {
        "main": [
          [
            {
              "node": "FunctionItem",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Post New YouTube Videos to X",
    "description": "Post New YouTube Videos to X: Scheduled automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.twitter",
        "name": "Post to X",
        "parameters": [
          "text",
          "additionalFields"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Generate Post for X with ChatGPT",
        "parameters": [
          "modelId",
          "options",
          "messages"
        ]
      },
      {
        "type": "n8n-nodes-base.youTube",
        "name": "Fetch Latest Videos",
        "parameters": [
          "limit",
          "filters",
          "options",
          "resource"
        ]
      },
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "Check Every 30 Min",
        "parameters": [
          "rule"
        ]
      }
    ],
    "connections": {
      "Check Every 30 Min": {
        "main": [
          [
            {
              "node": "Fetch Latest Videos",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch Latest Videos": {
        "main": [
          [
            {
              "node": "Generate Post for X with ChatGPT",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate Post for X with ChatGPT": {
        "main": [
          [
            {
              "node": "Post to X",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.manualTrigger",
        "name": "When clicking \"Execute Workflow\"",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.reddit",
        "name": "Reddit",
        "parameters": [
          "keyword",
          "location",
          "operation",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Set",
        "parameters": [
          "values",
          "options",
          "keepOnlySet"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "IF",
        "parameters": [
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "IF1",
        "parameters": [
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge",
        "parameters": [
          "mode",
          "options",
          "combinationMode"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge1",
        "parameters": [
          "mode",
          "options",
          "combinationMode"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "SetFinal",
        "parameters": [
          "values",
          "options",
          "keepOnlySet"
        ]
      },
      {
        "type": "n8n-nodes-base.openAi",
        "name": "OpenAI Summary",
        "parameters": [
          "input",
          "options",
          "operation",
          "instruction"
        ]
      },
      {
        "type": "n8n-nodes-base.openAi",
        "name": "OpenAI Classify",
        "parameters": [
          "prompt",
          "options",
          "simplifyOutput"
        ]
      },
      {
        "type": "n8n-nodes-base.openAi",
        "name": "OpenAI Summary Backup",
        "parameters": [
          "prompt",
          "options"
        ]
      }
    ],
    "connections": {
      "IF": {
        "main": [
          [
            {
              "node": "Set",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "IF1": {
        "main": [
          null,
          [
            {
              "node": "OpenAI Summary Backup",
              "type": "main",
              "index": 0
            },
            {
              "node": "Merge1",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Set": {
        "main": [
          [
            {
              "node": "OpenAI Classify",
              "type": "main",
              "index": 0
            },
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Merge": {
        "main": [
          [
            {
              "node": "IF1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge1": {
        "main": [
          [
            {
              "node": "SetFinal",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Reddit": {
        "main": [
          [
            {
              "node": "IF",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Classify": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Summary Backup": {
        "main": [
          [
            {
              "node": "Merge1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking \"Execute Workflow\"": {
        "main": [
          [
            {
              "node": "Reddit",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.whatsAppTrigger",
        "name": "WhatsApp Trigger",
        "parameters": [
          "updates"
        ]
      },
      {
        "type": "n8n-nodes-base.whatsApp",
        "name": "Get Audio URL",
        "parameters": [
          "resource",
          "operation",
          "mediaGetId",
          "requestOptions"
        ]
      },
      {
        "type": "n8n-nodes-base.whatsApp",
        "name": "Get Video URL",
        "parameters": [
          "resource",
          "operation",
          "mediaGetId",
          "requestOptions"
        ]
      },
      {
        "type": "n8n-nodes-base.whatsApp",
        "name": "Get Image URL",
        "parameters": [
          "resource",
          "operation",
          "mediaGetId",
          "requestOptions"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Download Video",
        "parameters": [
          "url",
          "options",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Download Audio",
        "parameters": [
          "url",
          "options",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Download Image",
        "parameters": [
          "url",
          "options",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "name": "Window Buffer Memory",
        "parameters": [
          "sessionKey",
          "sessionIdType"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Get User's Message",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split Out Message Parts",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
        "name": "Wikipedia",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Redirect Message Types",
        "parameters": [
          "rules",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.wait",
        "name": "Get Text",
        "parameters": [
          "amount"
        ]
      },
      {
        "type": "n8n-nodes-base.whatsApp",
        "name": "Respond to User",
        "parameters": [
          "textBody",
          "operation",
          "phoneNumberId",
          "requestOptions",
          "additionalFields",
          "recipientPhoneNumber"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Image Explainer",
        "parameters": [
          "text",
          "messages",
          "promptType"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Format Response",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "name": "Google Gemini Chat Model",
        "parameters": [
          "options",
          "modelName"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Google Gemini Audio",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "sendHeaders",
          "specifyBody",
          "authentication",
          "headerParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Google Gemini Video",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "sendHeaders",
          "specifyBody",
          "authentication",
          "headerParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "name": "Google Gemini Chat Model1",
        "parameters": [
          "options",
          "modelName"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "name": "Google Gemini Chat Model2",
        "parameters": [
          "options",
          "modelName"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Format Response1",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Text Summarizer",
        "parameters": [
          "text",
          "messages",
          "promptType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.agent",
        "name": "AI Agent",
        "parameters": [
          "text",
          "options",
          "promptType"
        ]
      }
    ],
    "connections": {
      "AI Agent": {
        "main": [
          [
            {
              "node": "Respond to User",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Text": {
        "main": [
          [
            {
              "node": "Text Summarizer",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Wikipedia": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Get Audio URL": {
        "main": [
          [
            {
              "node": "Download Audio",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Image URL": {
        "main": [
          [
            {
              "node": "Download Image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Video URL": {
        "main": [
          [
            {
              "node": "Download Video",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Download Audio": {
        "main": [
          [
            {
              "node": "Google Gemini Audio",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Download Image": {
        "main": [
          [
            {
              "node": "Image Explainer",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Download Video": {
        "main": [
          [
            {
              "node": "Google Gemini Video",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Format Response": {
        "main": [
          [
            {
              "node": "Get User's Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Image Explainer": {
        "main": [
          [
            {
              "node": "Get User's Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Text Summarizer": {
        "main": [
          [
            {
              "node": "Get User's Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Format Response1": {
        "main": [
          [
            {
              "node": "Get User's Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "WhatsApp Trigger": {
        "main": [
          [
            {
              "node": "Split Out Message Parts",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get User's Message": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Gemini Audio": {
        "main": [
          [
            {
              "node": "Format Response1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Gemini Video": {
        "main": [
          [
            {
              "node": "Format Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Window Buffer Memory": {
        "ai_memory": [
          [
            {
              "node": "AI Agent",
              "type": "ai_memory",
              "index": 0
            }
          ]
        ]
      },
      "Redirect Message Types": {
        "main": [
          [
            {
              "node": "Get Audio URL",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Get Video URL",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Get Image URL",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Get Text",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Out Message Parts": {
        "main": [
          [
            {
              "node": "Redirect Message Types",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Gemini Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Google Gemini Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "Image Explainer",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Google Gemini Chat Model2": {
        "ai_languageModel": [
          [
            {
              "node": "Text Summarizer",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Scheduled automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.scheduleTrigger",
        "name": "Schedule Trigger",
        "parameters": [
          "rule"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "OpenAI",
        "parameters": [
          "text",
          "modelId",
          "options",
          "resource",
          "imageUrls",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "param",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.discord",
        "name": "Discord",
        "parameters": [
          "content",
          "options",
          "authentication"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.informationExtractor",
        "name": "Information Extractor",
        "parameters": [
          "text",
          "options",
          "attributes"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "HTTP Request",
        "parameters": [
          "url",
          "options"
        ]
      }
    ],
    "connections": {
      "param": {
        "main": [
          [
            {
              "node": "HTTP Request",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI": {
        "main": [
          [
            {
              "node": "Discord",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "HTTP Request": {
        "main": [
          [
            {
              "node": "Information Extractor",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Schedule Trigger": {
        "main": [
          [
            {
              "node": "param",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Information Extractor",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Information Extractor": {
        "main": [
          [
            {
              "node": "OpenAI",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "YouTube Videos with AI Summaries on Discord",
    "description": "YouTube Videos with AI Summaries on Discord: Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.rssFeedReadTrigger",
        "name": "YouTube Video Trigger",
        "parameters": [
          "feedUrl",
          "pollTimes"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Retrieve Caption Data",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "authentication",
          "queryParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Download Captions",
        "parameters": [
          "url",
          "options",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.extractFromFile",
        "name": "Caption File Conversion",
        "parameters": [
          "options",
          "operation",
          "destinationKey"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Caption Summary with ChatGPT",
        "parameters": [
          "modelId",
          "options",
          "messages"
        ]
      },
      {
        "type": "n8n-nodes-base.discord",
        "name": "Post to Discord",
        "parameters": [
          "content",
          "options",
          "authentication"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Find English Captions",
        "parameters": [
          "options",
          "assignments"
        ]
      }
    ],
    "connections": {
      "Download Captions": {
        "main": [
          [
            {
              "node": "Caption File Conversion",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Find English Captions": {
        "main": [
          [
            {
              "node": "Download Captions",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Retrieve Caption Data": {
        "main": [
          [
            {
              "node": "Find English Captions",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "YouTube Video Trigger": {
        "main": [
          [
            {
              "node": "Retrieve Caption Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Caption File Conversion": {
        "main": [
          [
            {
              "node": "Caption Summary with ChatGPT",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Caption Summary with ChatGPT": {
        "main": [
          [
            {
              "node": "Post to Discord",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "My workflow 6",
    "description": "My workflow 6: with AI processing outputting to slack, webhook",
    "nodes": [
      {
        "type": "n8n-nodes-base.webhook",
        "name": "Webhook",
        "parameters": [
          "path",
          "options",
          "httpMethod"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Switch",
        "parameters": [
          "rules",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Basic LLM Chain",
        "parameters": [
          "text",
          "promptType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.slack",
        "name": "Send a Message",
        "parameters": [
          "text",
          "select",
          "channelId",
          "otherOptions"
        ]
      }
    ],
    "connections": {
      "Switch": {
        "main": [
          [
            {
              "node": "Basic LLM Chain",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Webhook": {
        "main": [
          [
            {
              "node": "Switch",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Basic LLM Chain": {
        "main": [
          [
            {
              "node": "Send a Message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Basic LLM Chain",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "",
    "description": ": Event-driven automation with AI processing outputting to emailSend, googleSheets, googleSheetsTrigger",
    "nodes": [
      {
        "type": "n8n-nodes-base.set",
        "name": "Set your company's variables",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get linkedin Posts",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "sendHeaders",
          "authentication",
          "genericAuthType",
          "queryParameters",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get twitter ID",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "sendHeaders",
          "authentication",
          "genericAuthType",
          "queryParameters",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get tweets",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "sendHeaders",
          "authentication",
          "genericAuthType",
          "queryParameters",
          "headerParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Extract and limit Linkedin",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Exract and limit X",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "name": "OpenAI Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "name": "Structured Output Parser",
        "parameters": [
          "jsonSchemaExample"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainLlm",
        "name": "Generate Subject and cover letter based on match",
        "parameters": [
          "text",
          "messages",
          "promptType",
          "hasOutputParser"
        ]
      },
      {
        "type": "n8n-nodes-base.emailSend",
        "name": "Send Cover letter and CC me",
        "parameters": [
          "html",
          "options",
          "subject",
          "toEmail",
          "fromEmail"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheetsTrigger",
        "name": "Google Sheets Trigger",
        "parameters": [
          "options",
          "pollTimes",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Google Sheets",
        "parameters": [
          "columns",
          "options",
          "operation",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "If",
        "parameters": [
          "options",
          "conditions",
          "looseTypeValidation"
        ]
      }
    ],
    "connections": {
      "If": {
        "main": [
          [
            {
              "node": "Set your company's variables",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get tweets": {
        "main": [
          [
            {
              "node": "Exract and limit X",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Sheets": {
        "main": [
          []
        ]
      },
      "Get twitter ID": {
        "main": [
          [
            {
              "node": "Get tweets",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Generate Subject and cover letter based on match",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Exract and limit X": {
        "main": [
          [
            {
              "node": "Get linkedin Posts",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get linkedin Posts": {
        "main": [
          [
            {
              "node": "Extract and limit Linkedin",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Sheets Trigger": {
        "main": [
          [
            {
              "node": "If",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Structured Output Parser": {
        "ai_outputParser": [
          [
            {
              "node": "Generate Subject and cover letter based on match",
              "type": "ai_outputParser",
              "index": 0
            }
          ]
        ]
      },
      "Extract and limit Linkedin": {
        "main": [
          [
            {
              "node": "Generate Subject and cover letter based on match",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Send Cover letter and CC me": {
        "main": [
          [
            {
              "node": "Google Sheets",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set your company's variables": {
        "main": [
          [
            {
              "node": "Get twitter ID",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate Subject and cover letter based on match": {
        "main": [
          [
            {
              "node": "Send Cover letter and CC me",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Google Doc Summarizer to Google Sheets",
    "description": "Google Doc Summarizer to Google Sheets: Event-driven automation with AI processing outputting to googleSheets",
    "nodes": [
      {
        "type": "n8n-nodes-base.googleDocs",
        "name": "Google Docs",
        "parameters": [
          "operation",
          "documentURL",
          "authentication"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
        "name": "Wikipedia",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolCalculator",
        "name": "Calculator",
        "parameters": []
      },
      {
        "type": "n8n-nodes-base.googleSheets",
        "name": "Google Sheets",
        "parameters": [
          "columns",
          "options",
          "operation",
          "sheetName",
          "documentId"
        ]
      },
      {
        "type": "n8n-nodes-base.googleDriveTrigger",
        "name": "Google Drive ",
        "parameters": [
          "event",
          "options",
          "pollTimes",
          "triggerOn",
          "folderToWatch",
          "authentication"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Generate Summary AI",
        "parameters": [
          "modelId",
          "options",
          "messages"
        ]
      }
    ],
    "connections": {
      "Wikipedia": {
        "ai_tool": [
          [
            {
              "node": "Generate Summary AI",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Calculator": {
        "ai_tool": [
          [
            {
              "node": "Generate Summary AI",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Google Docs": {
        "main": [
          [
            {
              "node": "Generate Summary AI",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Google Drive ": {
        "main": [
          [
            {
              "node": "Google Docs",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate Summary AI": {
        "main": [
          [
            {
              "node": "Google Sheets",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Telegram RAG pdf",
    "description": "Telegram RAG pdf: Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.telegramTrigger",
        "name": "Telegram Trigger",
        "parameters": [
          "updates",
          "additionalFields"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings OpenAI",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "name": "Default Data Loader",
        "parameters": [
          "options",
          "dataType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
        "name": "Recursive Character Text Splitter",
        "parameters": [
          "options",
          "chunkSize",
          "chunkOverlap"
        ]
      },
      {
        "type": "n8n-nodes-base.stopAndError",
        "name": "Stop and Error",
        "parameters": [
          "errorMessage"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
        "name": "Question and Answer Chain",
        "parameters": [
          "text",
          "promptType"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
        "name": "Vector Store Retriever",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
        "name": "Pinecone Vector Store1",
        "parameters": [
          "options",
          "pineconeIndex"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
        "name": "Groq Chat Model",
        "parameters": [
          "model",
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Check If is a document",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Change to application/pdf",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.telegram",
        "name": "Telegram get File",
        "parameters": [
          "fileId",
          "resource"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "name": "Embeddings",
        "parameters": [
          "options"
        ]
      },
      {
        "type": "n8n-nodes-base.telegram",
        "name": "Telegram Response",
        "parameters": [
          "text",
          "chatId",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.telegram",
        "name": "Telegram Response about Database",
        "parameters": [
          "text",
          "chatId",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.stopAndError",
        "name": "Stop and Error1",
        "parameters": [
          "errorMessage"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
        "name": "Pinecone Vector Store",
        "parameters": [
          "mode",
          "options",
          "pineconeIndex"
        ]
      },
      {
        "type": "n8n-nodes-base.limit",
        "name": "Limit to 1",
        "parameters": []
      }
    ],
    "connections": {
      "Embeddings": {
        "ai_embedding": [
          [
            {
              "node": "Pinecone Vector Store1",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Limit to 1": {
        "main": [
          [
            {
              "node": "Telegram Response about Database",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Groq Chat Model": {
        "ai_languageModel": [
          [
            {
              "node": "Question and Answer Chain",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      },
      "Telegram Trigger": {
        "main": [
          [
            {
              "node": "Check If is a document",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI": {
        "ai_embedding": [
          [
            {
              "node": "Pinecone Vector Store",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Telegram Response": {
        "main": [
          [],
          [
            {
              "node": "Stop and Error",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Telegram get File": {
        "main": [
          [
            {
              "node": "Change to application/pdf",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Default Data Loader": {
        "ai_document": [
          [
            {
              "node": "Pinecone Vector Store",
              "type": "ai_document",
              "index": 0
            }
          ]
        ]
      },
      "Pinecone Vector Store": {
        "main": [
          [
            {
              "node": "Limit to 1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check If is a document": {
        "main": [
          [
            {
              "node": "Telegram get File",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Question and Answer Chain",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Pinecone Vector Store1": {
        "ai_vectorStore": [
          [
            {
              "node": "Vector Store Retriever",
              "type": "ai_vectorStore",
              "index": 0
            }
          ]
        ]
      },
      "Vector Store Retriever": {
        "ai_retriever": [
          [
            {
              "node": "Question and Answer Chain",
              "type": "ai_retriever",
              "index": 0
            }
          ]
        ]
      },
      "Change to application/pdf": {
        "main": [
          [
            {
              "node": "Pinecone Vector Store",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Question and Answer Chain": {
        "main": [
          [
            {
              "node": "Telegram Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Telegram Response about Database": {
        "main": [
          [],
          [
            {
              "node": "Stop and Error1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Recursive Character Text Splitter": {
        "ai_textSplitter": [
          [
            {
              "node": "Default Data Loader",
              "type": "ai_textSplitter",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Play with Spotify from Telegram",
    "description": "Play with Spotify from Telegram: Event-driven automation with AI processing",
    "nodes": [
      {
        "type": "n8n-nodes-base.telegramTrigger",
        "name": "Telegram Trigger",
        "parameters": [
          "updates",
          "additionalFields"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "OpenAI - Ask about a track",
        "parameters": [
          "modelId",
          "options",
          "messages"
        ]
      },
      {
        "type": "n8n-nodes-base.spotify",
        "name": "Search track",
        "parameters": [
          "limit",
          "query",
          "filters",
          "resource",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.spotify",
        "name": "Add song",
        "parameters": [
          "id"
        ]
      },
      {
        "type": "n8n-nodes-base.spotify",
        "name": "Next Song",
        "parameters": [
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.spotify",
        "name": "Resume play",
        "parameters": [
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.spotify",
        "name": "Currently Playing",
        "parameters": [
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge",
        "parameters": [
          "mode",
          "options",
          "combineBy"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "If",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Message parser",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Not found error message",
        "parameters": [
          "mode",
          "options",
          "jsonOutput"
        ]
      },
      {
        "type": "n8n-nodes-base.telegram",
        "name": "Return message to Telegram",
        "parameters": [
          "text",
          "chatId",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Define Now Playing",
        "parameters": [
          "mode",
          "options",
          "jsonOutput"
        ]
      }
    ],
    "connections": {
      "If": {
        "main": [
          [
            {
              "node": "Add song",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Not found error message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge": {
        "main": [
          [
            {
              "node": "Return message to Telegram",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Add song": {
        "main": [
          [
            {
              "node": "Next Song",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Message parser",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Next Song": {
        "main": [
          [
            {
              "node": "Resume play",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Message parser",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Resume play": {
        "main": [
          [
            {
              "node": "Currently Playing",
              "type": "main",
              "index": 0
            }
          ],
          []
        ]
      },
      "Search track": {
        "main": [
          [
            {
              "node": "If",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Message parser",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Message parser": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Telegram Trigger": {
        "main": [
          [
            {
              "node": "OpenAI - Ask about a track",
              "type": "main",
              "index": 0
            },
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Currently Playing": {
        "main": [
          [
            {
              "node": "Define Now Playing",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Message parser",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Define Now Playing": {
        "main": [
          [
            {
              "node": "Message parser",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Not found error message": {
        "main": [
          [
            {
              "node": "Message parser",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI - Ask about a track": {
        "main": [
          [
            {
              "node": "Search track",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "OpenAI Assistant for Hubspot Chat",
    "description": "OpenAI Assistant for Hubspot Chat: with AI processing outputting to webhook",
    "nodes": [
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "getHubspotMessage",
        "parameters": [
          "url",
          "options",
          "authentication",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "OpenAi Create Thread",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "sendHeaders",
          "specifyBody",
          "authentication",
          "headerParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "OpenAI Run",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "sendHeaders",
          "specifyBody",
          "authentication",
          "headerParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Run",
        "parameters": [
          "url",
          "options",
          "sendHeaders",
          "authentication",
          "headerParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Get Last Message",
        "parameters": [
          "url",
          "options",
          "sendHeaders",
          "authentication",
          "headerParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "HTTP Request",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "queryParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Completed, Action or Inprogress",
        "parameters": [
          "rules",
          "value1",
          "dataType"
        ]
      },
      {
        "type": "n8n-nodes-base.wait",
        "name": "Wait",
        "parameters": [
          "unit"
        ]
      },
      {
        "type": "n8n-nodes-base.wait",
        "name": "Wait1",
        "parameters": [
          "unit"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Submit Data",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "sendHeaders",
          "specifyBody",
          "authentication",
          "headerParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.switch",
        "name": "Select Function",
        "parameters": [
          "rules",
          "value1",
          "dataType"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Code1",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.wait",
        "name": "Wait2",
        "parameters": [
          "unit"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "HTTP Request1",
        "parameters": [
          "url",
          "options",
          "sendQuery",
          "queryParameters"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Code",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Submit Data1",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "sendHeaders",
          "specifyBody",
          "authentication",
          "headerParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.wait",
        "name": "Wait3",
        "parameters": [
          "unit"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "respondHubspotMessage1",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "authentication",
          "bodyParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "IF",
        "parameters": [
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "Airtable",
        "parameters": [
          "base",
          "table",
          "options",
          "operation",
          "filterByFormula"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "IF1",
        "parameters": [
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.airtable",
        "name": "createThread",
        "parameters": [
          "base",
          "table",
          "columns",
          "options",
          "operation"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "OpenAI Run1",
        "parameters": [
          "url",
          "method",
          "options",
          "jsonBody",
          "sendBody",
          "sendHeaders",
          "specifyBody",
          "authentication",
          "headerParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "IF2",
        "parameters": [
          "conditions"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "OpenAI",
        "parameters": [
          "text",
          "prompt",
          "options",
          "resource",
          "assistantId"
        ]
      },
      {
        "type": "n8n-nodes-base.webhook",
        "name": "Webhook",
        "parameters": [
          "path",
          "options",
          "httpMethod"
        ]
      }
    ],
    "connections": {
      "IF": {
        "main": [
          [
            {
              "node": "Airtable",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "IF1": {
        "main": [
          [
            {
              "node": "OpenAi Create Thread",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "OpenAI",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "IF2": {
        "main": [
          [
            {
              "node": "getHubspotMessage",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Code": {
        "main": [
          [
            {
              "node": "Submit Data1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Wait": {
        "main": [
          [
            {
              "node": "Get Run",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Code1": {
        "main": [
          [
            {
              "node": "Submit Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Wait1": {
        "main": [
          [
            {
              "node": "Get Run",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Wait2": {
        "main": [
          [
            {
              "node": "Get Run",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Wait3": {
        "main": [
          [
            {
              "node": "Get Run",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI": {
        "main": [
          [
            {
              "node": "OpenAI Run1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Run": {
        "main": [
          [
            {
              "node": "Completed, Action or Inprogress",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Webhook": {
        "main": [
          [
            {
              "node": "IF2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Airtable": {
        "main": [
          [
            {
              "node": "IF1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Run": {
        "main": [
          [
            {
              "node": "Get Run",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Run1": {
        "main": [
          [
            {
              "node": "Get Run",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Submit Data": {
        "main": [
          [
            {
              "node": "Wait2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "HTTP Request": {
        "main": [
          [
            {
              "node": "Code1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Submit Data1": {
        "main": [
          [
            {
              "node": "Wait3",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "createThread": {
        "main": [
          [
            {
              "node": "OpenAI Run",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "HTTP Request1": {
        "main": [
          [
            {
              "node": "Code",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Select Function": {
        "main": [
          [
            {
              "node": "HTTP Request",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "HTTP Request1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Last Message": {
        "main": [
          [
            {
              "node": "respondHubspotMessage1",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "getHubspotMessage": {
        "main": [
          [
            {
              "node": "IF",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAi Create Thread": {
        "main": [
          [
            {
              "node": "createThread",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Completed, Action or Inprogress": {
        "main": [
          [
            {
              "node": "Get Last Message",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Select Function",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Wait1",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Wait",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  },
  {
    "name": "Write a WordPress post with AI (starting from a few keywords)",
    "description": "Write a WordPress post with AI (starting from a few keywords): Event-driven automation with AI processing outputting to respondToWebhook",
    "nodes": [
      {
        "type": "n8n-nodes-base.formTrigger",
        "name": "Form",
        "parameters": [
          "path",
          "formTitle",
          "formFields",
          "responseMode",
          "formDescription"
        ]
      },
      {
        "type": "n8n-nodes-base.set",
        "name": "Settings",
        "parameters": [
          "options",
          "assignments"
        ]
      },
      {
        "type": "n8n-nodes-base.if",
        "name": "Check data consistency",
        "parameters": [
          "options",
          "conditions"
        ]
      },
      {
        "type": "n8n-nodes-base.splitOut",
        "name": "Split out chapters",
        "parameters": [
          "options",
          "fieldToSplitOut"
        ]
      },
      {
        "type": "n8n-nodes-base.merge",
        "name": "Merge chapters title and text",
        "parameters": [
          "mode",
          "options",
          "combinationMode"
        ]
      },
      {
        "type": "n8n-nodes-base.code",
        "name": "Final article text",
        "parameters": [
          "jsCode"
        ]
      },
      {
        "type": "n8n-nodes-base.wordpress",
        "name": "Post on Wordpress",
        "parameters": [
          "title",
          "additionalFields"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Upload media",
        "parameters": [
          "url",
          "method",
          "options",
          "sendBody",
          "contentType",
          "sendHeaders",
          "authentication",
          "headerParameters",
          "inputDataFieldName",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.httpRequest",
        "name": "Set image ID for the post",
        "parameters": [
          "url",
          "method",
          "options",
          "sendQuery",
          "authentication",
          "queryParameters",
          "nodeCredentialType"
        ]
      },
      {
        "type": "n8n-nodes-base.respondToWebhook",
        "name": "Respond: Success",
        "parameters": [
          "options",
          "respondWith",
          "responseBody"
        ]
      },
      {
        "type": "n8n-nodes-base.respondToWebhook",
        "name": "Respond: Error",
        "parameters": [
          "options",
          "respondWith",
          "responseBody"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Generate featured image",
        "parameters": [
          "prompt",
          "options",
          "resource"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
        "name": "Wikipedia",
        "parameters": []
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Create post title and structure",
        "parameters": [
          "modelId",
          "options",
          "messages",
          "jsonOutput"
        ]
      },
      {
        "type": "@n8n/n8n-nodes-langchain.openAi",
        "name": "Create chapters text",
        "parameters": [
          "modelId",
          "options",
          "messages"
        ]
      }
    ],
    "connections": {
      "Form": {
        "main": [
          [
            {
              "node": "Settings",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Settings": {
        "main": [
          [
            {
              "node": "Create post title and structure",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Wikipedia": {
        "ai_tool": [
          [
            {
              "node": "Create post title and structure",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Upload media": {
        "main": [
          [
            {
              "node": "Set image ID for the post",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Post on Wordpress": {
        "main": [
          [
            {
              "node": "Generate featured image",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Final article text": {
        "main": [
          [
            {
              "node": "Post on Wordpress",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split out chapters": {
        "main": [
          [
            {
              "node": "Merge chapters title and text",
              "type": "main",
              "index": 1
            },
            {
              "node": "Create chapters text",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Create chapters text": {
        "main": [
          [
            {
              "node": "Merge chapters title and text",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check data consistency": {
        "main": [
          [
            {
              "node": "Split out chapters",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Respond: Error",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate featured image": {
        "main": [
          [
            {
              "node": "Upload media",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set image ID for the post": {
        "main": [
          [
            {
              "node": "Respond: Success",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge chapters title and text": {
        "main": [
          [
            {
              "node": "Final article text",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Create post title and structure": {
        "main": [
          [
            {
              "node": "Check data consistency",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "tags": []
  }
]