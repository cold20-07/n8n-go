#!/usr/bin/env python3
"""Comprehensive Final Testing for N8n JSON Generator"""

import json
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from app import app

def test_actual_workflow_generation():
    """Test the actual workflow generation functionality"""
    print("üîß Testing Actual Workflow Generation")
    print("=" * 45)
    
    app.config['TESTING'] = True
    client = app.test_client()
    
    # Test with a real workflow scenario
    response = client.post('/generate',
                          data=json.dumps({
                              'description': 'Create a lead processing workflow that receives leads via webhook, validates the data, sends to CRM, and notifies sales team',
                              'trigger_type': 'webhook'
                          }),
                          content_type='application/json')
    
    print(f"Response Status: {response.status_code}")
    print(f"Response Data: {response.data.decode('utf-8')[:200]}...")
    
    if response.status_code == 200:
        try:
            workflow = json.loads(response.data)
            print(f"‚úÖ Valid JSON response")
            print(f"‚úÖ Response keys: {list(workflow.keys())}")
            
            # Check if it's actually generating workflows
            if 'nodes' in workflow and isinstance(workflow['nodes'], list):
                print(f"‚úÖ Contains nodes array with {len(workflow['nodes'])} nodes")
                
                if len(workflow['nodes']) > 0:
                    print("‚úÖ Actually generating workflow nodes")
                    for i, node in enumerate(workflow['nodes'][:3]):  # Show first 3 nodes
                        print(f"   Node {i}: {node.get('name', 'unnamed')} ({node.get('type', 'unknown')})")
                    return True
                else:
                    print("‚ùå No nodes generated")
                    return False
            else:
                print("‚ùå No nodes in response")
                return False
                
        except json.JSONDecodeError:
            print("‚ùå Invalid JSON response")
            return False
    else:
        print("‚ùå Request failed")
        return False

def test_workflow_generation_function():
    """Test the workflow generation function directly"""
    print("\nüéØ Testing Workflow Generation Function Directly")
    print("=" * 55)
    
    try:
        # Import the generation function
        from app import generate_workflow
        
        # Test direct function call
        result = generate_workflow(
            "Create a simple webhook to email workflow",
            "webhook"
        )
        
        print(f"‚úÖ Function callable")
        print(f"‚úÖ Result type: {type(result)}")
        
        if isinstance(result, dict):
            print(f"‚úÖ Returns dictionary")
            print(f"‚úÖ Keys: {list(result.keys())}")
            
            if 'nodes' in result and len(result['nodes']) > 0:
                print(f"‚úÖ Generates {len(result['nodes'])} nodes")
                return True
            else:
                print("‚ùå No nodes generated by function")
                return False
        else:
            print("‚ùå Function doesn't return dictionary")
            return False
            
    except ImportError:
        print("‚ùå Cannot import generate_workflow function")
        return False
    except Exception as e:
        print(f"‚ùå Function error: {str(e)}")
        return False

def test_response_format():
    """Test the response format consistency"""
    print("\nüìã Testing Response Format Consistency")
    print("=" * 45)
    
    app.config['TESTING'] = True
    client = app.test_client()
    
    test_cases = [
        {'description': 'Simple webhook workflow', 'trigger_type': 'webhook'},
        {'description': 'Scheduled data sync workflow', 'trigger_type': 'schedule'},
        {'description': 'Manual data processing workflow', 'trigger_type': 'manual'}
    ]
    
    consistent_format = True
    expected_keys = None
    
    for i, case in enumerate(test_cases):
        response = client.post('/generate',
                              data=json.dumps(case),
                              content_type='application/json')
        
        if response.status_code == 200:
            try:
                workflow = json.loads(response.data)
                current_keys = set(workflow.keys())
                
                if expected_keys is None:
                    expected_keys = current_keys
                    print(f"‚úÖ Test {i+1}: Format established with keys: {sorted(current_keys)}")
                elif current_keys == expected_keys:
                    print(f"‚úÖ Test {i+1}: Consistent format")
                else:
                    print(f"‚ùå Test {i+1}: Inconsistent format")
                    print(f"   Expected: {sorted(expected_keys)}")
                    print(f"   Got: {sorted(current_keys)}")
                    consistent_format = False
                    
            except json.JSONDecodeError:
                print(f"‚ùå Test {i+1}: Invalid JSON")
                consistent_format = False
        else:
            print(f"‚ùå Test {i+1}: Request failed")
            consistent_format = False
    
    return consistent_format

if __name__ == "__main__":
    print("üß™ COMPREHENSIVE FINAL TESTING")
    print("=" * 50)
    
    generation_works = test_actual_workflow_generation()
    function_works = test_workflow_generation_function()
    format_consistent = test_response_format()
    
    print(f"\nüìä FINAL TEST SUMMARY")
    print("=" * 30)
    print(f"‚úÖ Workflow Generation API: {'PASS' if generation_works else 'FAIL'}")
    print(f"‚úÖ Generation Function: {'PASS' if function_works else 'FAIL'}")
    print(f"‚úÖ Response Format: {'PASS' if format_consistent else 'FAIL'}")
    
    if generation_works and function_works and format_consistent:
        print("\nüéâ ALL CORE FUNCTIONALITY TESTS PASSED!")
        print("üöÄ Your N8n JSON Generator is working correctly!")
    else:
        print("\n‚ö†Ô∏è SOME CORE FUNCTIONALITY ISSUES DETECTED")
        print("üîß Check the test results above for details")